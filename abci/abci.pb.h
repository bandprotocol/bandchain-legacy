// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abci.proto

#ifndef PROTOBUF_abci_2eproto__INCLUDED
#define PROTOBUF_abci_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace abci {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_abci_2eproto();
void protobuf_AssignDesc_abci_2eproto();
void protobuf_ShutdownFile_abci_2eproto();

class BlockGossip;
class BlockID;
class BlockSize;
class ConsensusParams;
class Evidence;
class Header;
class KI64Pair;
class KVPair;
class PartSetHeader;
class Request;
class RequestBeginBlock;
class RequestCheckTx;
class RequestCommit;
class RequestDeliverTx;
class RequestEcho;
class RequestEndBlock;
class RequestFlush;
class RequestInfo;
class RequestInitChain;
class RequestQuery;
class RequestSetOption;
class Response;
class ResponseBeginBlock;
class ResponseCheckTx;
class ResponseCommit;
class ResponseDeliverTx;
class ResponseEcho;
class ResponseEndBlock;
class ResponseException;
class ResponseFlush;
class ResponseInfo;
class ResponseInitChain;
class ResponseQuery;
class ResponseSetOption;
class TxSize;
class Validator;

// ===================================================================

class KVPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.KVPair) */ {
 public:
  KVPair();
  virtual ~KVPair();

  KVPair(const KVPair& from);

  inline KVPair& operator=(const KVPair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KVPair& default_instance();

  void Swap(KVPair* other);

  // implements Message ----------------------------------------------

  inline KVPair* New() const { return New(NULL); }

  KVPair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVPair& from);
  void MergeFrom(const KVPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KVPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:abci.KVPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static KVPair* default_instance_;
};
// -------------------------------------------------------------------

class KI64Pair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.KI64Pair) */ {
 public:
  KI64Pair();
  virtual ~KI64Pair();

  KI64Pair(const KI64Pair& from);

  inline KI64Pair& operator=(const KI64Pair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KI64Pair& default_instance();

  void Swap(KI64Pair* other);

  // implements Message ----------------------------------------------

  inline KI64Pair* New() const { return New(NULL); }

  KI64Pair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KI64Pair& from);
  void MergeFrom(const KI64Pair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KI64Pair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional int64 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:abci.KI64Pair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int64 value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static KI64Pair* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum ValueCase {
    kEcho = 2,
    kFlush = 3,
    kInfo = 4,
    kSetOption = 5,
    kInitChain = 6,
    kQuery = 7,
    kBeginBlock = 8,
    kCheckTx = 9,
    kDeliverTx = 19,
    kEndBlock = 11,
    kCommit = 12,
    VALUE_NOT_SET = 0,
  };

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abci.RequestEcho echo = 2;
  bool has_echo() const;
  void clear_echo();
  static const int kEchoFieldNumber = 2;
  const ::abci::RequestEcho& echo() const;
  ::abci::RequestEcho* mutable_echo();
  ::abci::RequestEcho* release_echo();
  void set_allocated_echo(::abci::RequestEcho* echo);

  // optional .abci.RequestFlush flush = 3;
  bool has_flush() const;
  void clear_flush();
  static const int kFlushFieldNumber = 3;
  const ::abci::RequestFlush& flush() const;
  ::abci::RequestFlush* mutable_flush();
  ::abci::RequestFlush* release_flush();
  void set_allocated_flush(::abci::RequestFlush* flush);

  // optional .abci.RequestInfo info = 4;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::abci::RequestInfo& info() const;
  ::abci::RequestInfo* mutable_info();
  ::abci::RequestInfo* release_info();
  void set_allocated_info(::abci::RequestInfo* info);

  // optional .abci.RequestSetOption set_option = 5;
  bool has_set_option() const;
  void clear_set_option();
  static const int kSetOptionFieldNumber = 5;
  const ::abci::RequestSetOption& set_option() const;
  ::abci::RequestSetOption* mutable_set_option();
  ::abci::RequestSetOption* release_set_option();
  void set_allocated_set_option(::abci::RequestSetOption* set_option);

  // optional .abci.RequestInitChain init_chain = 6;
  bool has_init_chain() const;
  void clear_init_chain();
  static const int kInitChainFieldNumber = 6;
  const ::abci::RequestInitChain& init_chain() const;
  ::abci::RequestInitChain* mutable_init_chain();
  ::abci::RequestInitChain* release_init_chain();
  void set_allocated_init_chain(::abci::RequestInitChain* init_chain);

  // optional .abci.RequestQuery query = 7;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 7;
  const ::abci::RequestQuery& query() const;
  ::abci::RequestQuery* mutable_query();
  ::abci::RequestQuery* release_query();
  void set_allocated_query(::abci::RequestQuery* query);

  // optional .abci.RequestBeginBlock begin_block = 8;
  bool has_begin_block() const;
  void clear_begin_block();
  static const int kBeginBlockFieldNumber = 8;
  const ::abci::RequestBeginBlock& begin_block() const;
  ::abci::RequestBeginBlock* mutable_begin_block();
  ::abci::RequestBeginBlock* release_begin_block();
  void set_allocated_begin_block(::abci::RequestBeginBlock* begin_block);

  // optional .abci.RequestCheckTx check_tx = 9;
  bool has_check_tx() const;
  void clear_check_tx();
  static const int kCheckTxFieldNumber = 9;
  const ::abci::RequestCheckTx& check_tx() const;
  ::abci::RequestCheckTx* mutable_check_tx();
  ::abci::RequestCheckTx* release_check_tx();
  void set_allocated_check_tx(::abci::RequestCheckTx* check_tx);

  // optional .abci.RequestDeliverTx deliver_tx = 19;
  bool has_deliver_tx() const;
  void clear_deliver_tx();
  static const int kDeliverTxFieldNumber = 19;
  const ::abci::RequestDeliverTx& deliver_tx() const;
  ::abci::RequestDeliverTx* mutable_deliver_tx();
  ::abci::RequestDeliverTx* release_deliver_tx();
  void set_allocated_deliver_tx(::abci::RequestDeliverTx* deliver_tx);

  // optional .abci.RequestEndBlock end_block = 11;
  bool has_end_block() const;
  void clear_end_block();
  static const int kEndBlockFieldNumber = 11;
  const ::abci::RequestEndBlock& end_block() const;
  ::abci::RequestEndBlock* mutable_end_block();
  ::abci::RequestEndBlock* release_end_block();
  void set_allocated_end_block(::abci::RequestEndBlock* end_block);

  // optional .abci.RequestCommit commit = 12;
  bool has_commit() const;
  void clear_commit();
  static const int kCommitFieldNumber = 12;
  const ::abci::RequestCommit& commit() const;
  ::abci::RequestCommit* mutable_commit();
  ::abci::RequestCommit* release_commit();
  void set_allocated_commit(::abci::RequestCommit* commit);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:abci.Request)
 private:
  inline void set_has_echo();
  inline void set_has_flush();
  inline void set_has_info();
  inline void set_has_set_option();
  inline void set_has_init_chain();
  inline void set_has_query();
  inline void set_has_begin_block();
  inline void set_has_check_tx();
  inline void set_has_deliver_tx();
  inline void set_has_end_block();
  inline void set_has_commit();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ValueUnion {
    ValueUnion() {}
    ::abci::RequestEcho* echo_;
    ::abci::RequestFlush* flush_;
    ::abci::RequestInfo* info_;
    ::abci::RequestSetOption* set_option_;
    ::abci::RequestInitChain* init_chain_;
    ::abci::RequestQuery* query_;
    ::abci::RequestBeginBlock* begin_block_;
    ::abci::RequestCheckTx* check_tx_;
    ::abci::RequestDeliverTx* deliver_tx_;
    ::abci::RequestEndBlock* end_block_;
    ::abci::RequestCommit* commit_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class RequestEcho : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestEcho) */ {
 public:
  RequestEcho();
  virtual ~RequestEcho();

  RequestEcho(const RequestEcho& from);

  inline RequestEcho& operator=(const RequestEcho& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestEcho& default_instance();

  void Swap(RequestEcho* other);

  // implements Message ----------------------------------------------

  inline RequestEcho* New() const { return New(NULL); }

  RequestEcho* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestEcho& from);
  void MergeFrom(const RequestEcho& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestEcho* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:abci.RequestEcho)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestEcho* default_instance_;
};
// -------------------------------------------------------------------

class RequestFlush : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestFlush) */ {
 public:
  RequestFlush();
  virtual ~RequestFlush();

  RequestFlush(const RequestFlush& from);

  inline RequestFlush& operator=(const RequestFlush& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestFlush& default_instance();

  void Swap(RequestFlush* other);

  // implements Message ----------------------------------------------

  inline RequestFlush* New() const { return New(NULL); }

  RequestFlush* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestFlush& from);
  void MergeFrom(const RequestFlush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestFlush* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:abci.RequestFlush)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestFlush* default_instance_;
};
// -------------------------------------------------------------------

class RequestInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestInfo) */ {
 public:
  RequestInfo();
  virtual ~RequestInfo();

  RequestInfo(const RequestInfo& from);

  inline RequestInfo& operator=(const RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestInfo& default_instance();

  void Swap(RequestInfo* other);

  // implements Message ----------------------------------------------

  inline RequestInfo* New() const { return New(NULL); }

  RequestInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestInfo& from);
  void MergeFrom(const RequestInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:abci.RequestInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestSetOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestSetOption) */ {
 public:
  RequestSetOption();
  virtual ~RequestSetOption();

  RequestSetOption(const RequestSetOption& from);

  inline RequestSetOption& operator=(const RequestSetOption& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSetOption& default_instance();

  void Swap(RequestSetOption* other);

  // implements Message ----------------------------------------------

  inline RequestSetOption* New() const { return New(NULL); }

  RequestSetOption* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSetOption& from);
  void MergeFrom(const RequestSetOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestSetOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:abci.RequestSetOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestSetOption* default_instance_;
};
// -------------------------------------------------------------------

class RequestInitChain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestInitChain) */ {
 public:
  RequestInitChain();
  virtual ~RequestInitChain();

  RequestInitChain(const RequestInitChain& from);

  inline RequestInitChain& operator=(const RequestInitChain& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestInitChain& default_instance();

  void Swap(RequestInitChain* other);

  // implements Message ----------------------------------------------

  inline RequestInitChain* New() const { return New(NULL); }

  RequestInitChain* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestInitChain& from);
  void MergeFrom(const RequestInitChain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestInitChain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .abci.Validator validators = 1;
  int validators_size() const;
  void clear_validators();
  static const int kValidatorsFieldNumber = 1;
  const ::abci::Validator& validators(int index) const;
  ::abci::Validator* mutable_validators(int index);
  ::abci::Validator* add_validators();
  ::google::protobuf::RepeatedPtrField< ::abci::Validator >*
      mutable_validators();
  const ::google::protobuf::RepeatedPtrField< ::abci::Validator >&
      validators() const;

  // optional bytes app_state_bytes = 2;
  void clear_app_state_bytes();
  static const int kAppStateBytesFieldNumber = 2;
  const ::std::string& app_state_bytes() const;
  void set_app_state_bytes(const ::std::string& value);
  void set_app_state_bytes(const char* value);
  void set_app_state_bytes(const void* value, size_t size);
  ::std::string* mutable_app_state_bytes();
  ::std::string* release_app_state_bytes();
  void set_allocated_app_state_bytes(::std::string* app_state_bytes);

  // @@protoc_insertion_point(class_scope:abci.RequestInitChain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::abci::Validator > validators_;
  ::google::protobuf::internal::ArenaStringPtr app_state_bytes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestInitChain* default_instance_;
};
// -------------------------------------------------------------------

class RequestQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestQuery) */ {
 public:
  RequestQuery();
  virtual ~RequestQuery();

  RequestQuery(const RequestQuery& from);

  inline RequestQuery& operator=(const RequestQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestQuery& default_instance();

  void Swap(RequestQuery* other);

  // implements Message ----------------------------------------------

  inline RequestQuery* New() const { return New(NULL); }

  RequestQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestQuery& from);
  void MergeFrom(const RequestQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional int64 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // optional bool prove = 4;
  void clear_prove();
  static const int kProveFieldNumber = 4;
  bool prove() const;
  void set_prove(bool value);

  // @@protoc_insertion_point(class_scope:abci.RequestQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int64 height_;
  bool prove_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestQuery* default_instance_;
};
// -------------------------------------------------------------------

class RequestBeginBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestBeginBlock) */ {
 public:
  RequestBeginBlock();
  virtual ~RequestBeginBlock();

  RequestBeginBlock(const RequestBeginBlock& from);

  inline RequestBeginBlock& operator=(const RequestBeginBlock& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestBeginBlock& default_instance();

  void Swap(RequestBeginBlock* other);

  // implements Message ----------------------------------------------

  inline RequestBeginBlock* New() const { return New(NULL); }

  RequestBeginBlock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestBeginBlock& from);
  void MergeFrom(const RequestBeginBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestBeginBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional .abci.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::abci::Header& header() const;
  ::abci::Header* mutable_header();
  ::abci::Header* release_header();
  void set_allocated_header(::abci::Header* header);

  // repeated int32 absent_validators = 3;
  int absent_validators_size() const;
  void clear_absent_validators();
  static const int kAbsentValidatorsFieldNumber = 3;
  ::google::protobuf::int32 absent_validators(int index) const;
  void set_absent_validators(int index, ::google::protobuf::int32 value);
  void add_absent_validators(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      absent_validators() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_absent_validators();

  // repeated .abci.Evidence byzantine_validators = 4;
  int byzantine_validators_size() const;
  void clear_byzantine_validators();
  static const int kByzantineValidatorsFieldNumber = 4;
  const ::abci::Evidence& byzantine_validators(int index) const;
  ::abci::Evidence* mutable_byzantine_validators(int index);
  ::abci::Evidence* add_byzantine_validators();
  ::google::protobuf::RepeatedPtrField< ::abci::Evidence >*
      mutable_byzantine_validators();
  const ::google::protobuf::RepeatedPtrField< ::abci::Evidence >&
      byzantine_validators() const;

  // @@protoc_insertion_point(class_scope:abci.RequestBeginBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::abci::Header* header_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > absent_validators_;
  mutable int _absent_validators_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::abci::Evidence > byzantine_validators_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestBeginBlock* default_instance_;
};
// -------------------------------------------------------------------

class RequestCheckTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestCheckTx) */ {
 public:
  RequestCheckTx();
  virtual ~RequestCheckTx();

  RequestCheckTx(const RequestCheckTx& from);

  inline RequestCheckTx& operator=(const RequestCheckTx& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestCheckTx& default_instance();

  void Swap(RequestCheckTx* other);

  // implements Message ----------------------------------------------

  inline RequestCheckTx* New() const { return New(NULL); }

  RequestCheckTx* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestCheckTx& from);
  void MergeFrom(const RequestCheckTx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestCheckTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tx = 1;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::std::string& tx() const;
  void set_tx(const ::std::string& value);
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  ::std::string* mutable_tx();
  ::std::string* release_tx();
  void set_allocated_tx(::std::string* tx);

  // @@protoc_insertion_point(class_scope:abci.RequestCheckTx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tx_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestCheckTx* default_instance_;
};
// -------------------------------------------------------------------

class RequestDeliverTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestDeliverTx) */ {
 public:
  RequestDeliverTx();
  virtual ~RequestDeliverTx();

  RequestDeliverTx(const RequestDeliverTx& from);

  inline RequestDeliverTx& operator=(const RequestDeliverTx& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestDeliverTx& default_instance();

  void Swap(RequestDeliverTx* other);

  // implements Message ----------------------------------------------

  inline RequestDeliverTx* New() const { return New(NULL); }

  RequestDeliverTx* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestDeliverTx& from);
  void MergeFrom(const RequestDeliverTx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestDeliverTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes tx = 1;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::std::string& tx() const;
  void set_tx(const ::std::string& value);
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  ::std::string* mutable_tx();
  ::std::string* release_tx();
  void set_allocated_tx(::std::string* tx);

  // @@protoc_insertion_point(class_scope:abci.RequestDeliverTx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tx_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestDeliverTx* default_instance_;
};
// -------------------------------------------------------------------

class RequestEndBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestEndBlock) */ {
 public:
  RequestEndBlock();
  virtual ~RequestEndBlock();

  RequestEndBlock(const RequestEndBlock& from);

  inline RequestEndBlock& operator=(const RequestEndBlock& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestEndBlock& default_instance();

  void Swap(RequestEndBlock* other);

  // implements Message ----------------------------------------------

  inline RequestEndBlock* New() const { return New(NULL); }

  RequestEndBlock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestEndBlock& from);
  void MergeFrom(const RequestEndBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestEndBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 height = 1;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:abci.RequestEndBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestEndBlock* default_instance_;
};
// -------------------------------------------------------------------

class RequestCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.RequestCommit) */ {
 public:
  RequestCommit();
  virtual ~RequestCommit();

  RequestCommit(const RequestCommit& from);

  inline RequestCommit& operator=(const RequestCommit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestCommit& default_instance();

  void Swap(RequestCommit* other);

  // implements Message ----------------------------------------------

  inline RequestCommit* New() const { return New(NULL); }

  RequestCommit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestCommit& from);
  void MergeFrom(const RequestCommit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:abci.RequestCommit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static RequestCommit* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum ValueCase {
    kException = 1,
    kEcho = 2,
    kFlush = 3,
    kInfo = 4,
    kSetOption = 5,
    kInitChain = 6,
    kQuery = 7,
    kBeginBlock = 8,
    kCheckTx = 9,
    kDeliverTx = 10,
    kEndBlock = 11,
    kCommit = 12,
    VALUE_NOT_SET = 0,
  };

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abci.ResponseException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::abci::ResponseException& exception() const;
  ::abci::ResponseException* mutable_exception();
  ::abci::ResponseException* release_exception();
  void set_allocated_exception(::abci::ResponseException* exception);

  // optional .abci.ResponseEcho echo = 2;
  bool has_echo() const;
  void clear_echo();
  static const int kEchoFieldNumber = 2;
  const ::abci::ResponseEcho& echo() const;
  ::abci::ResponseEcho* mutable_echo();
  ::abci::ResponseEcho* release_echo();
  void set_allocated_echo(::abci::ResponseEcho* echo);

  // optional .abci.ResponseFlush flush = 3;
  bool has_flush() const;
  void clear_flush();
  static const int kFlushFieldNumber = 3;
  const ::abci::ResponseFlush& flush() const;
  ::abci::ResponseFlush* mutable_flush();
  ::abci::ResponseFlush* release_flush();
  void set_allocated_flush(::abci::ResponseFlush* flush);

  // optional .abci.ResponseInfo info = 4;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::abci::ResponseInfo& info() const;
  ::abci::ResponseInfo* mutable_info();
  ::abci::ResponseInfo* release_info();
  void set_allocated_info(::abci::ResponseInfo* info);

  // optional .abci.ResponseSetOption set_option = 5;
  bool has_set_option() const;
  void clear_set_option();
  static const int kSetOptionFieldNumber = 5;
  const ::abci::ResponseSetOption& set_option() const;
  ::abci::ResponseSetOption* mutable_set_option();
  ::abci::ResponseSetOption* release_set_option();
  void set_allocated_set_option(::abci::ResponseSetOption* set_option);

  // optional .abci.ResponseInitChain init_chain = 6;
  bool has_init_chain() const;
  void clear_init_chain();
  static const int kInitChainFieldNumber = 6;
  const ::abci::ResponseInitChain& init_chain() const;
  ::abci::ResponseInitChain* mutable_init_chain();
  ::abci::ResponseInitChain* release_init_chain();
  void set_allocated_init_chain(::abci::ResponseInitChain* init_chain);

  // optional .abci.ResponseQuery query = 7;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 7;
  const ::abci::ResponseQuery& query() const;
  ::abci::ResponseQuery* mutable_query();
  ::abci::ResponseQuery* release_query();
  void set_allocated_query(::abci::ResponseQuery* query);

  // optional .abci.ResponseBeginBlock begin_block = 8;
  bool has_begin_block() const;
  void clear_begin_block();
  static const int kBeginBlockFieldNumber = 8;
  const ::abci::ResponseBeginBlock& begin_block() const;
  ::abci::ResponseBeginBlock* mutable_begin_block();
  ::abci::ResponseBeginBlock* release_begin_block();
  void set_allocated_begin_block(::abci::ResponseBeginBlock* begin_block);

  // optional .abci.ResponseCheckTx check_tx = 9;
  bool has_check_tx() const;
  void clear_check_tx();
  static const int kCheckTxFieldNumber = 9;
  const ::abci::ResponseCheckTx& check_tx() const;
  ::abci::ResponseCheckTx* mutable_check_tx();
  ::abci::ResponseCheckTx* release_check_tx();
  void set_allocated_check_tx(::abci::ResponseCheckTx* check_tx);

  // optional .abci.ResponseDeliverTx deliver_tx = 10;
  bool has_deliver_tx() const;
  void clear_deliver_tx();
  static const int kDeliverTxFieldNumber = 10;
  const ::abci::ResponseDeliverTx& deliver_tx() const;
  ::abci::ResponseDeliverTx* mutable_deliver_tx();
  ::abci::ResponseDeliverTx* release_deliver_tx();
  void set_allocated_deliver_tx(::abci::ResponseDeliverTx* deliver_tx);

  // optional .abci.ResponseEndBlock end_block = 11;
  bool has_end_block() const;
  void clear_end_block();
  static const int kEndBlockFieldNumber = 11;
  const ::abci::ResponseEndBlock& end_block() const;
  ::abci::ResponseEndBlock* mutable_end_block();
  ::abci::ResponseEndBlock* release_end_block();
  void set_allocated_end_block(::abci::ResponseEndBlock* end_block);

  // optional .abci.ResponseCommit commit = 12;
  bool has_commit() const;
  void clear_commit();
  static const int kCommitFieldNumber = 12;
  const ::abci::ResponseCommit& commit() const;
  ::abci::ResponseCommit* mutable_commit();
  ::abci::ResponseCommit* release_commit();
  void set_allocated_commit(::abci::ResponseCommit* commit);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:abci.Response)
 private:
  inline void set_has_exception();
  inline void set_has_echo();
  inline void set_has_flush();
  inline void set_has_info();
  inline void set_has_set_option();
  inline void set_has_init_chain();
  inline void set_has_query();
  inline void set_has_begin_block();
  inline void set_has_check_tx();
  inline void set_has_deliver_tx();
  inline void set_has_end_block();
  inline void set_has_commit();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ValueUnion {
    ValueUnion() {}
    ::abci::ResponseException* exception_;
    ::abci::ResponseEcho* echo_;
    ::abci::ResponseFlush* flush_;
    ::abci::ResponseInfo* info_;
    ::abci::ResponseSetOption* set_option_;
    ::abci::ResponseInitChain* init_chain_;
    ::abci::ResponseQuery* query_;
    ::abci::ResponseBeginBlock* begin_block_;
    ::abci::ResponseCheckTx* check_tx_;
    ::abci::ResponseDeliverTx* deliver_tx_;
    ::abci::ResponseEndBlock* end_block_;
    ::abci::ResponseCommit* commit_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ResponseException : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseException) */ {
 public:
  ResponseException();
  virtual ~ResponseException();

  ResponseException(const ResponseException& from);

  inline ResponseException& operator=(const ResponseException& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseException& default_instance();

  void Swap(ResponseException* other);

  // implements Message ----------------------------------------------

  inline ResponseException* New() const { return New(NULL); }

  ResponseException* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseException& from);
  void MergeFrom(const ResponseException& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseException* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:abci.ResponseException)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseException* default_instance_;
};
// -------------------------------------------------------------------

class ResponseEcho : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseEcho) */ {
 public:
  ResponseEcho();
  virtual ~ResponseEcho();

  ResponseEcho(const ResponseEcho& from);

  inline ResponseEcho& operator=(const ResponseEcho& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseEcho& default_instance();

  void Swap(ResponseEcho* other);

  // implements Message ----------------------------------------------

  inline ResponseEcho* New() const { return New(NULL); }

  ResponseEcho* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseEcho& from);
  void MergeFrom(const ResponseEcho& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseEcho* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:abci.ResponseEcho)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseEcho* default_instance_;
};
// -------------------------------------------------------------------

class ResponseFlush : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseFlush) */ {
 public:
  ResponseFlush();
  virtual ~ResponseFlush();

  ResponseFlush(const ResponseFlush& from);

  inline ResponseFlush& operator=(const ResponseFlush& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseFlush& default_instance();

  void Swap(ResponseFlush* other);

  // implements Message ----------------------------------------------

  inline ResponseFlush* New() const { return New(NULL); }

  ResponseFlush* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseFlush& from);
  void MergeFrom(const ResponseFlush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseFlush* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:abci.ResponseFlush)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseFlush* default_instance_;
};
// -------------------------------------------------------------------

class ResponseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseInfo) */ {
 public:
  ResponseInfo();
  virtual ~ResponseInfo();

  ResponseInfo(const ResponseInfo& from);

  inline ResponseInfo& operator=(const ResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseInfo& default_instance();

  void Swap(ResponseInfo* other);

  // implements Message ----------------------------------------------

  inline ResponseInfo* New() const { return New(NULL); }

  ResponseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseInfo& from);
  void MergeFrom(const ResponseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional int64 last_block_height = 3;
  void clear_last_block_height();
  static const int kLastBlockHeightFieldNumber = 3;
  ::google::protobuf::int64 last_block_height() const;
  void set_last_block_height(::google::protobuf::int64 value);

  // optional bytes last_block_app_hash = 4;
  void clear_last_block_app_hash();
  static const int kLastBlockAppHashFieldNumber = 4;
  const ::std::string& last_block_app_hash() const;
  void set_last_block_app_hash(const ::std::string& value);
  void set_last_block_app_hash(const char* value);
  void set_last_block_app_hash(const void* value, size_t size);
  ::std::string* mutable_last_block_app_hash();
  ::std::string* release_last_block_app_hash();
  void set_allocated_last_block_app_hash(::std::string* last_block_app_hash);

  // @@protoc_insertion_point(class_scope:abci.ResponseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int64 last_block_height_;
  ::google::protobuf::internal::ArenaStringPtr last_block_app_hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResponseSetOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseSetOption) */ {
 public:
  ResponseSetOption();
  virtual ~ResponseSetOption();

  ResponseSetOption(const ResponseSetOption& from);

  inline ResponseSetOption& operator=(const ResponseSetOption& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseSetOption& default_instance();

  void Swap(ResponseSetOption* other);

  // implements Message ----------------------------------------------

  inline ResponseSetOption* New() const { return New(NULL); }

  ResponseSetOption* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseSetOption& from);
  void MergeFrom(const ResponseSetOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseSetOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // optional string log = 3;
  void clear_log();
  static const int kLogFieldNumber = 3;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // optional string info = 4;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:abci.ResponseSetOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::uint32 code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseSetOption* default_instance_;
};
// -------------------------------------------------------------------

class ResponseInitChain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseInitChain) */ {
 public:
  ResponseInitChain();
  virtual ~ResponseInitChain();

  ResponseInitChain(const ResponseInitChain& from);

  inline ResponseInitChain& operator=(const ResponseInitChain& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseInitChain& default_instance();

  void Swap(ResponseInitChain* other);

  // implements Message ----------------------------------------------

  inline ResponseInitChain* New() const { return New(NULL); }

  ResponseInitChain* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseInitChain& from);
  void MergeFrom(const ResponseInitChain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseInitChain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:abci.ResponseInitChain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseInitChain* default_instance_;
};
// -------------------------------------------------------------------

class ResponseQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseQuery) */ {
 public:
  ResponseQuery();
  virtual ~ResponseQuery();

  ResponseQuery(const ResponseQuery& from);

  inline ResponseQuery& operator=(const ResponseQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseQuery& default_instance();

  void Swap(ResponseQuery* other);

  // implements Message ----------------------------------------------

  inline ResponseQuery* New() const { return New(NULL); }

  ResponseQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseQuery& from);
  void MergeFrom(const ResponseQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // optional string log = 3;
  void clear_log();
  static const int kLogFieldNumber = 3;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // optional string info = 4;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional int64 index = 5;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // optional bytes key = 6;
  void clear_key();
  static const int kKeyFieldNumber = 6;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 7;
  void clear_value();
  static const int kValueFieldNumber = 7;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional bytes proof = 8;
  void clear_proof();
  static const int kProofFieldNumber = 8;
  const ::std::string& proof() const;
  void set_proof(const ::std::string& value);
  void set_proof(const char* value);
  void set_proof(const void* value, size_t size);
  ::std::string* mutable_proof();
  ::std::string* release_proof();
  void set_allocated_proof(::std::string* proof);

  // optional int64 height = 9;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:abci.ResponseQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr proof_;
  ::google::protobuf::int64 height_;
  ::google::protobuf::uint32 code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseQuery* default_instance_;
};
// -------------------------------------------------------------------

class ResponseBeginBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseBeginBlock) */ {
 public:
  ResponseBeginBlock();
  virtual ~ResponseBeginBlock();

  ResponseBeginBlock(const ResponseBeginBlock& from);

  inline ResponseBeginBlock& operator=(const ResponseBeginBlock& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseBeginBlock& default_instance();

  void Swap(ResponseBeginBlock* other);

  // implements Message ----------------------------------------------

  inline ResponseBeginBlock* New() const { return New(NULL); }

  ResponseBeginBlock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseBeginBlock& from);
  void MergeFrom(const ResponseBeginBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseBeginBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:abci.ResponseBeginBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseBeginBlock* default_instance_;
};
// -------------------------------------------------------------------

class ResponseCheckTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseCheckTx) */ {
 public:
  ResponseCheckTx();
  virtual ~ResponseCheckTx();

  ResponseCheckTx(const ResponseCheckTx& from);

  inline ResponseCheckTx& operator=(const ResponseCheckTx& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseCheckTx& default_instance();

  void Swap(ResponseCheckTx* other);

  // implements Message ----------------------------------------------

  inline ResponseCheckTx* New() const { return New(NULL); }

  ResponseCheckTx* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseCheckTx& from);
  void MergeFrom(const ResponseCheckTx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseCheckTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string log = 3;
  void clear_log();
  static const int kLogFieldNumber = 3;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // optional string info = 4;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional int64 gas_wanted = 5;
  void clear_gas_wanted();
  static const int kGasWantedFieldNumber = 5;
  ::google::protobuf::int64 gas_wanted() const;
  void set_gas_wanted(::google::protobuf::int64 value);

  // optional int64 gas_used = 6;
  void clear_gas_used();
  static const int kGasUsedFieldNumber = 6;
  ::google::protobuf::int64 gas_used() const;
  void set_gas_used(::google::protobuf::int64 value);

  // repeated .abci.KVPair tags = 7;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 7;
  const ::abci::KVPair& tags(int index) const;
  ::abci::KVPair* mutable_tags(int index);
  ::abci::KVPair* add_tags();
  ::google::protobuf::RepeatedPtrField< ::abci::KVPair >*
      mutable_tags();
  const ::google::protobuf::RepeatedPtrField< ::abci::KVPair >&
      tags() const;

  // optional .abci.KI64Pair fee = 8;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 8;
  const ::abci::KI64Pair& fee() const;
  ::abci::KI64Pair* mutable_fee();
  ::abci::KI64Pair* release_fee();
  void set_allocated_fee(::abci::KI64Pair* fee);

  // @@protoc_insertion_point(class_scope:abci.ResponseCheckTx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int64 gas_wanted_;
  ::google::protobuf::int64 gas_used_;
  ::google::protobuf::RepeatedPtrField< ::abci::KVPair > tags_;
  ::abci::KI64Pair* fee_;
  ::google::protobuf::uint32 code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseCheckTx* default_instance_;
};
// -------------------------------------------------------------------

class ResponseDeliverTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseDeliverTx) */ {
 public:
  ResponseDeliverTx();
  virtual ~ResponseDeliverTx();

  ResponseDeliverTx(const ResponseDeliverTx& from);

  inline ResponseDeliverTx& operator=(const ResponseDeliverTx& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseDeliverTx& default_instance();

  void Swap(ResponseDeliverTx* other);

  // implements Message ----------------------------------------------

  inline ResponseDeliverTx* New() const { return New(NULL); }

  ResponseDeliverTx* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseDeliverTx& from);
  void MergeFrom(const ResponseDeliverTx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseDeliverTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string log = 3;
  void clear_log();
  static const int kLogFieldNumber = 3;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // optional string info = 4;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional int64 gas_wanted = 5;
  void clear_gas_wanted();
  static const int kGasWantedFieldNumber = 5;
  ::google::protobuf::int64 gas_wanted() const;
  void set_gas_wanted(::google::protobuf::int64 value);

  // optional int64 gas_used = 6;
  void clear_gas_used();
  static const int kGasUsedFieldNumber = 6;
  ::google::protobuf::int64 gas_used() const;
  void set_gas_used(::google::protobuf::int64 value);

  // repeated .abci.KVPair tags = 7;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 7;
  const ::abci::KVPair& tags(int index) const;
  ::abci::KVPair* mutable_tags(int index);
  ::abci::KVPair* add_tags();
  ::google::protobuf::RepeatedPtrField< ::abci::KVPair >*
      mutable_tags();
  const ::google::protobuf::RepeatedPtrField< ::abci::KVPair >&
      tags() const;

  // optional .abci.KI64Pair fee = 8;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 8;
  const ::abci::KI64Pair& fee() const;
  ::abci::KI64Pair* mutable_fee();
  ::abci::KI64Pair* release_fee();
  void set_allocated_fee(::abci::KI64Pair* fee);

  // @@protoc_insertion_point(class_scope:abci.ResponseDeliverTx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int64 gas_wanted_;
  ::google::protobuf::int64 gas_used_;
  ::google::protobuf::RepeatedPtrField< ::abci::KVPair > tags_;
  ::abci::KI64Pair* fee_;
  ::google::protobuf::uint32 code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseDeliverTx* default_instance_;
};
// -------------------------------------------------------------------

class ResponseEndBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseEndBlock) */ {
 public:
  ResponseEndBlock();
  virtual ~ResponseEndBlock();

  ResponseEndBlock(const ResponseEndBlock& from);

  inline ResponseEndBlock& operator=(const ResponseEndBlock& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseEndBlock& default_instance();

  void Swap(ResponseEndBlock* other);

  // implements Message ----------------------------------------------

  inline ResponseEndBlock* New() const { return New(NULL); }

  ResponseEndBlock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseEndBlock& from);
  void MergeFrom(const ResponseEndBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseEndBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .abci.Validator validator_updates = 1;
  int validator_updates_size() const;
  void clear_validator_updates();
  static const int kValidatorUpdatesFieldNumber = 1;
  const ::abci::Validator& validator_updates(int index) const;
  ::abci::Validator* mutable_validator_updates(int index);
  ::abci::Validator* add_validator_updates();
  ::google::protobuf::RepeatedPtrField< ::abci::Validator >*
      mutable_validator_updates();
  const ::google::protobuf::RepeatedPtrField< ::abci::Validator >&
      validator_updates() const;

  // optional .abci.ConsensusParams consensus_param_updates = 2;
  bool has_consensus_param_updates() const;
  void clear_consensus_param_updates();
  static const int kConsensusParamUpdatesFieldNumber = 2;
  const ::abci::ConsensusParams& consensus_param_updates() const;
  ::abci::ConsensusParams* mutable_consensus_param_updates();
  ::abci::ConsensusParams* release_consensus_param_updates();
  void set_allocated_consensus_param_updates(::abci::ConsensusParams* consensus_param_updates);

  // @@protoc_insertion_point(class_scope:abci.ResponseEndBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::abci::Validator > validator_updates_;
  ::abci::ConsensusParams* consensus_param_updates_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseEndBlock* default_instance_;
};
// -------------------------------------------------------------------

class ResponseCommit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ResponseCommit) */ {
 public:
  ResponseCommit();
  virtual ~ResponseCommit();

  ResponseCommit(const ResponseCommit& from);

  inline ResponseCommit& operator=(const ResponseCommit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseCommit& default_instance();

  void Swap(ResponseCommit* other);

  // implements Message ----------------------------------------------

  inline ResponseCommit* New() const { return New(NULL); }

  ResponseCommit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseCommit& from);
  void MergeFrom(const ResponseCommit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseCommit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:abci.ResponseCommit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ResponseCommit* default_instance_;
};
// -------------------------------------------------------------------

class ConsensusParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.ConsensusParams) */ {
 public:
  ConsensusParams();
  virtual ~ConsensusParams();

  ConsensusParams(const ConsensusParams& from);

  inline ConsensusParams& operator=(const ConsensusParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsensusParams& default_instance();

  void Swap(ConsensusParams* other);

  // implements Message ----------------------------------------------

  inline ConsensusParams* New() const { return New(NULL); }

  ConsensusParams* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsensusParams& from);
  void MergeFrom(const ConsensusParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConsensusParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .abci.BlockSize block_size = 1;
  bool has_block_size() const;
  void clear_block_size();
  static const int kBlockSizeFieldNumber = 1;
  const ::abci::BlockSize& block_size() const;
  ::abci::BlockSize* mutable_block_size();
  ::abci::BlockSize* release_block_size();
  void set_allocated_block_size(::abci::BlockSize* block_size);

  // optional .abci.TxSize tx_size = 2;
  bool has_tx_size() const;
  void clear_tx_size();
  static const int kTxSizeFieldNumber = 2;
  const ::abci::TxSize& tx_size() const;
  ::abci::TxSize* mutable_tx_size();
  ::abci::TxSize* release_tx_size();
  void set_allocated_tx_size(::abci::TxSize* tx_size);

  // optional .abci.BlockGossip block_gossip = 3;
  bool has_block_gossip() const;
  void clear_block_gossip();
  static const int kBlockGossipFieldNumber = 3;
  const ::abci::BlockGossip& block_gossip() const;
  ::abci::BlockGossip* mutable_block_gossip();
  ::abci::BlockGossip* release_block_gossip();
  void set_allocated_block_gossip(::abci::BlockGossip* block_gossip);

  // @@protoc_insertion_point(class_scope:abci.ConsensusParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::abci::BlockSize* block_size_;
  ::abci::TxSize* tx_size_;
  ::abci::BlockGossip* block_gossip_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static ConsensusParams* default_instance_;
};
// -------------------------------------------------------------------

class BlockSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.BlockSize) */ {
 public:
  BlockSize();
  virtual ~BlockSize();

  BlockSize(const BlockSize& from);

  inline BlockSize& operator=(const BlockSize& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockSize& default_instance();

  void Swap(BlockSize* other);

  // implements Message ----------------------------------------------

  inline BlockSize* New() const { return New(NULL); }

  BlockSize* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockSize& from);
  void MergeFrom(const BlockSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_bytes = 1;
  void clear_max_bytes();
  static const int kMaxBytesFieldNumber = 1;
  ::google::protobuf::int32 max_bytes() const;
  void set_max_bytes(::google::protobuf::int32 value);

  // optional int32 max_txs = 2;
  void clear_max_txs();
  static const int kMaxTxsFieldNumber = 2;
  ::google::protobuf::int32 max_txs() const;
  void set_max_txs(::google::protobuf::int32 value);

  // optional int64 max_gas = 3;
  void clear_max_gas();
  static const int kMaxGasFieldNumber = 3;
  ::google::protobuf::int64 max_gas() const;
  void set_max_gas(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:abci.BlockSize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 max_bytes_;
  ::google::protobuf::int32 max_txs_;
  ::google::protobuf::int64 max_gas_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static BlockSize* default_instance_;
};
// -------------------------------------------------------------------

class TxSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.TxSize) */ {
 public:
  TxSize();
  virtual ~TxSize();

  TxSize(const TxSize& from);

  inline TxSize& operator=(const TxSize& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxSize& default_instance();

  void Swap(TxSize* other);

  // implements Message ----------------------------------------------

  inline TxSize* New() const { return New(NULL); }

  TxSize* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TxSize& from);
  void MergeFrom(const TxSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TxSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_bytes = 1;
  void clear_max_bytes();
  static const int kMaxBytesFieldNumber = 1;
  ::google::protobuf::int32 max_bytes() const;
  void set_max_bytes(::google::protobuf::int32 value);

  // optional int64 max_gas = 2;
  void clear_max_gas();
  static const int kMaxGasFieldNumber = 2;
  ::google::protobuf::int64 max_gas() const;
  void set_max_gas(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:abci.TxSize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 max_gas_;
  ::google::protobuf::int32 max_bytes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static TxSize* default_instance_;
};
// -------------------------------------------------------------------

class BlockGossip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.BlockGossip) */ {
 public:
  BlockGossip();
  virtual ~BlockGossip();

  BlockGossip(const BlockGossip& from);

  inline BlockGossip& operator=(const BlockGossip& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockGossip& default_instance();

  void Swap(BlockGossip* other);

  // implements Message ----------------------------------------------

  inline BlockGossip* New() const { return New(NULL); }

  BlockGossip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockGossip& from);
  void MergeFrom(const BlockGossip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockGossip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 block_part_size_bytes = 1;
  void clear_block_part_size_bytes();
  static const int kBlockPartSizeBytesFieldNumber = 1;
  ::google::protobuf::int32 block_part_size_bytes() const;
  void set_block_part_size_bytes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:abci.BlockGossip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 block_part_size_bytes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static BlockGossip* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  const ::std::string& chain_id() const;
  void set_chain_id(const ::std::string& value);
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  ::std::string* mutable_chain_id();
  ::std::string* release_chain_id();
  void set_allocated_chain_id(::std::string* chain_id);

  // optional int64 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // optional int64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional int32 num_txs = 4;
  void clear_num_txs();
  static const int kNumTxsFieldNumber = 4;
  ::google::protobuf::int32 num_txs() const;
  void set_num_txs(::google::protobuf::int32 value);

  // optional .abci.BlockID last_block_id = 5;
  bool has_last_block_id() const;
  void clear_last_block_id();
  static const int kLastBlockIdFieldNumber = 5;
  const ::abci::BlockID& last_block_id() const;
  ::abci::BlockID* mutable_last_block_id();
  ::abci::BlockID* release_last_block_id();
  void set_allocated_last_block_id(::abci::BlockID* last_block_id);

  // optional bytes last_commit_hash = 6;
  void clear_last_commit_hash();
  static const int kLastCommitHashFieldNumber = 6;
  const ::std::string& last_commit_hash() const;
  void set_last_commit_hash(const ::std::string& value);
  void set_last_commit_hash(const char* value);
  void set_last_commit_hash(const void* value, size_t size);
  ::std::string* mutable_last_commit_hash();
  ::std::string* release_last_commit_hash();
  void set_allocated_last_commit_hash(::std::string* last_commit_hash);

  // optional bytes data_hash = 7;
  void clear_data_hash();
  static const int kDataHashFieldNumber = 7;
  const ::std::string& data_hash() const;
  void set_data_hash(const ::std::string& value);
  void set_data_hash(const char* value);
  void set_data_hash(const void* value, size_t size);
  ::std::string* mutable_data_hash();
  ::std::string* release_data_hash();
  void set_allocated_data_hash(::std::string* data_hash);

  // optional bytes validators_hash = 8;
  void clear_validators_hash();
  static const int kValidatorsHashFieldNumber = 8;
  const ::std::string& validators_hash() const;
  void set_validators_hash(const ::std::string& value);
  void set_validators_hash(const char* value);
  void set_validators_hash(const void* value, size_t size);
  ::std::string* mutable_validators_hash();
  ::std::string* release_validators_hash();
  void set_allocated_validators_hash(::std::string* validators_hash);

  // optional bytes app_hash = 9;
  void clear_app_hash();
  static const int kAppHashFieldNumber = 9;
  const ::std::string& app_hash() const;
  void set_app_hash(const ::std::string& value);
  void set_app_hash(const char* value);
  void set_app_hash(const void* value, size_t size);
  ::std::string* mutable_app_hash();
  ::std::string* release_app_hash();
  void set_allocated_app_hash(::std::string* app_hash);

  // @@protoc_insertion_point(class_scope:abci.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr chain_id_;
  ::google::protobuf::int64 height_;
  ::google::protobuf::int64 time_;
  ::abci::BlockID* last_block_id_;
  ::google::protobuf::internal::ArenaStringPtr last_commit_hash_;
  ::google::protobuf::internal::ArenaStringPtr data_hash_;
  ::google::protobuf::internal::ArenaStringPtr validators_hash_;
  ::google::protobuf::internal::ArenaStringPtr app_hash_;
  ::google::protobuf::int32 num_txs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class BlockID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.BlockID) */ {
 public:
  BlockID();
  virtual ~BlockID();

  BlockID(const BlockID& from);

  inline BlockID& operator=(const BlockID& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockID& default_instance();

  void Swap(BlockID* other);

  // implements Message ----------------------------------------------

  inline BlockID* New() const { return New(NULL); }

  BlockID* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockID& from);
  void MergeFrom(const BlockID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional .abci.PartSetHeader parts = 2;
  bool has_parts() const;
  void clear_parts();
  static const int kPartsFieldNumber = 2;
  const ::abci::PartSetHeader& parts() const;
  ::abci::PartSetHeader* mutable_parts();
  ::abci::PartSetHeader* release_parts();
  void set_allocated_parts(::abci::PartSetHeader* parts);

  // @@protoc_insertion_point(class_scope:abci.BlockID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::abci::PartSetHeader* parts_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static BlockID* default_instance_;
};
// -------------------------------------------------------------------

class PartSetHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.PartSetHeader) */ {
 public:
  PartSetHeader();
  virtual ~PartSetHeader();

  PartSetHeader(const PartSetHeader& from);

  inline PartSetHeader& operator=(const PartSetHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartSetHeader& default_instance();

  void Swap(PartSetHeader* other);

  // implements Message ----------------------------------------------

  inline PartSetHeader* New() const { return New(NULL); }

  PartSetHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartSetHeader& from);
  void MergeFrom(const PartSetHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartSetHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total = 1;
  void clear_total();
  static const int kTotalFieldNumber = 1;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // optional bytes hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:abci.PartSetHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::int32 total_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static PartSetHeader* default_instance_;
};
// -------------------------------------------------------------------

class Validator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.Validator) */ {
 public:
  Validator();
  virtual ~Validator();

  Validator(const Validator& from);

  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Validator& default_instance();

  void Swap(Validator* other);

  // implements Message ----------------------------------------------

  inline Validator* New() const { return New(NULL); }

  Validator* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Validator& from);
  void MergeFrom(const Validator& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Validator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pub_key = 1;
  void clear_pub_key();
  static const int kPubKeyFieldNumber = 1;
  const ::std::string& pub_key() const;
  void set_pub_key(const ::std::string& value);
  void set_pub_key(const char* value);
  void set_pub_key(const void* value, size_t size);
  ::std::string* mutable_pub_key();
  ::std::string* release_pub_key();
  void set_allocated_pub_key(::std::string* pub_key);

  // optional int64 power = 2;
  void clear_power();
  static const int kPowerFieldNumber = 2;
  ::google::protobuf::int64 power() const;
  void set_power(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:abci.Validator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr pub_key_;
  ::google::protobuf::int64 power_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static Validator* default_instance_;
};
// -------------------------------------------------------------------

class Evidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:abci.Evidence) */ {
 public:
  Evidence();
  virtual ~Evidence();

  Evidence(const Evidence& from);

  inline Evidence& operator=(const Evidence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Evidence& default_instance();

  void Swap(Evidence* other);

  // implements Message ----------------------------------------------

  inline Evidence* New() const { return New(NULL); }

  Evidence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Evidence& from);
  void MergeFrom(const Evidence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Evidence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pub_key = 1;
  void clear_pub_key();
  static const int kPubKeyFieldNumber = 1;
  const ::std::string& pub_key() const;
  void set_pub_key(const ::std::string& value);
  void set_pub_key(const char* value);
  void set_pub_key(const void* value, size_t size);
  ::std::string* mutable_pub_key();
  ::std::string* release_pub_key();
  void set_allocated_pub_key(::std::string* pub_key);

  // optional int64 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int64 height() const;
  void set_height(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:abci.Evidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr pub_key_;
  ::google::protobuf::int64 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_abci_2eproto();
  friend void protobuf_AssignDesc_abci_2eproto();
  friend void protobuf_ShutdownFile_abci_2eproto();

  void InitAsDefaultInstance();
  static Evidence* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KVPair

// optional bytes key = 1;
inline void KVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KVPair::key() const {
  // @@protoc_insertion_point(field_get:abci.KVPair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.KVPair.key)
}
inline void KVPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.KVPair.key)
}
inline void KVPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.KVPair.key)
}
inline ::std::string* KVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.KVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVPair::release_key() {
  // @@protoc_insertion_point(field_release:abci.KVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.KVPair.key)
}

// optional bytes value = 2;
inline void KVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KVPair::value() const {
  // @@protoc_insertion_point(field_get:abci.KVPair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.KVPair.value)
}
inline void KVPair::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.KVPair.value)
}
inline void KVPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.KVPair.value)
}
inline ::std::string* KVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:abci.KVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVPair::release_value() {
  // @@protoc_insertion_point(field_release:abci.KVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:abci.KVPair.value)
}

// -------------------------------------------------------------------

// KI64Pair

// optional bytes key = 1;
inline void KI64Pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KI64Pair::key() const {
  // @@protoc_insertion_point(field_get:abci.KI64Pair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KI64Pair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.KI64Pair.key)
}
inline void KI64Pair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.KI64Pair.key)
}
inline void KI64Pair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.KI64Pair.key)
}
inline ::std::string* KI64Pair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.KI64Pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KI64Pair::release_key() {
  // @@protoc_insertion_point(field_release:abci.KI64Pair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KI64Pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.KI64Pair.key)
}

// optional int64 value = 2;
inline void KI64Pair::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KI64Pair::value() const {
  // @@protoc_insertion_point(field_get:abci.KI64Pair.value)
  return value_;
}
inline void KI64Pair::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:abci.KI64Pair.value)
}

// -------------------------------------------------------------------

// Request

// optional .abci.RequestEcho echo = 2;
inline bool Request::has_echo() const {
  return value_case() == kEcho;
}
inline void Request::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
inline void Request::clear_echo() {
  if (has_echo()) {
    delete value_.echo_;
    clear_has_value();
  }
}
inline  const ::abci::RequestEcho& Request::echo() const {
  // @@protoc_insertion_point(field_get:abci.Request.echo)
  return has_echo()
      ? *value_.echo_
      : ::abci::RequestEcho::default_instance();
}
inline ::abci::RequestEcho* Request::mutable_echo() {
  if (!has_echo()) {
    clear_value();
    set_has_echo();
    value_.echo_ = new ::abci::RequestEcho;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.echo)
  return value_.echo_;
}
inline ::abci::RequestEcho* Request::release_echo() {
  // @@protoc_insertion_point(field_release:abci.Request.echo)
  if (has_echo()) {
    clear_has_value();
    ::abci::RequestEcho* temp = value_.echo_;
    value_.echo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_echo(::abci::RequestEcho* echo) {
  clear_value();
  if (echo) {
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.echo)
}

// optional .abci.RequestFlush flush = 3;
inline bool Request::has_flush() const {
  return value_case() == kFlush;
}
inline void Request::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
inline void Request::clear_flush() {
  if (has_flush()) {
    delete value_.flush_;
    clear_has_value();
  }
}
inline  const ::abci::RequestFlush& Request::flush() const {
  // @@protoc_insertion_point(field_get:abci.Request.flush)
  return has_flush()
      ? *value_.flush_
      : ::abci::RequestFlush::default_instance();
}
inline ::abci::RequestFlush* Request::mutable_flush() {
  if (!has_flush()) {
    clear_value();
    set_has_flush();
    value_.flush_ = new ::abci::RequestFlush;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.flush)
  return value_.flush_;
}
inline ::abci::RequestFlush* Request::release_flush() {
  // @@protoc_insertion_point(field_release:abci.Request.flush)
  if (has_flush()) {
    clear_has_value();
    ::abci::RequestFlush* temp = value_.flush_;
    value_.flush_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_flush(::abci::RequestFlush* flush) {
  clear_value();
  if (flush) {
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.flush)
}

// optional .abci.RequestInfo info = 4;
inline bool Request::has_info() const {
  return value_case() == kInfo;
}
inline void Request::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void Request::clear_info() {
  if (has_info()) {
    delete value_.info_;
    clear_has_value();
  }
}
inline  const ::abci::RequestInfo& Request::info() const {
  // @@protoc_insertion_point(field_get:abci.Request.info)
  return has_info()
      ? *value_.info_
      : ::abci::RequestInfo::default_instance();
}
inline ::abci::RequestInfo* Request::mutable_info() {
  if (!has_info()) {
    clear_value();
    set_has_info();
    value_.info_ = new ::abci::RequestInfo;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.info)
  return value_.info_;
}
inline ::abci::RequestInfo* Request::release_info() {
  // @@protoc_insertion_point(field_release:abci.Request.info)
  if (has_info()) {
    clear_has_value();
    ::abci::RequestInfo* temp = value_.info_;
    value_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_info(::abci::RequestInfo* info) {
  clear_value();
  if (info) {
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.info)
}

// optional .abci.RequestSetOption set_option = 5;
inline bool Request::has_set_option() const {
  return value_case() == kSetOption;
}
inline void Request::set_has_set_option() {
  _oneof_case_[0] = kSetOption;
}
inline void Request::clear_set_option() {
  if (has_set_option()) {
    delete value_.set_option_;
    clear_has_value();
  }
}
inline  const ::abci::RequestSetOption& Request::set_option() const {
  // @@protoc_insertion_point(field_get:abci.Request.set_option)
  return has_set_option()
      ? *value_.set_option_
      : ::abci::RequestSetOption::default_instance();
}
inline ::abci::RequestSetOption* Request::mutable_set_option() {
  if (!has_set_option()) {
    clear_value();
    set_has_set_option();
    value_.set_option_ = new ::abci::RequestSetOption;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.set_option)
  return value_.set_option_;
}
inline ::abci::RequestSetOption* Request::release_set_option() {
  // @@protoc_insertion_point(field_release:abci.Request.set_option)
  if (has_set_option()) {
    clear_has_value();
    ::abci::RequestSetOption* temp = value_.set_option_;
    value_.set_option_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_set_option(::abci::RequestSetOption* set_option) {
  clear_value();
  if (set_option) {
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.set_option)
}

// optional .abci.RequestInitChain init_chain = 6;
inline bool Request::has_init_chain() const {
  return value_case() == kInitChain;
}
inline void Request::set_has_init_chain() {
  _oneof_case_[0] = kInitChain;
}
inline void Request::clear_init_chain() {
  if (has_init_chain()) {
    delete value_.init_chain_;
    clear_has_value();
  }
}
inline  const ::abci::RequestInitChain& Request::init_chain() const {
  // @@protoc_insertion_point(field_get:abci.Request.init_chain)
  return has_init_chain()
      ? *value_.init_chain_
      : ::abci::RequestInitChain::default_instance();
}
inline ::abci::RequestInitChain* Request::mutable_init_chain() {
  if (!has_init_chain()) {
    clear_value();
    set_has_init_chain();
    value_.init_chain_ = new ::abci::RequestInitChain;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.init_chain)
  return value_.init_chain_;
}
inline ::abci::RequestInitChain* Request::release_init_chain() {
  // @@protoc_insertion_point(field_release:abci.Request.init_chain)
  if (has_init_chain()) {
    clear_has_value();
    ::abci::RequestInitChain* temp = value_.init_chain_;
    value_.init_chain_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_init_chain(::abci::RequestInitChain* init_chain) {
  clear_value();
  if (init_chain) {
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.init_chain)
}

// optional .abci.RequestQuery query = 7;
inline bool Request::has_query() const {
  return value_case() == kQuery;
}
inline void Request::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline void Request::clear_query() {
  if (has_query()) {
    delete value_.query_;
    clear_has_value();
  }
}
inline  const ::abci::RequestQuery& Request::query() const {
  // @@protoc_insertion_point(field_get:abci.Request.query)
  return has_query()
      ? *value_.query_
      : ::abci::RequestQuery::default_instance();
}
inline ::abci::RequestQuery* Request::mutable_query() {
  if (!has_query()) {
    clear_value();
    set_has_query();
    value_.query_ = new ::abci::RequestQuery;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.query)
  return value_.query_;
}
inline ::abci::RequestQuery* Request::release_query() {
  // @@protoc_insertion_point(field_release:abci.Request.query)
  if (has_query()) {
    clear_has_value();
    ::abci::RequestQuery* temp = value_.query_;
    value_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_query(::abci::RequestQuery* query) {
  clear_value();
  if (query) {
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.query)
}

// optional .abci.RequestBeginBlock begin_block = 8;
inline bool Request::has_begin_block() const {
  return value_case() == kBeginBlock;
}
inline void Request::set_has_begin_block() {
  _oneof_case_[0] = kBeginBlock;
}
inline void Request::clear_begin_block() {
  if (has_begin_block()) {
    delete value_.begin_block_;
    clear_has_value();
  }
}
inline  const ::abci::RequestBeginBlock& Request::begin_block() const {
  // @@protoc_insertion_point(field_get:abci.Request.begin_block)
  return has_begin_block()
      ? *value_.begin_block_
      : ::abci::RequestBeginBlock::default_instance();
}
inline ::abci::RequestBeginBlock* Request::mutable_begin_block() {
  if (!has_begin_block()) {
    clear_value();
    set_has_begin_block();
    value_.begin_block_ = new ::abci::RequestBeginBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.begin_block)
  return value_.begin_block_;
}
inline ::abci::RequestBeginBlock* Request::release_begin_block() {
  // @@protoc_insertion_point(field_release:abci.Request.begin_block)
  if (has_begin_block()) {
    clear_has_value();
    ::abci::RequestBeginBlock* temp = value_.begin_block_;
    value_.begin_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_begin_block(::abci::RequestBeginBlock* begin_block) {
  clear_value();
  if (begin_block) {
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.begin_block)
}

// optional .abci.RequestCheckTx check_tx = 9;
inline bool Request::has_check_tx() const {
  return value_case() == kCheckTx;
}
inline void Request::set_has_check_tx() {
  _oneof_case_[0] = kCheckTx;
}
inline void Request::clear_check_tx() {
  if (has_check_tx()) {
    delete value_.check_tx_;
    clear_has_value();
  }
}
inline  const ::abci::RequestCheckTx& Request::check_tx() const {
  // @@protoc_insertion_point(field_get:abci.Request.check_tx)
  return has_check_tx()
      ? *value_.check_tx_
      : ::abci::RequestCheckTx::default_instance();
}
inline ::abci::RequestCheckTx* Request::mutable_check_tx() {
  if (!has_check_tx()) {
    clear_value();
    set_has_check_tx();
    value_.check_tx_ = new ::abci::RequestCheckTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.check_tx)
  return value_.check_tx_;
}
inline ::abci::RequestCheckTx* Request::release_check_tx() {
  // @@protoc_insertion_point(field_release:abci.Request.check_tx)
  if (has_check_tx()) {
    clear_has_value();
    ::abci::RequestCheckTx* temp = value_.check_tx_;
    value_.check_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_check_tx(::abci::RequestCheckTx* check_tx) {
  clear_value();
  if (check_tx) {
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.check_tx)
}

// optional .abci.RequestDeliverTx deliver_tx = 19;
inline bool Request::has_deliver_tx() const {
  return value_case() == kDeliverTx;
}
inline void Request::set_has_deliver_tx() {
  _oneof_case_[0] = kDeliverTx;
}
inline void Request::clear_deliver_tx() {
  if (has_deliver_tx()) {
    delete value_.deliver_tx_;
    clear_has_value();
  }
}
inline  const ::abci::RequestDeliverTx& Request::deliver_tx() const {
  // @@protoc_insertion_point(field_get:abci.Request.deliver_tx)
  return has_deliver_tx()
      ? *value_.deliver_tx_
      : ::abci::RequestDeliverTx::default_instance();
}
inline ::abci::RequestDeliverTx* Request::mutable_deliver_tx() {
  if (!has_deliver_tx()) {
    clear_value();
    set_has_deliver_tx();
    value_.deliver_tx_ = new ::abci::RequestDeliverTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.deliver_tx)
  return value_.deliver_tx_;
}
inline ::abci::RequestDeliverTx* Request::release_deliver_tx() {
  // @@protoc_insertion_point(field_release:abci.Request.deliver_tx)
  if (has_deliver_tx()) {
    clear_has_value();
    ::abci::RequestDeliverTx* temp = value_.deliver_tx_;
    value_.deliver_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_deliver_tx(::abci::RequestDeliverTx* deliver_tx) {
  clear_value();
  if (deliver_tx) {
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.deliver_tx)
}

// optional .abci.RequestEndBlock end_block = 11;
inline bool Request::has_end_block() const {
  return value_case() == kEndBlock;
}
inline void Request::set_has_end_block() {
  _oneof_case_[0] = kEndBlock;
}
inline void Request::clear_end_block() {
  if (has_end_block()) {
    delete value_.end_block_;
    clear_has_value();
  }
}
inline  const ::abci::RequestEndBlock& Request::end_block() const {
  // @@protoc_insertion_point(field_get:abci.Request.end_block)
  return has_end_block()
      ? *value_.end_block_
      : ::abci::RequestEndBlock::default_instance();
}
inline ::abci::RequestEndBlock* Request::mutable_end_block() {
  if (!has_end_block()) {
    clear_value();
    set_has_end_block();
    value_.end_block_ = new ::abci::RequestEndBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.end_block)
  return value_.end_block_;
}
inline ::abci::RequestEndBlock* Request::release_end_block() {
  // @@protoc_insertion_point(field_release:abci.Request.end_block)
  if (has_end_block()) {
    clear_has_value();
    ::abci::RequestEndBlock* temp = value_.end_block_;
    value_.end_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_end_block(::abci::RequestEndBlock* end_block) {
  clear_value();
  if (end_block) {
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.end_block)
}

// optional .abci.RequestCommit commit = 12;
inline bool Request::has_commit() const {
  return value_case() == kCommit;
}
inline void Request::set_has_commit() {
  _oneof_case_[0] = kCommit;
}
inline void Request::clear_commit() {
  if (has_commit()) {
    delete value_.commit_;
    clear_has_value();
  }
}
inline  const ::abci::RequestCommit& Request::commit() const {
  // @@protoc_insertion_point(field_get:abci.Request.commit)
  return has_commit()
      ? *value_.commit_
      : ::abci::RequestCommit::default_instance();
}
inline ::abci::RequestCommit* Request::mutable_commit() {
  if (!has_commit()) {
    clear_value();
    set_has_commit();
    value_.commit_ = new ::abci::RequestCommit;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.commit)
  return value_.commit_;
}
inline ::abci::RequestCommit* Request::release_commit() {
  // @@protoc_insertion_point(field_release:abci.Request.commit)
  if (has_commit()) {
    clear_has_value();
    ::abci::RequestCommit* temp = value_.commit_;
    value_.commit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_commit(::abci::RequestCommit* commit) {
  clear_value();
  if (commit) {
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.commit)
}

inline bool Request::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Request::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Request::ValueCase Request::value_case() const {
  return Request::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequestEcho

// optional string message = 1;
inline void RequestEcho::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestEcho::message() const {
  // @@protoc_insertion_point(field_get:abci.RequestEcho.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestEcho::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestEcho.message)
}
inline void RequestEcho::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestEcho.message)
}
inline void RequestEcho::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestEcho.message)
}
inline ::std::string* RequestEcho::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestEcho.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestEcho::release_message() {
  // @@protoc_insertion_point(field_release:abci.RequestEcho.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestEcho::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestEcho.message)
}

// -------------------------------------------------------------------

// RequestFlush

// -------------------------------------------------------------------

// RequestInfo

// optional string version = 1;
inline void RequestInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestInfo::version() const {
  // @@protoc_insertion_point(field_get:abci.RequestInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestInfo.version)
}
inline void RequestInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestInfo.version)
}
inline void RequestInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestInfo.version)
}
inline ::std::string* RequestInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestInfo::release_version() {
  // @@protoc_insertion_point(field_release:abci.RequestInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestInfo.version)
}

// -------------------------------------------------------------------

// RequestSetOption

// optional string key = 1;
inline void RequestSetOption::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestSetOption::key() const {
  // @@protoc_insertion_point(field_get:abci.RequestSetOption.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestSetOption::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestSetOption.key)
}
inline void RequestSetOption::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestSetOption.key)
}
inline void RequestSetOption::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestSetOption.key)
}
inline ::std::string* RequestSetOption::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestSetOption.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestSetOption::release_key() {
  // @@protoc_insertion_point(field_release:abci.RequestSetOption.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestSetOption::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestSetOption.key)
}

// optional string value = 2;
inline void RequestSetOption::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestSetOption::value() const {
  // @@protoc_insertion_point(field_get:abci.RequestSetOption.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestSetOption::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestSetOption.value)
}
inline void RequestSetOption::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestSetOption.value)
}
inline void RequestSetOption::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestSetOption.value)
}
inline ::std::string* RequestSetOption::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestSetOption.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestSetOption::release_value() {
  // @@protoc_insertion_point(field_release:abci.RequestSetOption.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestSetOption::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestSetOption.value)
}

// -------------------------------------------------------------------

// RequestInitChain

// repeated .abci.Validator validators = 1;
inline int RequestInitChain::validators_size() const {
  return validators_.size();
}
inline void RequestInitChain::clear_validators() {
  validators_.Clear();
}
inline const ::abci::Validator& RequestInitChain::validators(int index) const {
  // @@protoc_insertion_point(field_get:abci.RequestInitChain.validators)
  return validators_.Get(index);
}
inline ::abci::Validator* RequestInitChain::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:abci.RequestInitChain.validators)
  return validators_.Mutable(index);
}
inline ::abci::Validator* RequestInitChain::add_validators() {
  // @@protoc_insertion_point(field_add:abci.RequestInitChain.validators)
  return validators_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::abci::Validator >*
RequestInitChain::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:abci.RequestInitChain.validators)
  return &validators_;
}
inline const ::google::protobuf::RepeatedPtrField< ::abci::Validator >&
RequestInitChain::validators() const {
  // @@protoc_insertion_point(field_list:abci.RequestInitChain.validators)
  return validators_;
}

// optional bytes app_state_bytes = 2;
inline void RequestInitChain::clear_app_state_bytes() {
  app_state_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestInitChain::app_state_bytes() const {
  // @@protoc_insertion_point(field_get:abci.RequestInitChain.app_state_bytes)
  return app_state_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInitChain::set_app_state_bytes(const ::std::string& value) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestInitChain.app_state_bytes)
}
inline void RequestInitChain::set_app_state_bytes(const char* value) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestInitChain.app_state_bytes)
}
inline void RequestInitChain::set_app_state_bytes(const void* value, size_t size) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestInitChain.app_state_bytes)
}
inline ::std::string* RequestInitChain::mutable_app_state_bytes() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestInitChain.app_state_bytes)
  return app_state_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestInitChain::release_app_state_bytes() {
  // @@protoc_insertion_point(field_release:abci.RequestInitChain.app_state_bytes)
  
  return app_state_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInitChain::set_allocated_app_state_bytes(::std::string* app_state_bytes) {
  if (app_state_bytes != NULL) {
    
  } else {
    
  }
  app_state_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_state_bytes);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestInitChain.app_state_bytes)
}

// -------------------------------------------------------------------

// RequestQuery

// optional bytes data = 1;
inline void RequestQuery::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestQuery::data() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestQuery::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestQuery.data)
}
inline void RequestQuery::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestQuery.data)
}
inline void RequestQuery::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestQuery.data)
}
inline ::std::string* RequestQuery::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestQuery.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestQuery::release_data() {
  // @@protoc_insertion_point(field_release:abci.RequestQuery.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestQuery::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestQuery.data)
}

// optional string path = 2;
inline void RequestQuery::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestQuery::path() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestQuery::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestQuery.path)
}
inline void RequestQuery::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestQuery.path)
}
inline void RequestQuery::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestQuery.path)
}
inline ::std::string* RequestQuery::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestQuery.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestQuery::release_path() {
  // @@protoc_insertion_point(field_release:abci.RequestQuery.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestQuery::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestQuery.path)
}

// optional int64 height = 3;
inline void RequestQuery::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RequestQuery::height() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.height)
  return height_;
}
inline void RequestQuery::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.RequestQuery.height)
}

// optional bool prove = 4;
inline void RequestQuery::clear_prove() {
  prove_ = false;
}
inline bool RequestQuery::prove() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.prove)
  return prove_;
}
inline void RequestQuery::set_prove(bool value) {
  
  prove_ = value;
  // @@protoc_insertion_point(field_set:abci.RequestQuery.prove)
}

// -------------------------------------------------------------------

// RequestBeginBlock

// optional bytes hash = 1;
inline void RequestBeginBlock::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestBeginBlock::hash() const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestBeginBlock::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestBeginBlock.hash)
}
inline void RequestBeginBlock::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestBeginBlock.hash)
}
inline void RequestBeginBlock::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestBeginBlock.hash)
}
inline ::std::string* RequestBeginBlock::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestBeginBlock.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestBeginBlock::release_hash() {
  // @@protoc_insertion_point(field_release:abci.RequestBeginBlock.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestBeginBlock::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestBeginBlock.hash)
}

// optional .abci.Header header = 2;
inline bool RequestBeginBlock::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void RequestBeginBlock::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::abci::Header& RequestBeginBlock::header() const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::abci::Header* RequestBeginBlock::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::abci::Header;
  }
  // @@protoc_insertion_point(field_mutable:abci.RequestBeginBlock.header)
  return header_;
}
inline ::abci::Header* RequestBeginBlock::release_header() {
  // @@protoc_insertion_point(field_release:abci.RequestBeginBlock.header)
  
  ::abci::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RequestBeginBlock::set_allocated_header(::abci::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.RequestBeginBlock.header)
}

// repeated int32 absent_validators = 3;
inline int RequestBeginBlock::absent_validators_size() const {
  return absent_validators_.size();
}
inline void RequestBeginBlock::clear_absent_validators() {
  absent_validators_.Clear();
}
inline ::google::protobuf::int32 RequestBeginBlock::absent_validators(int index) const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.absent_validators)
  return absent_validators_.Get(index);
}
inline void RequestBeginBlock::set_absent_validators(int index, ::google::protobuf::int32 value) {
  absent_validators_.Set(index, value);
  // @@protoc_insertion_point(field_set:abci.RequestBeginBlock.absent_validators)
}
inline void RequestBeginBlock::add_absent_validators(::google::protobuf::int32 value) {
  absent_validators_.Add(value);
  // @@protoc_insertion_point(field_add:abci.RequestBeginBlock.absent_validators)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RequestBeginBlock::absent_validators() const {
  // @@protoc_insertion_point(field_list:abci.RequestBeginBlock.absent_validators)
  return absent_validators_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RequestBeginBlock::mutable_absent_validators() {
  // @@protoc_insertion_point(field_mutable_list:abci.RequestBeginBlock.absent_validators)
  return &absent_validators_;
}

// repeated .abci.Evidence byzantine_validators = 4;
inline int RequestBeginBlock::byzantine_validators_size() const {
  return byzantine_validators_.size();
}
inline void RequestBeginBlock::clear_byzantine_validators() {
  byzantine_validators_.Clear();
}
inline const ::abci::Evidence& RequestBeginBlock::byzantine_validators(int index) const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Get(index);
}
inline ::abci::Evidence* RequestBeginBlock::mutable_byzantine_validators(int index) {
  // @@protoc_insertion_point(field_mutable:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Mutable(index);
}
inline ::abci::Evidence* RequestBeginBlock::add_byzantine_validators() {
  // @@protoc_insertion_point(field_add:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::abci::Evidence >*
RequestBeginBlock::mutable_byzantine_validators() {
  // @@protoc_insertion_point(field_mutable_list:abci.RequestBeginBlock.byzantine_validators)
  return &byzantine_validators_;
}
inline const ::google::protobuf::RepeatedPtrField< ::abci::Evidence >&
RequestBeginBlock::byzantine_validators() const {
  // @@protoc_insertion_point(field_list:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_;
}

// -------------------------------------------------------------------

// RequestCheckTx

// optional bytes tx = 1;
inline void RequestCheckTx::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestCheckTx::tx() const {
  // @@protoc_insertion_point(field_get:abci.RequestCheckTx.tx)
  return tx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestCheckTx::set_tx(const ::std::string& value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestCheckTx.tx)
}
inline void RequestCheckTx::set_tx(const char* value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestCheckTx.tx)
}
inline void RequestCheckTx::set_tx(const void* value, size_t size) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestCheckTx.tx)
}
inline ::std::string* RequestCheckTx::mutable_tx() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestCheckTx.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestCheckTx::release_tx() {
  // @@protoc_insertion_point(field_release:abci.RequestCheckTx.tx)
  
  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestCheckTx::set_allocated_tx(::std::string* tx) {
  if (tx != NULL) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestCheckTx.tx)
}

// -------------------------------------------------------------------

// RequestDeliverTx

// optional bytes tx = 1;
inline void RequestDeliverTx::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestDeliverTx::tx() const {
  // @@protoc_insertion_point(field_get:abci.RequestDeliverTx.tx)
  return tx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestDeliverTx::set_tx(const ::std::string& value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestDeliverTx.tx)
}
inline void RequestDeliverTx::set_tx(const char* value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestDeliverTx.tx)
}
inline void RequestDeliverTx::set_tx(const void* value, size_t size) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestDeliverTx.tx)
}
inline ::std::string* RequestDeliverTx::mutable_tx() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestDeliverTx.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestDeliverTx::release_tx() {
  // @@protoc_insertion_point(field_release:abci.RequestDeliverTx.tx)
  
  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestDeliverTx::set_allocated_tx(::std::string* tx) {
  if (tx != NULL) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestDeliverTx.tx)
}

// -------------------------------------------------------------------

// RequestEndBlock

// optional int64 height = 1;
inline void RequestEndBlock::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RequestEndBlock::height() const {
  // @@protoc_insertion_point(field_get:abci.RequestEndBlock.height)
  return height_;
}
inline void RequestEndBlock::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.RequestEndBlock.height)
}

// -------------------------------------------------------------------

// RequestCommit

// -------------------------------------------------------------------

// Response

// optional .abci.ResponseException exception = 1;
inline bool Response::has_exception() const {
  return value_case() == kException;
}
inline void Response::set_has_exception() {
  _oneof_case_[0] = kException;
}
inline void Response::clear_exception() {
  if (has_exception()) {
    delete value_.exception_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseException& Response::exception() const {
  // @@protoc_insertion_point(field_get:abci.Response.exception)
  return has_exception()
      ? *value_.exception_
      : ::abci::ResponseException::default_instance();
}
inline ::abci::ResponseException* Response::mutable_exception() {
  if (!has_exception()) {
    clear_value();
    set_has_exception();
    value_.exception_ = new ::abci::ResponseException;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.exception)
  return value_.exception_;
}
inline ::abci::ResponseException* Response::release_exception() {
  // @@protoc_insertion_point(field_release:abci.Response.exception)
  if (has_exception()) {
    clear_has_value();
    ::abci::ResponseException* temp = value_.exception_;
    value_.exception_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_exception(::abci::ResponseException* exception) {
  clear_value();
  if (exception) {
    set_has_exception();
    value_.exception_ = exception;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.exception)
}

// optional .abci.ResponseEcho echo = 2;
inline bool Response::has_echo() const {
  return value_case() == kEcho;
}
inline void Response::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
inline void Response::clear_echo() {
  if (has_echo()) {
    delete value_.echo_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseEcho& Response::echo() const {
  // @@protoc_insertion_point(field_get:abci.Response.echo)
  return has_echo()
      ? *value_.echo_
      : ::abci::ResponseEcho::default_instance();
}
inline ::abci::ResponseEcho* Response::mutable_echo() {
  if (!has_echo()) {
    clear_value();
    set_has_echo();
    value_.echo_ = new ::abci::ResponseEcho;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.echo)
  return value_.echo_;
}
inline ::abci::ResponseEcho* Response::release_echo() {
  // @@protoc_insertion_point(field_release:abci.Response.echo)
  if (has_echo()) {
    clear_has_value();
    ::abci::ResponseEcho* temp = value_.echo_;
    value_.echo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_echo(::abci::ResponseEcho* echo) {
  clear_value();
  if (echo) {
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.echo)
}

// optional .abci.ResponseFlush flush = 3;
inline bool Response::has_flush() const {
  return value_case() == kFlush;
}
inline void Response::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
inline void Response::clear_flush() {
  if (has_flush()) {
    delete value_.flush_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseFlush& Response::flush() const {
  // @@protoc_insertion_point(field_get:abci.Response.flush)
  return has_flush()
      ? *value_.flush_
      : ::abci::ResponseFlush::default_instance();
}
inline ::abci::ResponseFlush* Response::mutable_flush() {
  if (!has_flush()) {
    clear_value();
    set_has_flush();
    value_.flush_ = new ::abci::ResponseFlush;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.flush)
  return value_.flush_;
}
inline ::abci::ResponseFlush* Response::release_flush() {
  // @@protoc_insertion_point(field_release:abci.Response.flush)
  if (has_flush()) {
    clear_has_value();
    ::abci::ResponseFlush* temp = value_.flush_;
    value_.flush_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_flush(::abci::ResponseFlush* flush) {
  clear_value();
  if (flush) {
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.flush)
}

// optional .abci.ResponseInfo info = 4;
inline bool Response::has_info() const {
  return value_case() == kInfo;
}
inline void Response::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void Response::clear_info() {
  if (has_info()) {
    delete value_.info_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseInfo& Response::info() const {
  // @@protoc_insertion_point(field_get:abci.Response.info)
  return has_info()
      ? *value_.info_
      : ::abci::ResponseInfo::default_instance();
}
inline ::abci::ResponseInfo* Response::mutable_info() {
  if (!has_info()) {
    clear_value();
    set_has_info();
    value_.info_ = new ::abci::ResponseInfo;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.info)
  return value_.info_;
}
inline ::abci::ResponseInfo* Response::release_info() {
  // @@protoc_insertion_point(field_release:abci.Response.info)
  if (has_info()) {
    clear_has_value();
    ::abci::ResponseInfo* temp = value_.info_;
    value_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_info(::abci::ResponseInfo* info) {
  clear_value();
  if (info) {
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.info)
}

// optional .abci.ResponseSetOption set_option = 5;
inline bool Response::has_set_option() const {
  return value_case() == kSetOption;
}
inline void Response::set_has_set_option() {
  _oneof_case_[0] = kSetOption;
}
inline void Response::clear_set_option() {
  if (has_set_option()) {
    delete value_.set_option_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseSetOption& Response::set_option() const {
  // @@protoc_insertion_point(field_get:abci.Response.set_option)
  return has_set_option()
      ? *value_.set_option_
      : ::abci::ResponseSetOption::default_instance();
}
inline ::abci::ResponseSetOption* Response::mutable_set_option() {
  if (!has_set_option()) {
    clear_value();
    set_has_set_option();
    value_.set_option_ = new ::abci::ResponseSetOption;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.set_option)
  return value_.set_option_;
}
inline ::abci::ResponseSetOption* Response::release_set_option() {
  // @@protoc_insertion_point(field_release:abci.Response.set_option)
  if (has_set_option()) {
    clear_has_value();
    ::abci::ResponseSetOption* temp = value_.set_option_;
    value_.set_option_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_set_option(::abci::ResponseSetOption* set_option) {
  clear_value();
  if (set_option) {
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.set_option)
}

// optional .abci.ResponseInitChain init_chain = 6;
inline bool Response::has_init_chain() const {
  return value_case() == kInitChain;
}
inline void Response::set_has_init_chain() {
  _oneof_case_[0] = kInitChain;
}
inline void Response::clear_init_chain() {
  if (has_init_chain()) {
    delete value_.init_chain_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseInitChain& Response::init_chain() const {
  // @@protoc_insertion_point(field_get:abci.Response.init_chain)
  return has_init_chain()
      ? *value_.init_chain_
      : ::abci::ResponseInitChain::default_instance();
}
inline ::abci::ResponseInitChain* Response::mutable_init_chain() {
  if (!has_init_chain()) {
    clear_value();
    set_has_init_chain();
    value_.init_chain_ = new ::abci::ResponseInitChain;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.init_chain)
  return value_.init_chain_;
}
inline ::abci::ResponseInitChain* Response::release_init_chain() {
  // @@protoc_insertion_point(field_release:abci.Response.init_chain)
  if (has_init_chain()) {
    clear_has_value();
    ::abci::ResponseInitChain* temp = value_.init_chain_;
    value_.init_chain_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_init_chain(::abci::ResponseInitChain* init_chain) {
  clear_value();
  if (init_chain) {
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.init_chain)
}

// optional .abci.ResponseQuery query = 7;
inline bool Response::has_query() const {
  return value_case() == kQuery;
}
inline void Response::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline void Response::clear_query() {
  if (has_query()) {
    delete value_.query_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseQuery& Response::query() const {
  // @@protoc_insertion_point(field_get:abci.Response.query)
  return has_query()
      ? *value_.query_
      : ::abci::ResponseQuery::default_instance();
}
inline ::abci::ResponseQuery* Response::mutable_query() {
  if (!has_query()) {
    clear_value();
    set_has_query();
    value_.query_ = new ::abci::ResponseQuery;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.query)
  return value_.query_;
}
inline ::abci::ResponseQuery* Response::release_query() {
  // @@protoc_insertion_point(field_release:abci.Response.query)
  if (has_query()) {
    clear_has_value();
    ::abci::ResponseQuery* temp = value_.query_;
    value_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_query(::abci::ResponseQuery* query) {
  clear_value();
  if (query) {
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.query)
}

// optional .abci.ResponseBeginBlock begin_block = 8;
inline bool Response::has_begin_block() const {
  return value_case() == kBeginBlock;
}
inline void Response::set_has_begin_block() {
  _oneof_case_[0] = kBeginBlock;
}
inline void Response::clear_begin_block() {
  if (has_begin_block()) {
    delete value_.begin_block_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseBeginBlock& Response::begin_block() const {
  // @@protoc_insertion_point(field_get:abci.Response.begin_block)
  return has_begin_block()
      ? *value_.begin_block_
      : ::abci::ResponseBeginBlock::default_instance();
}
inline ::abci::ResponseBeginBlock* Response::mutable_begin_block() {
  if (!has_begin_block()) {
    clear_value();
    set_has_begin_block();
    value_.begin_block_ = new ::abci::ResponseBeginBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.begin_block)
  return value_.begin_block_;
}
inline ::abci::ResponseBeginBlock* Response::release_begin_block() {
  // @@protoc_insertion_point(field_release:abci.Response.begin_block)
  if (has_begin_block()) {
    clear_has_value();
    ::abci::ResponseBeginBlock* temp = value_.begin_block_;
    value_.begin_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_begin_block(::abci::ResponseBeginBlock* begin_block) {
  clear_value();
  if (begin_block) {
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.begin_block)
}

// optional .abci.ResponseCheckTx check_tx = 9;
inline bool Response::has_check_tx() const {
  return value_case() == kCheckTx;
}
inline void Response::set_has_check_tx() {
  _oneof_case_[0] = kCheckTx;
}
inline void Response::clear_check_tx() {
  if (has_check_tx()) {
    delete value_.check_tx_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseCheckTx& Response::check_tx() const {
  // @@protoc_insertion_point(field_get:abci.Response.check_tx)
  return has_check_tx()
      ? *value_.check_tx_
      : ::abci::ResponseCheckTx::default_instance();
}
inline ::abci::ResponseCheckTx* Response::mutable_check_tx() {
  if (!has_check_tx()) {
    clear_value();
    set_has_check_tx();
    value_.check_tx_ = new ::abci::ResponseCheckTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.check_tx)
  return value_.check_tx_;
}
inline ::abci::ResponseCheckTx* Response::release_check_tx() {
  // @@protoc_insertion_point(field_release:abci.Response.check_tx)
  if (has_check_tx()) {
    clear_has_value();
    ::abci::ResponseCheckTx* temp = value_.check_tx_;
    value_.check_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_check_tx(::abci::ResponseCheckTx* check_tx) {
  clear_value();
  if (check_tx) {
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.check_tx)
}

// optional .abci.ResponseDeliverTx deliver_tx = 10;
inline bool Response::has_deliver_tx() const {
  return value_case() == kDeliverTx;
}
inline void Response::set_has_deliver_tx() {
  _oneof_case_[0] = kDeliverTx;
}
inline void Response::clear_deliver_tx() {
  if (has_deliver_tx()) {
    delete value_.deliver_tx_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseDeliverTx& Response::deliver_tx() const {
  // @@protoc_insertion_point(field_get:abci.Response.deliver_tx)
  return has_deliver_tx()
      ? *value_.deliver_tx_
      : ::abci::ResponseDeliverTx::default_instance();
}
inline ::abci::ResponseDeliverTx* Response::mutable_deliver_tx() {
  if (!has_deliver_tx()) {
    clear_value();
    set_has_deliver_tx();
    value_.deliver_tx_ = new ::abci::ResponseDeliverTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.deliver_tx)
  return value_.deliver_tx_;
}
inline ::abci::ResponseDeliverTx* Response::release_deliver_tx() {
  // @@protoc_insertion_point(field_release:abci.Response.deliver_tx)
  if (has_deliver_tx()) {
    clear_has_value();
    ::abci::ResponseDeliverTx* temp = value_.deliver_tx_;
    value_.deliver_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_deliver_tx(::abci::ResponseDeliverTx* deliver_tx) {
  clear_value();
  if (deliver_tx) {
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.deliver_tx)
}

// optional .abci.ResponseEndBlock end_block = 11;
inline bool Response::has_end_block() const {
  return value_case() == kEndBlock;
}
inline void Response::set_has_end_block() {
  _oneof_case_[0] = kEndBlock;
}
inline void Response::clear_end_block() {
  if (has_end_block()) {
    delete value_.end_block_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseEndBlock& Response::end_block() const {
  // @@protoc_insertion_point(field_get:abci.Response.end_block)
  return has_end_block()
      ? *value_.end_block_
      : ::abci::ResponseEndBlock::default_instance();
}
inline ::abci::ResponseEndBlock* Response::mutable_end_block() {
  if (!has_end_block()) {
    clear_value();
    set_has_end_block();
    value_.end_block_ = new ::abci::ResponseEndBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.end_block)
  return value_.end_block_;
}
inline ::abci::ResponseEndBlock* Response::release_end_block() {
  // @@protoc_insertion_point(field_release:abci.Response.end_block)
  if (has_end_block()) {
    clear_has_value();
    ::abci::ResponseEndBlock* temp = value_.end_block_;
    value_.end_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_end_block(::abci::ResponseEndBlock* end_block) {
  clear_value();
  if (end_block) {
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.end_block)
}

// optional .abci.ResponseCommit commit = 12;
inline bool Response::has_commit() const {
  return value_case() == kCommit;
}
inline void Response::set_has_commit() {
  _oneof_case_[0] = kCommit;
}
inline void Response::clear_commit() {
  if (has_commit()) {
    delete value_.commit_;
    clear_has_value();
  }
}
inline  const ::abci::ResponseCommit& Response::commit() const {
  // @@protoc_insertion_point(field_get:abci.Response.commit)
  return has_commit()
      ? *value_.commit_
      : ::abci::ResponseCommit::default_instance();
}
inline ::abci::ResponseCommit* Response::mutable_commit() {
  if (!has_commit()) {
    clear_value();
    set_has_commit();
    value_.commit_ = new ::abci::ResponseCommit;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.commit)
  return value_.commit_;
}
inline ::abci::ResponseCommit* Response::release_commit() {
  // @@protoc_insertion_point(field_release:abci.Response.commit)
  if (has_commit()) {
    clear_has_value();
    ::abci::ResponseCommit* temp = value_.commit_;
    value_.commit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_commit(::abci::ResponseCommit* commit) {
  clear_value();
  if (commit) {
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.commit)
}

inline bool Response::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Response::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Response::ValueCase Response::value_case() const {
  return Response::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseException

// optional string error = 1;
inline void ResponseException::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseException::error() const {
  // @@protoc_insertion_point(field_get:abci.ResponseException.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseException::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseException.error)
}
inline void ResponseException::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseException.error)
}
inline void ResponseException::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseException.error)
}
inline ::std::string* ResponseException::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseException.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseException::release_error() {
  // @@protoc_insertion_point(field_release:abci.ResponseException.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseException::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseException.error)
}

// -------------------------------------------------------------------

// ResponseEcho

// optional string message = 1;
inline void ResponseEcho::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseEcho::message() const {
  // @@protoc_insertion_point(field_get:abci.ResponseEcho.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseEcho::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseEcho.message)
}
inline void ResponseEcho::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseEcho.message)
}
inline void ResponseEcho::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseEcho.message)
}
inline ::std::string* ResponseEcho::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseEcho.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseEcho::release_message() {
  // @@protoc_insertion_point(field_release:abci.ResponseEcho.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseEcho::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseEcho.message)
}

// -------------------------------------------------------------------

// ResponseFlush

// -------------------------------------------------------------------

// ResponseInfo

// optional string data = 1;
inline void ResponseInfo::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseInfo::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseInfo::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.data)
}
inline void ResponseInfo::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseInfo.data)
}
inline void ResponseInfo::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseInfo.data)
}
inline ::std::string* ResponseInfo::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseInfo.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseInfo::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseInfo.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseInfo::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseInfo.data)
}

// optional string version = 2;
inline void ResponseInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseInfo::version() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.version)
}
inline void ResponseInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseInfo.version)
}
inline void ResponseInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseInfo.version)
}
inline ::std::string* ResponseInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseInfo::release_version() {
  // @@protoc_insertion_point(field_release:abci.ResponseInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseInfo.version)
}

// optional int64 last_block_height = 3;
inline void ResponseInfo::clear_last_block_height() {
  last_block_height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseInfo::last_block_height() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.last_block_height)
  return last_block_height_;
}
inline void ResponseInfo::set_last_block_height(::google::protobuf::int64 value) {
  
  last_block_height_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.last_block_height)
}

// optional bytes last_block_app_hash = 4;
inline void ResponseInfo::clear_last_block_app_hash() {
  last_block_app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseInfo::last_block_app_hash() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.last_block_app_hash)
  return last_block_app_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseInfo::set_last_block_app_hash(const ::std::string& value) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.last_block_app_hash)
}
inline void ResponseInfo::set_last_block_app_hash(const char* value) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseInfo.last_block_app_hash)
}
inline void ResponseInfo::set_last_block_app_hash(const void* value, size_t size) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseInfo.last_block_app_hash)
}
inline ::std::string* ResponseInfo::mutable_last_block_app_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseInfo.last_block_app_hash)
  return last_block_app_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseInfo::release_last_block_app_hash() {
  // @@protoc_insertion_point(field_release:abci.ResponseInfo.last_block_app_hash)
  
  return last_block_app_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseInfo::set_allocated_last_block_app_hash(::std::string* last_block_app_hash) {
  if (last_block_app_hash != NULL) {
    
  } else {
    
  }
  last_block_app_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_block_app_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseInfo.last_block_app_hash)
}

// -------------------------------------------------------------------

// ResponseSetOption

// optional uint32 code = 1;
inline void ResponseSetOption::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 ResponseSetOption::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseSetOption.code)
  return code_;
}
inline void ResponseSetOption::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseSetOption.code)
}

// optional string log = 3;
inline void ResponseSetOption::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseSetOption::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseSetOption.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSetOption::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseSetOption.log)
}
inline void ResponseSetOption::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseSetOption.log)
}
inline void ResponseSetOption::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseSetOption.log)
}
inline ::std::string* ResponseSetOption::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseSetOption.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseSetOption::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseSetOption.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSetOption::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseSetOption.log)
}

// optional string info = 4;
inline void ResponseSetOption::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseSetOption::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseSetOption.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSetOption::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseSetOption.info)
}
inline void ResponseSetOption::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseSetOption.info)
}
inline void ResponseSetOption::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseSetOption.info)
}
inline ::std::string* ResponseSetOption::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseSetOption.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseSetOption::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseSetOption.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseSetOption::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseSetOption.info)
}

// -------------------------------------------------------------------

// ResponseInitChain

// -------------------------------------------------------------------

// ResponseQuery

// optional uint32 code = 1;
inline void ResponseQuery::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 ResponseQuery::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.code)
  return code_;
}
inline void ResponseQuery::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.code)
}

// optional string log = 3;
inline void ResponseQuery::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseQuery::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.log)
}
inline void ResponseQuery::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.log)
}
inline void ResponseQuery::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.log)
}
inline ::std::string* ResponseQuery::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseQuery::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.log)
}

// optional string info = 4;
inline void ResponseQuery::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseQuery::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.info)
}
inline void ResponseQuery::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.info)
}
inline void ResponseQuery::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.info)
}
inline ::std::string* ResponseQuery::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseQuery::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.info)
}

// optional int64 index = 5;
inline void ResponseQuery::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseQuery::index() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.index)
  return index_;
}
inline void ResponseQuery::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.index)
}

// optional bytes key = 6;
inline void ResponseQuery::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseQuery::key() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.key)
}
inline void ResponseQuery::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.key)
}
inline void ResponseQuery::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.key)
}
inline ::std::string* ResponseQuery::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseQuery::release_key() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.key)
}

// optional bytes value = 7;
inline void ResponseQuery::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseQuery::value() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.value)
}
inline void ResponseQuery::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.value)
}
inline void ResponseQuery::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.value)
}
inline ::std::string* ResponseQuery::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseQuery::release_value() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.value)
}

// optional bytes proof = 8;
inline void ResponseQuery::clear_proof() {
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseQuery::proof() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.proof)
  return proof_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_proof(const ::std::string& value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.proof)
}
inline void ResponseQuery::set_proof(const char* value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.proof)
}
inline void ResponseQuery::set_proof(const void* value, size_t size) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.proof)
}
inline ::std::string* ResponseQuery::mutable_proof() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.proof)
  return proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseQuery::release_proof() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.proof)
  
  return proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseQuery::set_allocated_proof(::std::string* proof) {
  if (proof != NULL) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.proof)
}

// optional int64 height = 9;
inline void ResponseQuery::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseQuery::height() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.height)
  return height_;
}
inline void ResponseQuery::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.height)
}

// -------------------------------------------------------------------

// ResponseBeginBlock

// -------------------------------------------------------------------

// ResponseCheckTx

// optional uint32 code = 1;
inline void ResponseCheckTx::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 ResponseCheckTx::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.code)
  return code_;
}
inline void ResponseCheckTx::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.code)
}

// optional bytes data = 2;
inline void ResponseCheckTx::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseCheckTx::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCheckTx::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.data)
}
inline void ResponseCheckTx::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCheckTx.data)
}
inline void ResponseCheckTx::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCheckTx.data)
}
inline ::std::string* ResponseCheckTx::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseCheckTx::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCheckTx::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.data)
}

// optional string log = 3;
inline void ResponseCheckTx::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseCheckTx::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCheckTx::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.log)
}
inline void ResponseCheckTx::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCheckTx.log)
}
inline void ResponseCheckTx::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCheckTx.log)
}
inline ::std::string* ResponseCheckTx::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseCheckTx::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCheckTx::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.log)
}

// optional string info = 4;
inline void ResponseCheckTx::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseCheckTx::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCheckTx::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.info)
}
inline void ResponseCheckTx::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCheckTx.info)
}
inline void ResponseCheckTx::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCheckTx.info)
}
inline ::std::string* ResponseCheckTx::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseCheckTx::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCheckTx::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.info)
}

// optional int64 gas_wanted = 5;
inline void ResponseCheckTx::clear_gas_wanted() {
  gas_wanted_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseCheckTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.gas_wanted)
  return gas_wanted_;
}
inline void ResponseCheckTx::set_gas_wanted(::google::protobuf::int64 value) {
  
  gas_wanted_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.gas_wanted)
}

// optional int64 gas_used = 6;
inline void ResponseCheckTx::clear_gas_used() {
  gas_used_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseCheckTx::gas_used() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.gas_used)
  return gas_used_;
}
inline void ResponseCheckTx::set_gas_used(::google::protobuf::int64 value) {
  
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.gas_used)
}

// repeated .abci.KVPair tags = 7;
inline int ResponseCheckTx::tags_size() const {
  return tags_.size();
}
inline void ResponseCheckTx::clear_tags() {
  tags_.Clear();
}
inline const ::abci::KVPair& ResponseCheckTx::tags(int index) const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.tags)
  return tags_.Get(index);
}
inline ::abci::KVPair* ResponseCheckTx::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.tags)
  return tags_.Mutable(index);
}
inline ::abci::KVPair* ResponseCheckTx::add_tags() {
  // @@protoc_insertion_point(field_add:abci.ResponseCheckTx.tags)
  return tags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::abci::KVPair >*
ResponseCheckTx::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:abci.ResponseCheckTx.tags)
  return &tags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::abci::KVPair >&
ResponseCheckTx::tags() const {
  // @@protoc_insertion_point(field_list:abci.ResponseCheckTx.tags)
  return tags_;
}

// optional .abci.KI64Pair fee = 8;
inline bool ResponseCheckTx::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
inline void ResponseCheckTx::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
inline const ::abci::KI64Pair& ResponseCheckTx::fee() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
inline ::abci::KI64Pair* ResponseCheckTx::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::abci::KI64Pair;
  }
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.fee)
  return fee_;
}
inline ::abci::KI64Pair* ResponseCheckTx::release_fee() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.fee)
  
  ::abci::KI64Pair* temp = fee_;
  fee_ = NULL;
  return temp;
}
inline void ResponseCheckTx::set_allocated_fee(::abci::KI64Pair* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.fee)
}

// -------------------------------------------------------------------

// ResponseDeliverTx

// optional uint32 code = 1;
inline void ResponseDeliverTx::clear_code() {
  code_ = 0u;
}
inline ::google::protobuf::uint32 ResponseDeliverTx::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.code)
  return code_;
}
inline void ResponseDeliverTx::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.code)
}

// optional bytes data = 2;
inline void ResponseDeliverTx::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseDeliverTx::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseDeliverTx::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.data)
}
inline void ResponseDeliverTx::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseDeliverTx.data)
}
inline void ResponseDeliverTx::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseDeliverTx.data)
}
inline ::std::string* ResponseDeliverTx::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseDeliverTx::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseDeliverTx::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.data)
}

// optional string log = 3;
inline void ResponseDeliverTx::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseDeliverTx::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseDeliverTx::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.log)
}
inline void ResponseDeliverTx::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseDeliverTx.log)
}
inline void ResponseDeliverTx::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseDeliverTx.log)
}
inline ::std::string* ResponseDeliverTx::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseDeliverTx::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseDeliverTx::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.log)
}

// optional string info = 4;
inline void ResponseDeliverTx::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseDeliverTx::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseDeliverTx::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.info)
}
inline void ResponseDeliverTx::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseDeliverTx.info)
}
inline void ResponseDeliverTx::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseDeliverTx.info)
}
inline ::std::string* ResponseDeliverTx::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseDeliverTx::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseDeliverTx::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.info)
}

// optional int64 gas_wanted = 5;
inline void ResponseDeliverTx::clear_gas_wanted() {
  gas_wanted_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseDeliverTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.gas_wanted)
  return gas_wanted_;
}
inline void ResponseDeliverTx::set_gas_wanted(::google::protobuf::int64 value) {
  
  gas_wanted_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.gas_wanted)
}

// optional int64 gas_used = 6;
inline void ResponseDeliverTx::clear_gas_used() {
  gas_used_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ResponseDeliverTx::gas_used() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.gas_used)
  return gas_used_;
}
inline void ResponseDeliverTx::set_gas_used(::google::protobuf::int64 value) {
  
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.gas_used)
}

// repeated .abci.KVPair tags = 7;
inline int ResponseDeliverTx::tags_size() const {
  return tags_.size();
}
inline void ResponseDeliverTx::clear_tags() {
  tags_.Clear();
}
inline const ::abci::KVPair& ResponseDeliverTx::tags(int index) const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.tags)
  return tags_.Get(index);
}
inline ::abci::KVPair* ResponseDeliverTx::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.tags)
  return tags_.Mutable(index);
}
inline ::abci::KVPair* ResponseDeliverTx::add_tags() {
  // @@protoc_insertion_point(field_add:abci.ResponseDeliverTx.tags)
  return tags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::abci::KVPair >*
ResponseDeliverTx::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:abci.ResponseDeliverTx.tags)
  return &tags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::abci::KVPair >&
ResponseDeliverTx::tags() const {
  // @@protoc_insertion_point(field_list:abci.ResponseDeliverTx.tags)
  return tags_;
}

// optional .abci.KI64Pair fee = 8;
inline bool ResponseDeliverTx::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
inline void ResponseDeliverTx::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
inline const ::abci::KI64Pair& ResponseDeliverTx::fee() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
inline ::abci::KI64Pair* ResponseDeliverTx::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::abci::KI64Pair;
  }
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.fee)
  return fee_;
}
inline ::abci::KI64Pair* ResponseDeliverTx::release_fee() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.fee)
  
  ::abci::KI64Pair* temp = fee_;
  fee_ = NULL;
  return temp;
}
inline void ResponseDeliverTx::set_allocated_fee(::abci::KI64Pair* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.fee)
}

// -------------------------------------------------------------------

// ResponseEndBlock

// repeated .abci.Validator validator_updates = 1;
inline int ResponseEndBlock::validator_updates_size() const {
  return validator_updates_.size();
}
inline void ResponseEndBlock::clear_validator_updates() {
  validator_updates_.Clear();
}
inline const ::abci::Validator& ResponseEndBlock::validator_updates(int index) const {
  // @@protoc_insertion_point(field_get:abci.ResponseEndBlock.validator_updates)
  return validator_updates_.Get(index);
}
inline ::abci::Validator* ResponseEndBlock::mutable_validator_updates(int index) {
  // @@protoc_insertion_point(field_mutable:abci.ResponseEndBlock.validator_updates)
  return validator_updates_.Mutable(index);
}
inline ::abci::Validator* ResponseEndBlock::add_validator_updates() {
  // @@protoc_insertion_point(field_add:abci.ResponseEndBlock.validator_updates)
  return validator_updates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::abci::Validator >*
ResponseEndBlock::mutable_validator_updates() {
  // @@protoc_insertion_point(field_mutable_list:abci.ResponseEndBlock.validator_updates)
  return &validator_updates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::abci::Validator >&
ResponseEndBlock::validator_updates() const {
  // @@protoc_insertion_point(field_list:abci.ResponseEndBlock.validator_updates)
  return validator_updates_;
}

// optional .abci.ConsensusParams consensus_param_updates = 2;
inline bool ResponseEndBlock::has_consensus_param_updates() const {
  return !_is_default_instance_ && consensus_param_updates_ != NULL;
}
inline void ResponseEndBlock::clear_consensus_param_updates() {
  if (GetArenaNoVirtual() == NULL && consensus_param_updates_ != NULL) delete consensus_param_updates_;
  consensus_param_updates_ = NULL;
}
inline const ::abci::ConsensusParams& ResponseEndBlock::consensus_param_updates() const {
  // @@protoc_insertion_point(field_get:abci.ResponseEndBlock.consensus_param_updates)
  return consensus_param_updates_ != NULL ? *consensus_param_updates_ : *default_instance_->consensus_param_updates_;
}
inline ::abci::ConsensusParams* ResponseEndBlock::mutable_consensus_param_updates() {
  
  if (consensus_param_updates_ == NULL) {
    consensus_param_updates_ = new ::abci::ConsensusParams;
  }
  // @@protoc_insertion_point(field_mutable:abci.ResponseEndBlock.consensus_param_updates)
  return consensus_param_updates_;
}
inline ::abci::ConsensusParams* ResponseEndBlock::release_consensus_param_updates() {
  // @@protoc_insertion_point(field_release:abci.ResponseEndBlock.consensus_param_updates)
  
  ::abci::ConsensusParams* temp = consensus_param_updates_;
  consensus_param_updates_ = NULL;
  return temp;
}
inline void ResponseEndBlock::set_allocated_consensus_param_updates(::abci::ConsensusParams* consensus_param_updates) {
  delete consensus_param_updates_;
  consensus_param_updates_ = consensus_param_updates;
  if (consensus_param_updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseEndBlock.consensus_param_updates)
}

// -------------------------------------------------------------------

// ResponseCommit

// optional bytes data = 2;
inline void ResponseCommit::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseCommit::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCommit.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCommit::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCommit.data)
}
inline void ResponseCommit::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCommit.data)
}
inline void ResponseCommit::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCommit.data)
}
inline ::std::string* ResponseCommit::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCommit.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseCommit::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseCommit.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseCommit::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCommit.data)
}

// -------------------------------------------------------------------

// ConsensusParams

// optional .abci.BlockSize block_size = 1;
inline bool ConsensusParams::has_block_size() const {
  return !_is_default_instance_ && block_size_ != NULL;
}
inline void ConsensusParams::clear_block_size() {
  if (GetArenaNoVirtual() == NULL && block_size_ != NULL) delete block_size_;
  block_size_ = NULL;
}
inline const ::abci::BlockSize& ConsensusParams::block_size() const {
  // @@protoc_insertion_point(field_get:abci.ConsensusParams.block_size)
  return block_size_ != NULL ? *block_size_ : *default_instance_->block_size_;
}
inline ::abci::BlockSize* ConsensusParams::mutable_block_size() {
  
  if (block_size_ == NULL) {
    block_size_ = new ::abci::BlockSize;
  }
  // @@protoc_insertion_point(field_mutable:abci.ConsensusParams.block_size)
  return block_size_;
}
inline ::abci::BlockSize* ConsensusParams::release_block_size() {
  // @@protoc_insertion_point(field_release:abci.ConsensusParams.block_size)
  
  ::abci::BlockSize* temp = block_size_;
  block_size_ = NULL;
  return temp;
}
inline void ConsensusParams::set_allocated_block_size(::abci::BlockSize* block_size) {
  delete block_size_;
  block_size_ = block_size;
  if (block_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ConsensusParams.block_size)
}

// optional .abci.TxSize tx_size = 2;
inline bool ConsensusParams::has_tx_size() const {
  return !_is_default_instance_ && tx_size_ != NULL;
}
inline void ConsensusParams::clear_tx_size() {
  if (GetArenaNoVirtual() == NULL && tx_size_ != NULL) delete tx_size_;
  tx_size_ = NULL;
}
inline const ::abci::TxSize& ConsensusParams::tx_size() const {
  // @@protoc_insertion_point(field_get:abci.ConsensusParams.tx_size)
  return tx_size_ != NULL ? *tx_size_ : *default_instance_->tx_size_;
}
inline ::abci::TxSize* ConsensusParams::mutable_tx_size() {
  
  if (tx_size_ == NULL) {
    tx_size_ = new ::abci::TxSize;
  }
  // @@protoc_insertion_point(field_mutable:abci.ConsensusParams.tx_size)
  return tx_size_;
}
inline ::abci::TxSize* ConsensusParams::release_tx_size() {
  // @@protoc_insertion_point(field_release:abci.ConsensusParams.tx_size)
  
  ::abci::TxSize* temp = tx_size_;
  tx_size_ = NULL;
  return temp;
}
inline void ConsensusParams::set_allocated_tx_size(::abci::TxSize* tx_size) {
  delete tx_size_;
  tx_size_ = tx_size;
  if (tx_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ConsensusParams.tx_size)
}

// optional .abci.BlockGossip block_gossip = 3;
inline bool ConsensusParams::has_block_gossip() const {
  return !_is_default_instance_ && block_gossip_ != NULL;
}
inline void ConsensusParams::clear_block_gossip() {
  if (GetArenaNoVirtual() == NULL && block_gossip_ != NULL) delete block_gossip_;
  block_gossip_ = NULL;
}
inline const ::abci::BlockGossip& ConsensusParams::block_gossip() const {
  // @@protoc_insertion_point(field_get:abci.ConsensusParams.block_gossip)
  return block_gossip_ != NULL ? *block_gossip_ : *default_instance_->block_gossip_;
}
inline ::abci::BlockGossip* ConsensusParams::mutable_block_gossip() {
  
  if (block_gossip_ == NULL) {
    block_gossip_ = new ::abci::BlockGossip;
  }
  // @@protoc_insertion_point(field_mutable:abci.ConsensusParams.block_gossip)
  return block_gossip_;
}
inline ::abci::BlockGossip* ConsensusParams::release_block_gossip() {
  // @@protoc_insertion_point(field_release:abci.ConsensusParams.block_gossip)
  
  ::abci::BlockGossip* temp = block_gossip_;
  block_gossip_ = NULL;
  return temp;
}
inline void ConsensusParams::set_allocated_block_gossip(::abci::BlockGossip* block_gossip) {
  delete block_gossip_;
  block_gossip_ = block_gossip;
  if (block_gossip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ConsensusParams.block_gossip)
}

// -------------------------------------------------------------------

// BlockSize

// optional int32 max_bytes = 1;
inline void BlockSize::clear_max_bytes() {
  max_bytes_ = 0;
}
inline ::google::protobuf::int32 BlockSize::max_bytes() const {
  // @@protoc_insertion_point(field_get:abci.BlockSize.max_bytes)
  return max_bytes_;
}
inline void BlockSize::set_max_bytes(::google::protobuf::int32 value) {
  
  max_bytes_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockSize.max_bytes)
}

// optional int32 max_txs = 2;
inline void BlockSize::clear_max_txs() {
  max_txs_ = 0;
}
inline ::google::protobuf::int32 BlockSize::max_txs() const {
  // @@protoc_insertion_point(field_get:abci.BlockSize.max_txs)
  return max_txs_;
}
inline void BlockSize::set_max_txs(::google::protobuf::int32 value) {
  
  max_txs_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockSize.max_txs)
}

// optional int64 max_gas = 3;
inline void BlockSize::clear_max_gas() {
  max_gas_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockSize::max_gas() const {
  // @@protoc_insertion_point(field_get:abci.BlockSize.max_gas)
  return max_gas_;
}
inline void BlockSize::set_max_gas(::google::protobuf::int64 value) {
  
  max_gas_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockSize.max_gas)
}

// -------------------------------------------------------------------

// TxSize

// optional int32 max_bytes = 1;
inline void TxSize::clear_max_bytes() {
  max_bytes_ = 0;
}
inline ::google::protobuf::int32 TxSize::max_bytes() const {
  // @@protoc_insertion_point(field_get:abci.TxSize.max_bytes)
  return max_bytes_;
}
inline void TxSize::set_max_bytes(::google::protobuf::int32 value) {
  
  max_bytes_ = value;
  // @@protoc_insertion_point(field_set:abci.TxSize.max_bytes)
}

// optional int64 max_gas = 2;
inline void TxSize::clear_max_gas() {
  max_gas_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TxSize::max_gas() const {
  // @@protoc_insertion_point(field_get:abci.TxSize.max_gas)
  return max_gas_;
}
inline void TxSize::set_max_gas(::google::protobuf::int64 value) {
  
  max_gas_ = value;
  // @@protoc_insertion_point(field_set:abci.TxSize.max_gas)
}

// -------------------------------------------------------------------

// BlockGossip

// optional int32 block_part_size_bytes = 1;
inline void BlockGossip::clear_block_part_size_bytes() {
  block_part_size_bytes_ = 0;
}
inline ::google::protobuf::int32 BlockGossip::block_part_size_bytes() const {
  // @@protoc_insertion_point(field_get:abci.BlockGossip.block_part_size_bytes)
  return block_part_size_bytes_;
}
inline void BlockGossip::set_block_part_size_bytes(::google::protobuf::int32 value) {
  
  block_part_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockGossip.block_part_size_bytes)
}

// -------------------------------------------------------------------

// Header

// optional string chain_id = 1;
inline void Header::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::chain_id() const {
  // @@protoc_insertion_point(field_get:abci.Header.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.chain_id)
}
inline void Header::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.chain_id)
}
inline void Header::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.chain_id)
}
inline ::std::string* Header::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_chain_id() {
  // @@protoc_insertion_point(field_release:abci.Header.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.chain_id)
}

// optional int64 height = 2;
inline void Header::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::height() const {
  // @@protoc_insertion_point(field_get:abci.Header.height)
  return height_;
}
inline void Header::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.Header.height)
}

// optional int64 time = 3;
inline void Header::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Header::time() const {
  // @@protoc_insertion_point(field_get:abci.Header.time)
  return time_;
}
inline void Header::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:abci.Header.time)
}

// optional int32 num_txs = 4;
inline void Header::clear_num_txs() {
  num_txs_ = 0;
}
inline ::google::protobuf::int32 Header::num_txs() const {
  // @@protoc_insertion_point(field_get:abci.Header.num_txs)
  return num_txs_;
}
inline void Header::set_num_txs(::google::protobuf::int32 value) {
  
  num_txs_ = value;
  // @@protoc_insertion_point(field_set:abci.Header.num_txs)
}

// optional .abci.BlockID last_block_id = 5;
inline bool Header::has_last_block_id() const {
  return !_is_default_instance_ && last_block_id_ != NULL;
}
inline void Header::clear_last_block_id() {
  if (GetArenaNoVirtual() == NULL && last_block_id_ != NULL) delete last_block_id_;
  last_block_id_ = NULL;
}
inline const ::abci::BlockID& Header::last_block_id() const {
  // @@protoc_insertion_point(field_get:abci.Header.last_block_id)
  return last_block_id_ != NULL ? *last_block_id_ : *default_instance_->last_block_id_;
}
inline ::abci::BlockID* Header::mutable_last_block_id() {
  
  if (last_block_id_ == NULL) {
    last_block_id_ = new ::abci::BlockID;
  }
  // @@protoc_insertion_point(field_mutable:abci.Header.last_block_id)
  return last_block_id_;
}
inline ::abci::BlockID* Header::release_last_block_id() {
  // @@protoc_insertion_point(field_release:abci.Header.last_block_id)
  
  ::abci::BlockID* temp = last_block_id_;
  last_block_id_ = NULL;
  return temp;
}
inline void Header::set_allocated_last_block_id(::abci::BlockID* last_block_id) {
  delete last_block_id_;
  last_block_id_ = last_block_id;
  if (last_block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Header.last_block_id)
}

// optional bytes last_commit_hash = 6;
inline void Header::clear_last_commit_hash() {
  last_commit_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::last_commit_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.last_commit_hash)
  return last_commit_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_last_commit_hash(const ::std::string& value) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.last_commit_hash)
}
inline void Header::set_last_commit_hash(const char* value) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.last_commit_hash)
}
inline void Header::set_last_commit_hash(const void* value, size_t size) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.last_commit_hash)
}
inline ::std::string* Header::mutable_last_commit_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.last_commit_hash)
  return last_commit_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_last_commit_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.last_commit_hash)
  
  return last_commit_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_last_commit_hash(::std::string* last_commit_hash) {
  if (last_commit_hash != NULL) {
    
  } else {
    
  }
  last_commit_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_commit_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.last_commit_hash)
}

// optional bytes data_hash = 7;
inline void Header::clear_data_hash() {
  data_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::data_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.data_hash)
  return data_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_data_hash(const ::std::string& value) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.data_hash)
}
inline void Header::set_data_hash(const char* value) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.data_hash)
}
inline void Header::set_data_hash(const void* value, size_t size) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.data_hash)
}
inline ::std::string* Header::mutable_data_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.data_hash)
  return data_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_data_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.data_hash)
  
  return data_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_data_hash(::std::string* data_hash) {
  if (data_hash != NULL) {
    
  } else {
    
  }
  data_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.data_hash)
}

// optional bytes validators_hash = 8;
inline void Header::clear_validators_hash() {
  validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::validators_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.validators_hash)
  return validators_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_validators_hash(const ::std::string& value) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.validators_hash)
}
inline void Header::set_validators_hash(const char* value) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.validators_hash)
}
inline void Header::set_validators_hash(const void* value, size_t size) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.validators_hash)
}
inline ::std::string* Header::mutable_validators_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.validators_hash)
  return validators_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_validators_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.validators_hash)
  
  return validators_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_validators_hash(::std::string* validators_hash) {
  if (validators_hash != NULL) {
    
  } else {
    
  }
  validators_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validators_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.validators_hash)
}

// optional bytes app_hash = 9;
inline void Header::clear_app_hash() {
  app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::app_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.app_hash)
  return app_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_app_hash(const ::std::string& value) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.app_hash)
}
inline void Header::set_app_hash(const char* value) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.app_hash)
}
inline void Header::set_app_hash(const void* value, size_t size) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.app_hash)
}
inline ::std::string* Header::mutable_app_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.app_hash)
  return app_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_app_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.app_hash)
  
  return app_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_app_hash(::std::string* app_hash) {
  if (app_hash != NULL) {
    
  } else {
    
  }
  app_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.app_hash)
}

// -------------------------------------------------------------------

// BlockID

// optional bytes hash = 1;
inline void BlockID::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockID::hash() const {
  // @@protoc_insertion_point(field_get:abci.BlockID.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockID::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.BlockID.hash)
}
inline void BlockID::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.BlockID.hash)
}
inline void BlockID::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.BlockID.hash)
}
inline ::std::string* BlockID::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.BlockID.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockID::release_hash() {
  // @@protoc_insertion_point(field_release:abci.BlockID.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockID::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:abci.BlockID.hash)
}

// optional .abci.PartSetHeader parts = 2;
inline bool BlockID::has_parts() const {
  return !_is_default_instance_ && parts_ != NULL;
}
inline void BlockID::clear_parts() {
  if (GetArenaNoVirtual() == NULL && parts_ != NULL) delete parts_;
  parts_ = NULL;
}
inline const ::abci::PartSetHeader& BlockID::parts() const {
  // @@protoc_insertion_point(field_get:abci.BlockID.parts)
  return parts_ != NULL ? *parts_ : *default_instance_->parts_;
}
inline ::abci::PartSetHeader* BlockID::mutable_parts() {
  
  if (parts_ == NULL) {
    parts_ = new ::abci::PartSetHeader;
  }
  // @@protoc_insertion_point(field_mutable:abci.BlockID.parts)
  return parts_;
}
inline ::abci::PartSetHeader* BlockID::release_parts() {
  // @@protoc_insertion_point(field_release:abci.BlockID.parts)
  
  ::abci::PartSetHeader* temp = parts_;
  parts_ = NULL;
  return temp;
}
inline void BlockID::set_allocated_parts(::abci::PartSetHeader* parts) {
  delete parts_;
  parts_ = parts;
  if (parts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.BlockID.parts)
}

// -------------------------------------------------------------------

// PartSetHeader

// optional int32 total = 1;
inline void PartSetHeader::clear_total() {
  total_ = 0;
}
inline ::google::protobuf::int32 PartSetHeader::total() const {
  // @@protoc_insertion_point(field_get:abci.PartSetHeader.total)
  return total_;
}
inline void PartSetHeader::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:abci.PartSetHeader.total)
}

// optional bytes hash = 2;
inline void PartSetHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartSetHeader::hash() const {
  // @@protoc_insertion_point(field_get:abci.PartSetHeader.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartSetHeader::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.PartSetHeader.hash)
}
inline void PartSetHeader::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.PartSetHeader.hash)
}
inline void PartSetHeader::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.PartSetHeader.hash)
}
inline ::std::string* PartSetHeader::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.PartSetHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartSetHeader::release_hash() {
  // @@protoc_insertion_point(field_release:abci.PartSetHeader.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartSetHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:abci.PartSetHeader.hash)
}

// -------------------------------------------------------------------

// Validator

// optional bytes pub_key = 1;
inline void Validator::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Validator::pub_key() const {
  // @@protoc_insertion_point(field_get:abci.Validator.pub_key)
  return pub_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Validator::set_pub_key(const ::std::string& value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Validator.pub_key)
}
inline void Validator::set_pub_key(const char* value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Validator.pub_key)
}
inline void Validator::set_pub_key(const void* value, size_t size) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Validator.pub_key)
}
inline ::std::string* Validator::mutable_pub_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.Validator.pub_key)
  return pub_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Validator::release_pub_key() {
  // @@protoc_insertion_point(field_release:abci.Validator.pub_key)
  
  return pub_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Validator::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key != NULL) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:abci.Validator.pub_key)
}

// optional int64 power = 2;
inline void Validator::clear_power() {
  power_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Validator::power() const {
  // @@protoc_insertion_point(field_get:abci.Validator.power)
  return power_;
}
inline void Validator::set_power(::google::protobuf::int64 value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:abci.Validator.power)
}

// -------------------------------------------------------------------

// Evidence

// optional bytes pub_key = 1;
inline void Evidence::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Evidence::pub_key() const {
  // @@protoc_insertion_point(field_get:abci.Evidence.pub_key)
  return pub_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Evidence::set_pub_key(const ::std::string& value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Evidence.pub_key)
}
inline void Evidence::set_pub_key(const char* value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Evidence.pub_key)
}
inline void Evidence::set_pub_key(const void* value, size_t size) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Evidence.pub_key)
}
inline ::std::string* Evidence::mutable_pub_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.Evidence.pub_key)
  return pub_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Evidence::release_pub_key() {
  // @@protoc_insertion_point(field_release:abci.Evidence.pub_key)
  
  return pub_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Evidence::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key != NULL) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:abci.Evidence.pub_key)
}

// optional int64 height = 2;
inline void Evidence::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Evidence::height() const {
  // @@protoc_insertion_point(field_get:abci.Evidence.height)
  return height_;
}
inline void Evidence::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.Evidence.height)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace abci

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_abci_2eproto__INCLUDED
