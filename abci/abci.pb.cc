// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abci.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "abci.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace abci {

namespace {

const ::google::protobuf::Descriptor* KVPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* KI64Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KI64Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::abci::RequestEcho* echo_;
  const ::abci::RequestFlush* flush_;
  const ::abci::RequestInfo* info_;
  const ::abci::RequestSetOption* set_option_;
  const ::abci::RequestInitChain* init_chain_;
  const ::abci::RequestQuery* query_;
  const ::abci::RequestBeginBlock* begin_block_;
  const ::abci::RequestCheckTx* check_tx_;
  const ::abci::RequestDeliverTx* deliver_tx_;
  const ::abci::RequestEndBlock* end_block_;
  const ::abci::RequestCommit* commit_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RequestEcho_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEcho_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFlush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFlush_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSetOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSetOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestInitChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestInitChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBeginBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBeginBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCheckTx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCheckTx_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDeliverTx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDeliverTx_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestEndBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEndBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCommit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCommit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::abci::ResponseException* exception_;
  const ::abci::ResponseEcho* echo_;
  const ::abci::ResponseFlush* flush_;
  const ::abci::ResponseInfo* info_;
  const ::abci::ResponseSetOption* set_option_;
  const ::abci::ResponseInitChain* init_chain_;
  const ::abci::ResponseQuery* query_;
  const ::abci::ResponseBeginBlock* begin_block_;
  const ::abci::ResponseCheckTx* check_tx_;
  const ::abci::ResponseDeliverTx* deliver_tx_;
  const ::abci::ResponseEndBlock* end_block_;
  const ::abci::ResponseCommit* commit_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ResponseException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseException_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseEcho_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseEcho_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFlush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFlush_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSetOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSetOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseInitChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseInitChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBeginBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBeginBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCheckTx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCheckTx_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseDeliverTx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseDeliverTx_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseEndBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseEndBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCommit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCommit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockGossip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockGossip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockID_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartSetHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartSetHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Validator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Validator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Evidence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Evidence_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_abci_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_abci_2eproto() {
  protobuf_AddDesc_abci_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "abci.proto");
  GOOGLE_CHECK(file != NULL);
  KVPair_descriptor_ = file->message_type(0);
  static const int KVPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPair, value_),
  };
  KVPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVPair_descriptor_,
      KVPair::default_instance_,
      KVPair_offsets_,
      -1,
      -1,
      -1,
      sizeof(KVPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPair, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPair, _is_default_instance_));
  KI64Pair_descriptor_ = file->message_type(1);
  static const int KI64Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KI64Pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KI64Pair, value_),
  };
  KI64Pair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KI64Pair_descriptor_,
      KI64Pair::default_instance_,
      KI64Pair_offsets_,
      -1,
      -1,
      -1,
      sizeof(KI64Pair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KI64Pair, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KI64Pair, _is_default_instance_));
  Request_descriptor_ = file->message_type(2);
  static const int Request_offsets_[12] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, echo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, flush_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, set_option_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, init_chain_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, query_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, begin_block_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, check_tx_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, deliver_tx_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, end_block_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, value_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  RequestEcho_descriptor_ = file->message_type(3);
  static const int RequestEcho_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEcho, message_),
  };
  RequestEcho_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestEcho_descriptor_,
      RequestEcho::default_instance_,
      RequestEcho_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestEcho),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEcho, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEcho, _is_default_instance_));
  RequestFlush_descriptor_ = file->message_type(4);
  static const int RequestFlush_offsets_[1] = {
  };
  RequestFlush_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestFlush_descriptor_,
      RequestFlush::default_instance_,
      RequestFlush_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestFlush),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFlush, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFlush, _is_default_instance_));
  RequestInfo_descriptor_ = file->message_type(5);
  static const int RequestInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInfo, version_),
  };
  RequestInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestInfo_descriptor_,
      RequestInfo::default_instance_,
      RequestInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInfo, _is_default_instance_));
  RequestSetOption_descriptor_ = file->message_type(6);
  static const int RequestSetOption_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetOption, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetOption, value_),
  };
  RequestSetOption_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestSetOption_descriptor_,
      RequestSetOption::default_instance_,
      RequestSetOption_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestSetOption),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetOption, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSetOption, _is_default_instance_));
  RequestInitChain_descriptor_ = file->message_type(7);
  static const int RequestInitChain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, validators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, app_state_bytes_),
  };
  RequestInitChain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestInitChain_descriptor_,
      RequestInitChain::default_instance_,
      RequestInitChain_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestInitChain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInitChain, _is_default_instance_));
  RequestQuery_descriptor_ = file->message_type(8);
  static const int RequestQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, prove_),
  };
  RequestQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQuery_descriptor_,
      RequestQuery::default_instance_,
      RequestQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, _is_default_instance_));
  RequestBeginBlock_descriptor_ = file->message_type(9);
  static const int RequestBeginBlock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, absent_validators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, byzantine_validators_),
  };
  RequestBeginBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestBeginBlock_descriptor_,
      RequestBeginBlock::default_instance_,
      RequestBeginBlock_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestBeginBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBeginBlock, _is_default_instance_));
  RequestCheckTx_descriptor_ = file->message_type(10);
  static const int RequestCheckTx_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckTx, tx_),
  };
  RequestCheckTx_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestCheckTx_descriptor_,
      RequestCheckTx::default_instance_,
      RequestCheckTx_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestCheckTx),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckTx, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckTx, _is_default_instance_));
  RequestDeliverTx_descriptor_ = file->message_type(11);
  static const int RequestDeliverTx_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDeliverTx, tx_),
  };
  RequestDeliverTx_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestDeliverTx_descriptor_,
      RequestDeliverTx::default_instance_,
      RequestDeliverTx_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestDeliverTx),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDeliverTx, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDeliverTx, _is_default_instance_));
  RequestEndBlock_descriptor_ = file->message_type(12);
  static const int RequestEndBlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEndBlock, height_),
  };
  RequestEndBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestEndBlock_descriptor_,
      RequestEndBlock::default_instance_,
      RequestEndBlock_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestEndBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEndBlock, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEndBlock, _is_default_instance_));
  RequestCommit_descriptor_ = file->message_type(13);
  static const int RequestCommit_offsets_[1] = {
  };
  RequestCommit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestCommit_descriptor_,
      RequestCommit::default_instance_,
      RequestCommit_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestCommit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommit, _is_default_instance_));
  Response_descriptor_ = file->message_type(14);
  static const int Response_offsets_[13] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, exception_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, echo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, flush_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, set_option_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, init_chain_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, query_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, begin_block_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, check_tx_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, deliver_tx_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, end_block_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, value_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  ResponseException_descriptor_ = file->message_type(15);
  static const int ResponseException_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseException, error_),
  };
  ResponseException_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseException_descriptor_,
      ResponseException::default_instance_,
      ResponseException_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseException),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseException, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseException, _is_default_instance_));
  ResponseEcho_descriptor_ = file->message_type(16);
  static const int ResponseEcho_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEcho, message_),
  };
  ResponseEcho_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseEcho_descriptor_,
      ResponseEcho::default_instance_,
      ResponseEcho_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseEcho),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEcho, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEcho, _is_default_instance_));
  ResponseFlush_descriptor_ = file->message_type(17);
  static const int ResponseFlush_offsets_[1] = {
  };
  ResponseFlush_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseFlush_descriptor_,
      ResponseFlush::default_instance_,
      ResponseFlush_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseFlush),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFlush, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFlush, _is_default_instance_));
  ResponseInfo_descriptor_ = file->message_type(18);
  static const int ResponseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, last_block_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, last_block_app_hash_),
  };
  ResponseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseInfo_descriptor_,
      ResponseInfo::default_instance_,
      ResponseInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInfo, _is_default_instance_));
  ResponseSetOption_descriptor_ = file->message_type(19);
  static const int ResponseSetOption_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, info_),
  };
  ResponseSetOption_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseSetOption_descriptor_,
      ResponseSetOption::default_instance_,
      ResponseSetOption_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseSetOption),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSetOption, _is_default_instance_));
  ResponseInitChain_descriptor_ = file->message_type(20);
  static const int ResponseInitChain_offsets_[1] = {
  };
  ResponseInitChain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseInitChain_descriptor_,
      ResponseInitChain::default_instance_,
      ResponseInitChain_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseInitChain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInitChain, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseInitChain, _is_default_instance_));
  ResponseQuery_descriptor_ = file->message_type(21);
  static const int ResponseQuery_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, height_),
  };
  ResponseQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQuery_descriptor_,
      ResponseQuery::default_instance_,
      ResponseQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, _is_default_instance_));
  ResponseBeginBlock_descriptor_ = file->message_type(22);
  static const int ResponseBeginBlock_offsets_[1] = {
  };
  ResponseBeginBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseBeginBlock_descriptor_,
      ResponseBeginBlock::default_instance_,
      ResponseBeginBlock_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseBeginBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBeginBlock, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBeginBlock, _is_default_instance_));
  ResponseCheckTx_descriptor_ = file->message_type(23);
  static const int ResponseCheckTx_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, gas_wanted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, gas_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, fee_),
  };
  ResponseCheckTx_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseCheckTx_descriptor_,
      ResponseCheckTx::default_instance_,
      ResponseCheckTx_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseCheckTx),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckTx, _is_default_instance_));
  ResponseDeliverTx_descriptor_ = file->message_type(24);
  static const int ResponseDeliverTx_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, gas_wanted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, gas_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, fee_),
  };
  ResponseDeliverTx_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseDeliverTx_descriptor_,
      ResponseDeliverTx::default_instance_,
      ResponseDeliverTx_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseDeliverTx),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDeliverTx, _is_default_instance_));
  ResponseEndBlock_descriptor_ = file->message_type(25);
  static const int ResponseEndBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, validator_updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, consensus_param_updates_),
  };
  ResponseEndBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseEndBlock_descriptor_,
      ResponseEndBlock::default_instance_,
      ResponseEndBlock_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseEndBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEndBlock, _is_default_instance_));
  ResponseCommit_descriptor_ = file->message_type(26);
  static const int ResponseCommit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommit, data_),
  };
  ResponseCommit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseCommit_descriptor_,
      ResponseCommit::default_instance_,
      ResponseCommit_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseCommit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommit, _is_default_instance_));
  ConsensusParams_descriptor_ = file->message_type(27);
  static const int ConsensusParams_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, block_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, tx_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, block_gossip_),
  };
  ConsensusParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConsensusParams_descriptor_,
      ConsensusParams::default_instance_,
      ConsensusParams_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConsensusParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusParams, _is_default_instance_));
  BlockSize_descriptor_ = file->message_type(28);
  static const int BlockSize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSize, max_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSize, max_txs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSize, max_gas_),
  };
  BlockSize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockSize_descriptor_,
      BlockSize::default_instance_,
      BlockSize_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockSize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSize, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSize, _is_default_instance_));
  TxSize_descriptor_ = file->message_type(29);
  static const int TxSize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSize, max_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSize, max_gas_),
  };
  TxSize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TxSize_descriptor_,
      TxSize::default_instance_,
      TxSize_offsets_,
      -1,
      -1,
      -1,
      sizeof(TxSize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSize, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSize, _is_default_instance_));
  BlockGossip_descriptor_ = file->message_type(30);
  static const int BlockGossip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockGossip, block_part_size_bytes_),
  };
  BlockGossip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockGossip_descriptor_,
      BlockGossip::default_instance_,
      BlockGossip_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockGossip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockGossip, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockGossip, _is_default_instance_));
  Header_descriptor_ = file->message_type(31);
  static const int Header_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, num_txs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, last_block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, last_commit_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, data_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, validators_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, app_hash_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _is_default_instance_));
  BlockID_descriptor_ = file->message_type(32);
  static const int BlockID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockID, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockID, parts_),
  };
  BlockID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockID_descriptor_,
      BlockID::default_instance_,
      BlockID_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockID, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockID, _is_default_instance_));
  PartSetHeader_descriptor_ = file->message_type(33);
  static const int PartSetHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartSetHeader, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartSetHeader, hash_),
  };
  PartSetHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PartSetHeader_descriptor_,
      PartSetHeader::default_instance_,
      PartSetHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(PartSetHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartSetHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartSetHeader, _is_default_instance_));
  Validator_descriptor_ = file->message_type(34);
  static const int Validator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Validator, pub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Validator, power_),
  };
  Validator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Validator_descriptor_,
      Validator::default_instance_,
      Validator_offsets_,
      -1,
      -1,
      -1,
      sizeof(Validator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Validator, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Validator, _is_default_instance_));
  Evidence_descriptor_ = file->message_type(35);
  static const int Evidence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, pub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, height_),
  };
  Evidence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Evidence_descriptor_,
      Evidence::default_instance_,
      Evidence_offsets_,
      -1,
      -1,
      -1,
      sizeof(Evidence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evidence, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_abci_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVPair_descriptor_, &KVPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KI64Pair_descriptor_, &KI64Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestEcho_descriptor_, &RequestEcho::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestFlush_descriptor_, &RequestFlush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestInfo_descriptor_, &RequestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestSetOption_descriptor_, &RequestSetOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestInitChain_descriptor_, &RequestInitChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQuery_descriptor_, &RequestQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestBeginBlock_descriptor_, &RequestBeginBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestCheckTx_descriptor_, &RequestCheckTx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestDeliverTx_descriptor_, &RequestDeliverTx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestEndBlock_descriptor_, &RequestEndBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestCommit_descriptor_, &RequestCommit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseException_descriptor_, &ResponseException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseEcho_descriptor_, &ResponseEcho::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseFlush_descriptor_, &ResponseFlush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseInfo_descriptor_, &ResponseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseSetOption_descriptor_, &ResponseSetOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseInitChain_descriptor_, &ResponseInitChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQuery_descriptor_, &ResponseQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseBeginBlock_descriptor_, &ResponseBeginBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseCheckTx_descriptor_, &ResponseCheckTx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseDeliverTx_descriptor_, &ResponseDeliverTx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseEndBlock_descriptor_, &ResponseEndBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseCommit_descriptor_, &ResponseCommit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConsensusParams_descriptor_, &ConsensusParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockSize_descriptor_, &BlockSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TxSize_descriptor_, &TxSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockGossip_descriptor_, &BlockGossip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockID_descriptor_, &BlockID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PartSetHeader_descriptor_, &PartSetHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Validator_descriptor_, &Validator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Evidence_descriptor_, &Evidence::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_abci_2eproto() {
  delete KVPair::default_instance_;
  delete KVPair_reflection_;
  delete KI64Pair::default_instance_;
  delete KI64Pair_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete RequestEcho::default_instance_;
  delete RequestEcho_reflection_;
  delete RequestFlush::default_instance_;
  delete RequestFlush_reflection_;
  delete RequestInfo::default_instance_;
  delete RequestInfo_reflection_;
  delete RequestSetOption::default_instance_;
  delete RequestSetOption_reflection_;
  delete RequestInitChain::default_instance_;
  delete RequestInitChain_reflection_;
  delete RequestQuery::default_instance_;
  delete RequestQuery_reflection_;
  delete RequestBeginBlock::default_instance_;
  delete RequestBeginBlock_reflection_;
  delete RequestCheckTx::default_instance_;
  delete RequestCheckTx_reflection_;
  delete RequestDeliverTx::default_instance_;
  delete RequestDeliverTx_reflection_;
  delete RequestEndBlock::default_instance_;
  delete RequestEndBlock_reflection_;
  delete RequestCommit::default_instance_;
  delete RequestCommit_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  delete ResponseException::default_instance_;
  delete ResponseException_reflection_;
  delete ResponseEcho::default_instance_;
  delete ResponseEcho_reflection_;
  delete ResponseFlush::default_instance_;
  delete ResponseFlush_reflection_;
  delete ResponseInfo::default_instance_;
  delete ResponseInfo_reflection_;
  delete ResponseSetOption::default_instance_;
  delete ResponseSetOption_reflection_;
  delete ResponseInitChain::default_instance_;
  delete ResponseInitChain_reflection_;
  delete ResponseQuery::default_instance_;
  delete ResponseQuery_reflection_;
  delete ResponseBeginBlock::default_instance_;
  delete ResponseBeginBlock_reflection_;
  delete ResponseCheckTx::default_instance_;
  delete ResponseCheckTx_reflection_;
  delete ResponseDeliverTx::default_instance_;
  delete ResponseDeliverTx_reflection_;
  delete ResponseEndBlock::default_instance_;
  delete ResponseEndBlock_reflection_;
  delete ResponseCommit::default_instance_;
  delete ResponseCommit_reflection_;
  delete ConsensusParams::default_instance_;
  delete ConsensusParams_reflection_;
  delete BlockSize::default_instance_;
  delete BlockSize_reflection_;
  delete TxSize::default_instance_;
  delete TxSize_reflection_;
  delete BlockGossip::default_instance_;
  delete BlockGossip_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete BlockID::default_instance_;
  delete BlockID_reflection_;
  delete PartSetHeader::default_instance_;
  delete PartSetHeader_reflection_;
  delete Validator::default_instance_;
  delete Validator_reflection_;
  delete Evidence::default_instance_;
  delete Evidence_reflection_;
}

void protobuf_AddDesc_abci_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_abci_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nabci.proto\022\004abci\"$\n\006KVPair\022\013\n\003key\030\001 \001("
    "\014\022\r\n\005value\030\002 \001(\014\"&\n\010KI64Pair\022\013\n\003key\030\001 \001("
    "\014\022\r\n\005value\030\002 \001(\003\"\331\003\n\007Request\022!\n\004echo\030\002 \001"
    "(\0132\021.abci.RequestEchoH\000\022#\n\005flush\030\003 \001(\0132\022"
    ".abci.RequestFlushH\000\022!\n\004info\030\004 \001(\0132\021.abc"
    "i.RequestInfoH\000\022,\n\nset_option\030\005 \001(\0132\026.ab"
    "ci.RequestSetOptionH\000\022,\n\ninit_chain\030\006 \001("
    "\0132\026.abci.RequestInitChainH\000\022#\n\005query\030\007 \001"
    "(\0132\022.abci.RequestQueryH\000\022.\n\013begin_block\030"
    "\010 \001(\0132\027.abci.RequestBeginBlockH\000\022(\n\010chec"
    "k_tx\030\t \001(\0132\024.abci.RequestCheckTxH\000\022,\n\nde"
    "liver_tx\030\023 \001(\0132\026.abci.RequestDeliverTxH\000"
    "\022*\n\tend_block\030\013 \001(\0132\025.abci.RequestEndBlo"
    "ckH\000\022%\n\006commit\030\014 \001(\0132\023.abci.RequestCommi"
    "tH\000B\007\n\005value\"\036\n\013RequestEcho\022\017\n\007message\030\001"
    " \001(\t\"\016\n\014RequestFlush\"\036\n\013RequestInfo\022\017\n\007v"
    "ersion\030\001 \001(\t\".\n\020RequestSetOption\022\013\n\003key\030"
    "\001 \001(\t\022\r\n\005value\030\002 \001(\t\"P\n\020RequestInitChain"
    "\022#\n\nvalidators\030\001 \003(\0132\017.abci.Validator\022\027\n"
    "\017app_state_bytes\030\002 \001(\014\"I\n\014RequestQuery\022\014"
    "\n\004data\030\001 \001(\014\022\014\n\004path\030\002 \001(\t\022\016\n\006height\030\003 \001"
    "(\003\022\r\n\005prove\030\004 \001(\010\"\210\001\n\021RequestBeginBlock\022"
    "\014\n\004hash\030\001 \001(\014\022\034\n\006header\030\002 \001(\0132\014.abci.Hea"
    "der\022\031\n\021absent_validators\030\003 \003(\005\022,\n\024byzant"
    "ine_validators\030\004 \003(\0132\016.abci.Evidence\"\034\n\016"
    "RequestCheckTx\022\n\n\002tx\030\001 \001(\014\"\036\n\020RequestDel"
    "iverTx\022\n\n\002tx\030\001 \001(\014\"!\n\017RequestEndBlock\022\016\n"
    "\006height\030\001 \001(\003\"\017\n\rRequestCommit\"\223\004\n\010Respo"
    "nse\022,\n\texception\030\001 \001(\0132\027.abci.ResponseEx"
    "ceptionH\000\022\"\n\004echo\030\002 \001(\0132\022.abci.ResponseE"
    "choH\000\022$\n\005flush\030\003 \001(\0132\023.abci.ResponseFlus"
    "hH\000\022\"\n\004info\030\004 \001(\0132\022.abci.ResponseInfoH\000\022"
    "-\n\nset_option\030\005 \001(\0132\027.abci.ResponseSetOp"
    "tionH\000\022-\n\ninit_chain\030\006 \001(\0132\027.abci.Respon"
    "seInitChainH\000\022$\n\005query\030\007 \001(\0132\023.abci.Resp"
    "onseQueryH\000\022/\n\013begin_block\030\010 \001(\0132\030.abci."
    "ResponseBeginBlockH\000\022)\n\010check_tx\030\t \001(\0132\025"
    ".abci.ResponseCheckTxH\000\022-\n\ndeliver_tx\030\n "
    "\001(\0132\027.abci.ResponseDeliverTxH\000\022+\n\tend_bl"
    "ock\030\013 \001(\0132\026.abci.ResponseEndBlockH\000\022&\n\006c"
    "ommit\030\014 \001(\0132\024.abci.ResponseCommitH\000B\007\n\005v"
    "alue\"\"\n\021ResponseException\022\r\n\005error\030\001 \001(\t"
    "\"\037\n\014ResponseEcho\022\017\n\007message\030\001 \001(\t\"\017\n\rRes"
    "ponseFlush\"e\n\014ResponseInfo\022\014\n\004data\030\001 \001(\t"
    "\022\017\n\007version\030\002 \001(\t\022\031\n\021last_block_height\030\003"
    " \001(\003\022\033\n\023last_block_app_hash\030\004 \001(\014\"<\n\021Res"
    "ponseSetOption\022\014\n\004code\030\001 \001(\r\022\013\n\003log\030\003 \001("
    "\t\022\014\n\004info\030\004 \001(\t\"\023\n\021ResponseInitChain\"\202\001\n"
    "\rResponseQuery\022\014\n\004code\030\001 \001(\r\022\013\n\003log\030\003 \001("
    "\t\022\014\n\004info\030\004 \001(\t\022\r\n\005index\030\005 \001(\003\022\013\n\003key\030\006 "
    "\001(\014\022\r\n\005value\030\007 \001(\014\022\r\n\005proof\030\010 \001(\014\022\016\n\006hei"
    "ght\030\t \001(\003\"\024\n\022ResponseBeginBlock\"\247\001\n\017Resp"
    "onseCheckTx\022\014\n\004code\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022"
    "\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\022\n\ngas_wanted"
    "\030\005 \001(\003\022\020\n\010gas_used\030\006 \001(\003\022\032\n\004tags\030\007 \003(\0132\014"
    ".abci.KVPair\022\033\n\003fee\030\010 \001(\0132\016.abci.KI64Pai"
    "r\"\251\001\n\021ResponseDeliverTx\022\014\n\004code\030\001 \001(\r\022\014\n"
    "\004data\030\002 \001(\014\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\022"
    "\n\ngas_wanted\030\005 \001(\003\022\020\n\010gas_used\030\006 \001(\003\022\032\n\004"
    "tags\030\007 \003(\0132\014.abci.KVPair\022\033\n\003fee\030\010 \001(\0132\016."
    "abci.KI64Pair\"v\n\020ResponseEndBlock\022*\n\021val"
    "idator_updates\030\001 \003(\0132\017.abci.Validator\0226\n"
    "\027consensus_param_updates\030\002 \001(\0132\025.abci.Co"
    "nsensusParams\"\036\n\016ResponseCommit\022\014\n\004data\030"
    "\002 \001(\014\"~\n\017ConsensusParams\022#\n\nblock_size\030\001"
    " \001(\0132\017.abci.BlockSize\022\035\n\007tx_size\030\002 \001(\0132\014"
    ".abci.TxSize\022\'\n\014block_gossip\030\003 \001(\0132\021.abc"
    "i.BlockGossip\"@\n\tBlockSize\022\021\n\tmax_bytes\030"
    "\001 \001(\005\022\017\n\007max_txs\030\002 \001(\005\022\017\n\007max_gas\030\003 \001(\003\""
    ",\n\006TxSize\022\021\n\tmax_bytes\030\001 \001(\005\022\017\n\007max_gas\030"
    "\002 \001(\003\",\n\013BlockGossip\022\035\n\025block_part_size_"
    "bytes\030\001 \001(\005\"\307\001\n\006Header\022\020\n\010chain_id\030\001 \001(\t"
    "\022\016\n\006height\030\002 \001(\003\022\014\n\004time\030\003 \001(\003\022\017\n\007num_tx"
    "s\030\004 \001(\005\022$\n\rlast_block_id\030\005 \001(\0132\r.abci.Bl"
    "ockID\022\030\n\020last_commit_hash\030\006 \001(\014\022\021\n\tdata_"
    "hash\030\007 \001(\014\022\027\n\017validators_hash\030\010 \001(\014\022\020\n\010a"
    "pp_hash\030\t \001(\014\";\n\007BlockID\022\014\n\004hash\030\001 \001(\014\022\""
    "\n\005parts\030\002 \001(\0132\023.abci.PartSetHeader\",\n\rPa"
    "rtSetHeader\022\r\n\005total\030\001 \001(\005\022\014\n\004hash\030\002 \001(\014"
    "\"+\n\tValidator\022\017\n\007pub_key\030\001 \001(\014\022\r\n\005power\030"
    "\002 \001(\003\"+\n\010Evidence\022\017\n\007pub_key\030\001 \001(\014\022\016\n\006he"
    "ight\030\002 \001(\0032\366\004\n\017ABCIApplication\022-\n\004Echo\022\021"
    ".abci.RequestEcho\032\022.abci.ResponseEcho\0220\n"
    "\005Flush\022\022.abci.RequestFlush\032\023.abci.Respon"
    "seFlush\022-\n\004Info\022\021.abci.RequestInfo\032\022.abc"
    "i.ResponseInfo\022<\n\tSetOption\022\026.abci.Reque"
    "stSetOption\032\027.abci.ResponseSetOption\022<\n\t"
    "DeliverTx\022\026.abci.RequestDeliverTx\032\027.abci"
    ".ResponseDeliverTx\0226\n\007CheckTx\022\024.abci.Req"
    "uestCheckTx\032\025.abci.ResponseCheckTx\0220\n\005Qu"
    "ery\022\022.abci.RequestQuery\032\023.abci.ResponseQ"
    "uery\0223\n\006Commit\022\023.abci.RequestCommit\032\024.ab"
    "ci.ResponseCommit\022<\n\tInitChain\022\026.abci.Re"
    "questInitChain\032\027.abci.ResponseInitChain\022"
    "\?\n\nBeginBlock\022\027.abci.RequestBeginBlock\032\030"
    ".abci.ResponseBeginBlock\0229\n\010EndBlock\022\025.a"
    "bci.RequestEndBlock\032\026.abci.ResponseEndBl"
    "ockb\006proto3", 3891);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "abci.proto", &protobuf_RegisterTypes);
  KVPair::default_instance_ = new KVPair();
  KI64Pair::default_instance_ = new KI64Pair();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance();
  RequestEcho::default_instance_ = new RequestEcho();
  RequestFlush::default_instance_ = new RequestFlush();
  RequestInfo::default_instance_ = new RequestInfo();
  RequestSetOption::default_instance_ = new RequestSetOption();
  RequestInitChain::default_instance_ = new RequestInitChain();
  RequestQuery::default_instance_ = new RequestQuery();
  RequestBeginBlock::default_instance_ = new RequestBeginBlock();
  RequestCheckTx::default_instance_ = new RequestCheckTx();
  RequestDeliverTx::default_instance_ = new RequestDeliverTx();
  RequestEndBlock::default_instance_ = new RequestEndBlock();
  RequestCommit::default_instance_ = new RequestCommit();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  ResponseException::default_instance_ = new ResponseException();
  ResponseEcho::default_instance_ = new ResponseEcho();
  ResponseFlush::default_instance_ = new ResponseFlush();
  ResponseInfo::default_instance_ = new ResponseInfo();
  ResponseSetOption::default_instance_ = new ResponseSetOption();
  ResponseInitChain::default_instance_ = new ResponseInitChain();
  ResponseQuery::default_instance_ = new ResponseQuery();
  ResponseBeginBlock::default_instance_ = new ResponseBeginBlock();
  ResponseCheckTx::default_instance_ = new ResponseCheckTx();
  ResponseDeliverTx::default_instance_ = new ResponseDeliverTx();
  ResponseEndBlock::default_instance_ = new ResponseEndBlock();
  ResponseCommit::default_instance_ = new ResponseCommit();
  ConsensusParams::default_instance_ = new ConsensusParams();
  BlockSize::default_instance_ = new BlockSize();
  TxSize::default_instance_ = new TxSize();
  BlockGossip::default_instance_ = new BlockGossip();
  Header::default_instance_ = new Header();
  BlockID::default_instance_ = new BlockID();
  PartSetHeader::default_instance_ = new PartSetHeader();
  Validator::default_instance_ = new Validator();
  Evidence::default_instance_ = new Evidence();
  KVPair::default_instance_->InitAsDefaultInstance();
  KI64Pair::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  RequestEcho::default_instance_->InitAsDefaultInstance();
  RequestFlush::default_instance_->InitAsDefaultInstance();
  RequestInfo::default_instance_->InitAsDefaultInstance();
  RequestSetOption::default_instance_->InitAsDefaultInstance();
  RequestInitChain::default_instance_->InitAsDefaultInstance();
  RequestQuery::default_instance_->InitAsDefaultInstance();
  RequestBeginBlock::default_instance_->InitAsDefaultInstance();
  RequestCheckTx::default_instance_->InitAsDefaultInstance();
  RequestDeliverTx::default_instance_->InitAsDefaultInstance();
  RequestEndBlock::default_instance_->InitAsDefaultInstance();
  RequestCommit::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ResponseException::default_instance_->InitAsDefaultInstance();
  ResponseEcho::default_instance_->InitAsDefaultInstance();
  ResponseFlush::default_instance_->InitAsDefaultInstance();
  ResponseInfo::default_instance_->InitAsDefaultInstance();
  ResponseSetOption::default_instance_->InitAsDefaultInstance();
  ResponseInitChain::default_instance_->InitAsDefaultInstance();
  ResponseQuery::default_instance_->InitAsDefaultInstance();
  ResponseBeginBlock::default_instance_->InitAsDefaultInstance();
  ResponseCheckTx::default_instance_->InitAsDefaultInstance();
  ResponseDeliverTx::default_instance_->InitAsDefaultInstance();
  ResponseEndBlock::default_instance_->InitAsDefaultInstance();
  ResponseCommit::default_instance_->InitAsDefaultInstance();
  ConsensusParams::default_instance_->InitAsDefaultInstance();
  BlockSize::default_instance_->InitAsDefaultInstance();
  TxSize::default_instance_->InitAsDefaultInstance();
  BlockGossip::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  BlockID::default_instance_->InitAsDefaultInstance();
  PartSetHeader::default_instance_->InitAsDefaultInstance();
  Validator::default_instance_->InitAsDefaultInstance();
  Evidence::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_abci_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_abci_2eproto {
  StaticDescriptorInitializer_abci_2eproto() {
    protobuf_AddDesc_abci_2eproto();
  }
} static_descriptor_initializer_abci_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVPair::kKeyFieldNumber;
const int KVPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVPair::KVPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.KVPair)
}

void KVPair::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KVPair::KVPair(const KVPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.KVPair)
}

void KVPair::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KVPair::~KVPair() {
  // @@protoc_insertion_point(destructor:abci.KVPair)
  SharedDtor();
}

void KVPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KVPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVPair_descriptor_;
}

const KVPair& KVPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

KVPair* KVPair::default_instance_ = NULL;

KVPair* KVPair::New(::google::protobuf::Arena* arena) const {
  KVPair* n = new KVPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.KVPair)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KVPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.KVPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.KVPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.KVPair)
  return false;
#undef DO_
}

void KVPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.KVPair)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.KVPair)
}

::google::protobuf::uint8* KVPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.KVPair)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.KVPair)
  return target;
}

int KVPair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.KVPair)
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.KVPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KVPair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.KVPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.KVPair)
    MergeFrom(*source);
  }
}

void KVPair::MergeFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.KVPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KVPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVPair::CopyFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVPair::IsInitialized() const {

  return true;
}

void KVPair::Swap(KVPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVPair::InternalSwap(KVPair* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVPair_descriptor_;
  metadata.reflection = KVPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVPair

// optional bytes key = 1;
void KVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KVPair::key() const {
  // @@protoc_insertion_point(field_get:abci.KVPair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.KVPair.key)
}
 void KVPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.KVPair.key)
}
 void KVPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.KVPair.key)
}
 ::std::string* KVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.KVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KVPair::release_key() {
  // @@protoc_insertion_point(field_release:abci.KVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.KVPair.key)
}

// optional bytes value = 2;
void KVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KVPair::value() const {
  // @@protoc_insertion_point(field_get:abci.KVPair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.KVPair.value)
}
 void KVPair::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.KVPair.value)
}
 void KVPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.KVPair.value)
}
 ::std::string* KVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:abci.KVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KVPair::release_value() {
  // @@protoc_insertion_point(field_release:abci.KVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:abci.KVPair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KI64Pair::kKeyFieldNumber;
const int KI64Pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KI64Pair::KI64Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.KI64Pair)
}

void KI64Pair::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KI64Pair::KI64Pair(const KI64Pair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.KI64Pair)
}

void KI64Pair::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
}

KI64Pair::~KI64Pair() {
  // @@protoc_insertion_point(destructor:abci.KI64Pair)
  SharedDtor();
}

void KI64Pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KI64Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KI64Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KI64Pair_descriptor_;
}

const KI64Pair& KI64Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

KI64Pair* KI64Pair::default_instance_ = NULL;

KI64Pair* KI64Pair::New(::google::protobuf::Arena* arena) const {
  KI64Pair* n = new KI64Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KI64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.KI64Pair)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
}

bool KI64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.KI64Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.KI64Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.KI64Pair)
  return false;
#undef DO_
}

void KI64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.KI64Pair)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional int64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.KI64Pair)
}

::google::protobuf::uint8* KI64Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.KI64Pair)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional int64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.KI64Pair)
  return target;
}

int KI64Pair::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.KI64Pair)
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KI64Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.KI64Pair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KI64Pair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KI64Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.KI64Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.KI64Pair)
    MergeFrom(*source);
  }
}

void KI64Pair::MergeFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.KI64Pair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void KI64Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.KI64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KI64Pair::CopyFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.KI64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KI64Pair::IsInitialized() const {

  return true;
}

void KI64Pair::Swap(KI64Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KI64Pair::InternalSwap(KI64Pair* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KI64Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KI64Pair_descriptor_;
  metadata.reflection = KI64Pair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KI64Pair

// optional bytes key = 1;
void KI64Pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KI64Pair::key() const {
  // @@protoc_insertion_point(field_get:abci.KI64Pair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KI64Pair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.KI64Pair.key)
}
 void KI64Pair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.KI64Pair.key)
}
 void KI64Pair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.KI64Pair.key)
}
 ::std::string* KI64Pair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.KI64Pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KI64Pair::release_key() {
  // @@protoc_insertion_point(field_release:abci.KI64Pair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KI64Pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.KI64Pair.key)
}

// optional int64 value = 2;
void KI64Pair::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 KI64Pair::value() const {
  // @@protoc_insertion_point(field_get:abci.KI64Pair.value)
  return value_;
}
 void KI64Pair::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:abci.KI64Pair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kEchoFieldNumber;
const int Request::kFlushFieldNumber;
const int Request::kInfoFieldNumber;
const int Request::kSetOptionFieldNumber;
const int Request::kInitChainFieldNumber;
const int Request::kQueryFieldNumber;
const int Request::kBeginBlockFieldNumber;
const int Request::kCheckTxFieldNumber;
const int Request::kDeliverTxFieldNumber;
const int Request::kEndBlockFieldNumber;
const int Request::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Request_default_oneof_instance_->echo_ = const_cast< ::abci::RequestEcho*>(&::abci::RequestEcho::default_instance());
  Request_default_oneof_instance_->flush_ = const_cast< ::abci::RequestFlush*>(&::abci::RequestFlush::default_instance());
  Request_default_oneof_instance_->info_ = const_cast< ::abci::RequestInfo*>(&::abci::RequestInfo::default_instance());
  Request_default_oneof_instance_->set_option_ = const_cast< ::abci::RequestSetOption*>(&::abci::RequestSetOption::default_instance());
  Request_default_oneof_instance_->init_chain_ = const_cast< ::abci::RequestInitChain*>(&::abci::RequestInitChain::default_instance());
  Request_default_oneof_instance_->query_ = const_cast< ::abci::RequestQuery*>(&::abci::RequestQuery::default_instance());
  Request_default_oneof_instance_->begin_block_ = const_cast< ::abci::RequestBeginBlock*>(&::abci::RequestBeginBlock::default_instance());
  Request_default_oneof_instance_->check_tx_ = const_cast< ::abci::RequestCheckTx*>(&::abci::RequestCheckTx::default_instance());
  Request_default_oneof_instance_->deliver_tx_ = const_cast< ::abci::RequestDeliverTx*>(&::abci::RequestDeliverTx::default_instance());
  Request_default_oneof_instance_->end_block_ = const_cast< ::abci::RequestEndBlock*>(&::abci::RequestEndBlock::default_instance());
  Request_default_oneof_instance_->commit_ = const_cast< ::abci::RequestCommit*>(&::abci::RequestCommit::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_value();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:abci.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:abci.Request)
  switch(value_case()) {
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Request)
  clear_value();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abci.RequestEcho echo = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_flush;
        break;
      }

      // optional .abci.RequestFlush flush = 3;
      case 3: {
        if (tag == 26) {
         parse_flush:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .abci.RequestInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_set_option;
        break;
      }

      // optional .abci.RequestSetOption set_option = 5;
      case 5: {
        if (tag == 42) {
         parse_set_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_init_chain;
        break;
      }

      // optional .abci.RequestInitChain init_chain = 6;
      case 6: {
        if (tag == 50) {
         parse_init_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_query;
        break;
      }

      // optional .abci.RequestQuery query = 7;
      case 7: {
        if (tag == 58) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_begin_block;
        break;
      }

      // optional .abci.RequestBeginBlock begin_block = 8;
      case 8: {
        if (tag == 66) {
         parse_begin_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_tx;
        break;
      }

      // optional .abci.RequestCheckTx check_tx = 9;
      case 9: {
        if (tag == 74) {
         parse_check_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_end_block;
        break;
      }

      // optional .abci.RequestEndBlock end_block = 11;
      case 11: {
        if (tag == 90) {
         parse_end_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_commit;
        break;
      }

      // optional .abci.RequestCommit commit = 12;
      case 12: {
        if (tag == 98) {
         parse_commit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_deliver_tx;
        break;
      }

      // optional .abci.RequestDeliverTx deliver_tx = 19;
      case 19: {
        if (tag == 154) {
         parse_deliver_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Request)
  // optional .abci.RequestEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.echo_, output);
  }

  // optional .abci.RequestFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.flush_, output);
  }

  // optional .abci.RequestInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.info_, output);
  }

  // optional .abci.RequestSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.set_option_, output);
  }

  // optional .abci.RequestInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.init_chain_, output);
  }

  // optional .abci.RequestQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.query_, output);
  }

  // optional .abci.RequestBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.begin_block_, output);
  }

  // optional .abci.RequestCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.check_tx_, output);
  }

  // optional .abci.RequestEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.end_block_, output);
  }

  // optional .abci.RequestCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.commit_, output);
  }

  // optional .abci.RequestDeliverTx deliver_tx = 19;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *value_.deliver_tx_, output);
  }

  // @@protoc_insertion_point(serialize_end:abci.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.Request)
  // optional .abci.RequestEcho echo = 2;
  if (has_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *value_.echo_, false, target);
  }

  // optional .abci.RequestFlush flush = 3;
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *value_.flush_, false, target);
  }

  // optional .abci.RequestInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *value_.info_, false, target);
  }

  // optional .abci.RequestSetOption set_option = 5;
  if (has_set_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *value_.set_option_, false, target);
  }

  // optional .abci.RequestInitChain init_chain = 6;
  if (has_init_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *value_.init_chain_, false, target);
  }

  // optional .abci.RequestQuery query = 7;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *value_.query_, false, target);
  }

  // optional .abci.RequestBeginBlock begin_block = 8;
  if (has_begin_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *value_.begin_block_, false, target);
  }

  // optional .abci.RequestCheckTx check_tx = 9;
  if (has_check_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *value_.check_tx_, false, target);
  }

  // optional .abci.RequestEndBlock end_block = 11;
  if (has_end_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *value_.end_block_, false, target);
  }

  // optional .abci.RequestCommit commit = 12;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *value_.commit_, false, target);
  }

  // optional .abci.RequestDeliverTx deliver_tx = 19;
  if (has_deliver_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *value_.deliver_tx_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Request)
  int total_size = 0;

  switch (value_case()) {
    // optional .abci.RequestEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.echo_);
      break;
    }
    // optional .abci.RequestFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.flush_);
      break;
    }
    // optional .abci.RequestInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.info_);
      break;
    }
    // optional .abci.RequestSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.set_option_);
      break;
    }
    // optional .abci.RequestInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.init_chain_);
      break;
    }
    // optional .abci.RequestQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.query_);
      break;
    }
    // optional .abci.RequestBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.begin_block_);
      break;
    }
    // optional .abci.RequestCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.check_tx_);
      break;
    }
    // optional .abci.RequestDeliverTx deliver_tx = 19;
    case kDeliverTx: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.deliver_tx_);
      break;
    }
    // optional .abci.RequestEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_block_);
      break;
    }
    // optional .abci.RequestCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.value_case()) {
    case kEcho: {
      mutable_echo()->::abci::RequestEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::abci::RequestFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::abci::RequestInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::abci::RequestSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::abci::RequestInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::abci::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::abci::RequestBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::abci::RequestCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::abci::RequestDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::abci::RequestEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::abci::RequestCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .abci.RequestEcho echo = 2;
bool Request::has_echo() const {
  return value_case() == kEcho;
}
void Request::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
void Request::clear_echo() {
  if (has_echo()) {
    delete value_.echo_;
    clear_has_value();
  }
}
 const ::abci::RequestEcho& Request::echo() const {
  // @@protoc_insertion_point(field_get:abci.Request.echo)
  return has_echo()
      ? *value_.echo_
      : ::abci::RequestEcho::default_instance();
}
::abci::RequestEcho* Request::mutable_echo() {
  if (!has_echo()) {
    clear_value();
    set_has_echo();
    value_.echo_ = new ::abci::RequestEcho;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.echo)
  return value_.echo_;
}
::abci::RequestEcho* Request::release_echo() {
  // @@protoc_insertion_point(field_release:abci.Request.echo)
  if (has_echo()) {
    clear_has_value();
    ::abci::RequestEcho* temp = value_.echo_;
    value_.echo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_echo(::abci::RequestEcho* echo) {
  clear_value();
  if (echo) {
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.echo)
}

// optional .abci.RequestFlush flush = 3;
bool Request::has_flush() const {
  return value_case() == kFlush;
}
void Request::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
void Request::clear_flush() {
  if (has_flush()) {
    delete value_.flush_;
    clear_has_value();
  }
}
 const ::abci::RequestFlush& Request::flush() const {
  // @@protoc_insertion_point(field_get:abci.Request.flush)
  return has_flush()
      ? *value_.flush_
      : ::abci::RequestFlush::default_instance();
}
::abci::RequestFlush* Request::mutable_flush() {
  if (!has_flush()) {
    clear_value();
    set_has_flush();
    value_.flush_ = new ::abci::RequestFlush;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.flush)
  return value_.flush_;
}
::abci::RequestFlush* Request::release_flush() {
  // @@protoc_insertion_point(field_release:abci.Request.flush)
  if (has_flush()) {
    clear_has_value();
    ::abci::RequestFlush* temp = value_.flush_;
    value_.flush_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_flush(::abci::RequestFlush* flush) {
  clear_value();
  if (flush) {
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.flush)
}

// optional .abci.RequestInfo info = 4;
bool Request::has_info() const {
  return value_case() == kInfo;
}
void Request::set_has_info() {
  _oneof_case_[0] = kInfo;
}
void Request::clear_info() {
  if (has_info()) {
    delete value_.info_;
    clear_has_value();
  }
}
 const ::abci::RequestInfo& Request::info() const {
  // @@protoc_insertion_point(field_get:abci.Request.info)
  return has_info()
      ? *value_.info_
      : ::abci::RequestInfo::default_instance();
}
::abci::RequestInfo* Request::mutable_info() {
  if (!has_info()) {
    clear_value();
    set_has_info();
    value_.info_ = new ::abci::RequestInfo;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.info)
  return value_.info_;
}
::abci::RequestInfo* Request::release_info() {
  // @@protoc_insertion_point(field_release:abci.Request.info)
  if (has_info()) {
    clear_has_value();
    ::abci::RequestInfo* temp = value_.info_;
    value_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_info(::abci::RequestInfo* info) {
  clear_value();
  if (info) {
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.info)
}

// optional .abci.RequestSetOption set_option = 5;
bool Request::has_set_option() const {
  return value_case() == kSetOption;
}
void Request::set_has_set_option() {
  _oneof_case_[0] = kSetOption;
}
void Request::clear_set_option() {
  if (has_set_option()) {
    delete value_.set_option_;
    clear_has_value();
  }
}
 const ::abci::RequestSetOption& Request::set_option() const {
  // @@protoc_insertion_point(field_get:abci.Request.set_option)
  return has_set_option()
      ? *value_.set_option_
      : ::abci::RequestSetOption::default_instance();
}
::abci::RequestSetOption* Request::mutable_set_option() {
  if (!has_set_option()) {
    clear_value();
    set_has_set_option();
    value_.set_option_ = new ::abci::RequestSetOption;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.set_option)
  return value_.set_option_;
}
::abci::RequestSetOption* Request::release_set_option() {
  // @@protoc_insertion_point(field_release:abci.Request.set_option)
  if (has_set_option()) {
    clear_has_value();
    ::abci::RequestSetOption* temp = value_.set_option_;
    value_.set_option_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_set_option(::abci::RequestSetOption* set_option) {
  clear_value();
  if (set_option) {
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.set_option)
}

// optional .abci.RequestInitChain init_chain = 6;
bool Request::has_init_chain() const {
  return value_case() == kInitChain;
}
void Request::set_has_init_chain() {
  _oneof_case_[0] = kInitChain;
}
void Request::clear_init_chain() {
  if (has_init_chain()) {
    delete value_.init_chain_;
    clear_has_value();
  }
}
 const ::abci::RequestInitChain& Request::init_chain() const {
  // @@protoc_insertion_point(field_get:abci.Request.init_chain)
  return has_init_chain()
      ? *value_.init_chain_
      : ::abci::RequestInitChain::default_instance();
}
::abci::RequestInitChain* Request::mutable_init_chain() {
  if (!has_init_chain()) {
    clear_value();
    set_has_init_chain();
    value_.init_chain_ = new ::abci::RequestInitChain;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.init_chain)
  return value_.init_chain_;
}
::abci::RequestInitChain* Request::release_init_chain() {
  // @@protoc_insertion_point(field_release:abci.Request.init_chain)
  if (has_init_chain()) {
    clear_has_value();
    ::abci::RequestInitChain* temp = value_.init_chain_;
    value_.init_chain_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_init_chain(::abci::RequestInitChain* init_chain) {
  clear_value();
  if (init_chain) {
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.init_chain)
}

// optional .abci.RequestQuery query = 7;
bool Request::has_query() const {
  return value_case() == kQuery;
}
void Request::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void Request::clear_query() {
  if (has_query()) {
    delete value_.query_;
    clear_has_value();
  }
}
 const ::abci::RequestQuery& Request::query() const {
  // @@protoc_insertion_point(field_get:abci.Request.query)
  return has_query()
      ? *value_.query_
      : ::abci::RequestQuery::default_instance();
}
::abci::RequestQuery* Request::mutable_query() {
  if (!has_query()) {
    clear_value();
    set_has_query();
    value_.query_ = new ::abci::RequestQuery;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.query)
  return value_.query_;
}
::abci::RequestQuery* Request::release_query() {
  // @@protoc_insertion_point(field_release:abci.Request.query)
  if (has_query()) {
    clear_has_value();
    ::abci::RequestQuery* temp = value_.query_;
    value_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_query(::abci::RequestQuery* query) {
  clear_value();
  if (query) {
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.query)
}

// optional .abci.RequestBeginBlock begin_block = 8;
bool Request::has_begin_block() const {
  return value_case() == kBeginBlock;
}
void Request::set_has_begin_block() {
  _oneof_case_[0] = kBeginBlock;
}
void Request::clear_begin_block() {
  if (has_begin_block()) {
    delete value_.begin_block_;
    clear_has_value();
  }
}
 const ::abci::RequestBeginBlock& Request::begin_block() const {
  // @@protoc_insertion_point(field_get:abci.Request.begin_block)
  return has_begin_block()
      ? *value_.begin_block_
      : ::abci::RequestBeginBlock::default_instance();
}
::abci::RequestBeginBlock* Request::mutable_begin_block() {
  if (!has_begin_block()) {
    clear_value();
    set_has_begin_block();
    value_.begin_block_ = new ::abci::RequestBeginBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.begin_block)
  return value_.begin_block_;
}
::abci::RequestBeginBlock* Request::release_begin_block() {
  // @@protoc_insertion_point(field_release:abci.Request.begin_block)
  if (has_begin_block()) {
    clear_has_value();
    ::abci::RequestBeginBlock* temp = value_.begin_block_;
    value_.begin_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_begin_block(::abci::RequestBeginBlock* begin_block) {
  clear_value();
  if (begin_block) {
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.begin_block)
}

// optional .abci.RequestCheckTx check_tx = 9;
bool Request::has_check_tx() const {
  return value_case() == kCheckTx;
}
void Request::set_has_check_tx() {
  _oneof_case_[0] = kCheckTx;
}
void Request::clear_check_tx() {
  if (has_check_tx()) {
    delete value_.check_tx_;
    clear_has_value();
  }
}
 const ::abci::RequestCheckTx& Request::check_tx() const {
  // @@protoc_insertion_point(field_get:abci.Request.check_tx)
  return has_check_tx()
      ? *value_.check_tx_
      : ::abci::RequestCheckTx::default_instance();
}
::abci::RequestCheckTx* Request::mutable_check_tx() {
  if (!has_check_tx()) {
    clear_value();
    set_has_check_tx();
    value_.check_tx_ = new ::abci::RequestCheckTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.check_tx)
  return value_.check_tx_;
}
::abci::RequestCheckTx* Request::release_check_tx() {
  // @@protoc_insertion_point(field_release:abci.Request.check_tx)
  if (has_check_tx()) {
    clear_has_value();
    ::abci::RequestCheckTx* temp = value_.check_tx_;
    value_.check_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_check_tx(::abci::RequestCheckTx* check_tx) {
  clear_value();
  if (check_tx) {
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.check_tx)
}

// optional .abci.RequestDeliverTx deliver_tx = 19;
bool Request::has_deliver_tx() const {
  return value_case() == kDeliverTx;
}
void Request::set_has_deliver_tx() {
  _oneof_case_[0] = kDeliverTx;
}
void Request::clear_deliver_tx() {
  if (has_deliver_tx()) {
    delete value_.deliver_tx_;
    clear_has_value();
  }
}
 const ::abci::RequestDeliverTx& Request::deliver_tx() const {
  // @@protoc_insertion_point(field_get:abci.Request.deliver_tx)
  return has_deliver_tx()
      ? *value_.deliver_tx_
      : ::abci::RequestDeliverTx::default_instance();
}
::abci::RequestDeliverTx* Request::mutable_deliver_tx() {
  if (!has_deliver_tx()) {
    clear_value();
    set_has_deliver_tx();
    value_.deliver_tx_ = new ::abci::RequestDeliverTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.deliver_tx)
  return value_.deliver_tx_;
}
::abci::RequestDeliverTx* Request::release_deliver_tx() {
  // @@protoc_insertion_point(field_release:abci.Request.deliver_tx)
  if (has_deliver_tx()) {
    clear_has_value();
    ::abci::RequestDeliverTx* temp = value_.deliver_tx_;
    value_.deliver_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_deliver_tx(::abci::RequestDeliverTx* deliver_tx) {
  clear_value();
  if (deliver_tx) {
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.deliver_tx)
}

// optional .abci.RequestEndBlock end_block = 11;
bool Request::has_end_block() const {
  return value_case() == kEndBlock;
}
void Request::set_has_end_block() {
  _oneof_case_[0] = kEndBlock;
}
void Request::clear_end_block() {
  if (has_end_block()) {
    delete value_.end_block_;
    clear_has_value();
  }
}
 const ::abci::RequestEndBlock& Request::end_block() const {
  // @@protoc_insertion_point(field_get:abci.Request.end_block)
  return has_end_block()
      ? *value_.end_block_
      : ::abci::RequestEndBlock::default_instance();
}
::abci::RequestEndBlock* Request::mutable_end_block() {
  if (!has_end_block()) {
    clear_value();
    set_has_end_block();
    value_.end_block_ = new ::abci::RequestEndBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.end_block)
  return value_.end_block_;
}
::abci::RequestEndBlock* Request::release_end_block() {
  // @@protoc_insertion_point(field_release:abci.Request.end_block)
  if (has_end_block()) {
    clear_has_value();
    ::abci::RequestEndBlock* temp = value_.end_block_;
    value_.end_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_end_block(::abci::RequestEndBlock* end_block) {
  clear_value();
  if (end_block) {
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.end_block)
}

// optional .abci.RequestCommit commit = 12;
bool Request::has_commit() const {
  return value_case() == kCommit;
}
void Request::set_has_commit() {
  _oneof_case_[0] = kCommit;
}
void Request::clear_commit() {
  if (has_commit()) {
    delete value_.commit_;
    clear_has_value();
  }
}
 const ::abci::RequestCommit& Request::commit() const {
  // @@protoc_insertion_point(field_get:abci.Request.commit)
  return has_commit()
      ? *value_.commit_
      : ::abci::RequestCommit::default_instance();
}
::abci::RequestCommit* Request::mutable_commit() {
  if (!has_commit()) {
    clear_value();
    set_has_commit();
    value_.commit_ = new ::abci::RequestCommit;
  }
  // @@protoc_insertion_point(field_mutable:abci.Request.commit)
  return value_.commit_;
}
::abci::RequestCommit* Request::release_commit() {
  // @@protoc_insertion_point(field_release:abci.Request.commit)
  if (has_commit()) {
    clear_has_value();
    ::abci::RequestCommit* temp = value_.commit_;
    value_.commit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_commit(::abci::RequestCommit* commit) {
  clear_value();
  if (commit) {
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.commit)
}

bool Request::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Request::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Request::ValueCase Request::value_case() const {
  return Request::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEcho::RequestEcho()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestEcho)
}

void RequestEcho::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestEcho::RequestEcho(const RequestEcho& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestEcho)
}

void RequestEcho::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestEcho::~RequestEcho() {
  // @@protoc_insertion_point(destructor:abci.RequestEcho)
  SharedDtor();
}

void RequestEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestEcho::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEcho::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEcho_descriptor_;
}

const RequestEcho& RequestEcho::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestEcho* RequestEcho::default_instance_ = NULL;

RequestEcho* RequestEcho::New(::google::protobuf::Arena* arena) const {
  RequestEcho* n = new RequestEcho;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestEcho)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestEcho)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestEcho.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestEcho)
  return false;
#undef DO_
}

void RequestEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestEcho)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestEcho)
}

::google::protobuf::uint8* RequestEcho::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestEcho)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestEcho.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestEcho)
  return target;
}

int RequestEcho::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestEcho)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEcho::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestEcho)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestEcho* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEcho>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestEcho)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestEcho)
    MergeFrom(*source);
  }
}

void RequestEcho::MergeFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestEcho)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void RequestEcho::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEcho::CopyFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEcho::IsInitialized() const {

  return true;
}

void RequestEcho::Swap(RequestEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEcho::InternalSwap(RequestEcho* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEcho::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEcho_descriptor_;
  metadata.reflection = RequestEcho_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestEcho

// optional string message = 1;
void RequestEcho::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestEcho::message() const {
  // @@protoc_insertion_point(field_get:abci.RequestEcho.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestEcho::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestEcho.message)
}
 void RequestEcho::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestEcho.message)
}
 void RequestEcho::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestEcho.message)
}
 ::std::string* RequestEcho::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestEcho.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestEcho::release_message() {
  // @@protoc_insertion_point(field_release:abci.RequestEcho.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestEcho::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestEcho.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFlush::RequestFlush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestFlush)
}

void RequestFlush::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestFlush::RequestFlush(const RequestFlush& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestFlush)
}

void RequestFlush::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RequestFlush::~RequestFlush() {
  // @@protoc_insertion_point(destructor:abci.RequestFlush)
  SharedDtor();
}

void RequestFlush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFlush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFlush_descriptor_;
}

const RequestFlush& RequestFlush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestFlush* RequestFlush::default_instance_ = NULL;

RequestFlush* RequestFlush::New(::google::protobuf::Arena* arena) const {
  RequestFlush* n = new RequestFlush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestFlush)
}

bool RequestFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestFlush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestFlush)
  return false;
#undef DO_
}

void RequestFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestFlush)
  // @@protoc_insertion_point(serialize_end:abci.RequestFlush)
}

::google::protobuf::uint8* RequestFlush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestFlush)
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestFlush)
  return target;
}

int RequestFlush::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestFlush)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFlush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestFlush)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestFlush* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestFlush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestFlush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestFlush)
    MergeFrom(*source);
  }
}

void RequestFlush::MergeFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestFlush)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void RequestFlush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFlush::CopyFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFlush::IsInitialized() const {

  return true;
}

void RequestFlush::Swap(RequestFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFlush::InternalSwap(RequestFlush* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestFlush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFlush_descriptor_;
  metadata.reflection = RequestFlush_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestFlush

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInfo::RequestInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestInfo)
}

void RequestInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestInfo::RequestInfo(const RequestInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestInfo)
}

void RequestInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:abci.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestInfo_descriptor_;
}

const RequestInfo& RequestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestInfo* RequestInfo::default_instance_ = NULL;

RequestInfo* RequestInfo::New(::google::protobuf::Arena* arena) const {
  RequestInfo* n = new RequestInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestInfo)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestInfo.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestInfo)
  return false;
#undef DO_
}

void RequestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestInfo)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestInfo)
}

::google::protobuf::uint8* RequestInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestInfo)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestInfo)
  return target;
}

int RequestInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestInfo)
  int total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestInfo)
    MergeFrom(*source);
  }
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void RequestInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {

  return true;
}

void RequestInfo::Swap(RequestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInfo::InternalSwap(RequestInfo* other) {
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestInfo_descriptor_;
  metadata.reflection = RequestInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestInfo

// optional string version = 1;
void RequestInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestInfo::version() const {
  // @@protoc_insertion_point(field_get:abci.RequestInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestInfo.version)
}
 void RequestInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestInfo.version)
}
 void RequestInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestInfo.version)
}
 ::std::string* RequestInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestInfo::release_version() {
  // @@protoc_insertion_point(field_release:abci.RequestInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestInfo.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetOption::kKeyFieldNumber;
const int RequestSetOption::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetOption::RequestSetOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestSetOption)
}

void RequestSetOption::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestSetOption::RequestSetOption(const RequestSetOption& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestSetOption)
}

void RequestSetOption::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestSetOption::~RequestSetOption() {
  // @@protoc_insertion_point(destructor:abci.RequestSetOption)
  SharedDtor();
}

void RequestSetOption::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestSetOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSetOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSetOption_descriptor_;
}

const RequestSetOption& RequestSetOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestSetOption* RequestSetOption::default_instance_ = NULL;

RequestSetOption* RequestSetOption::New(::google::protobuf::Arena* arena) const {
  RequestSetOption* n = new RequestSetOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestSetOption)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestSetOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestSetOption.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestSetOption.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestSetOption)
  return false;
#undef DO_
}

void RequestSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestSetOption)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestSetOption)
}

::google::protobuf::uint8* RequestSetOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestSetOption)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestSetOption)
  return target;
}

int RequestSetOption::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestSetOption)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestSetOption)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestSetOption* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSetOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestSetOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestSetOption)
    MergeFrom(*source);
  }
}

void RequestSetOption::MergeFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestSetOption)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RequestSetOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetOption::CopyFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetOption::IsInitialized() const {

  return true;
}

void RequestSetOption::Swap(RequestSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetOption::InternalSwap(RequestSetOption* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSetOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSetOption_descriptor_;
  metadata.reflection = RequestSetOption_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestSetOption

// optional string key = 1;
void RequestSetOption::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestSetOption::key() const {
  // @@protoc_insertion_point(field_get:abci.RequestSetOption.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSetOption::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestSetOption.key)
}
 void RequestSetOption::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestSetOption.key)
}
 void RequestSetOption::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestSetOption.key)
}
 ::std::string* RequestSetOption::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestSetOption.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestSetOption::release_key() {
  // @@protoc_insertion_point(field_release:abci.RequestSetOption.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSetOption::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestSetOption.key)
}

// optional string value = 2;
void RequestSetOption::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestSetOption::value() const {
  // @@protoc_insertion_point(field_get:abci.RequestSetOption.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSetOption::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestSetOption.value)
}
 void RequestSetOption::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestSetOption.value)
}
 void RequestSetOption::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestSetOption.value)
}
 ::std::string* RequestSetOption::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestSetOption.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestSetOption::release_value() {
  // @@protoc_insertion_point(field_release:abci.RequestSetOption.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSetOption::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestSetOption.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInitChain::kValidatorsFieldNumber;
const int RequestInitChain::kAppStateBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInitChain::RequestInitChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestInitChain)
}

void RequestInitChain::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestInitChain)
}

void RequestInitChain::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_state_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:abci.RequestInitChain)
  SharedDtor();
}

void RequestInitChain::SharedDtor() {
  app_state_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestInitChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInitChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestInitChain_descriptor_;
}

const RequestInitChain& RequestInitChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestInitChain* RequestInitChain::default_instance_ = NULL;

RequestInitChain* RequestInitChain::New(::google::protobuf::Arena* arena) const {
  RequestInitChain* n = new RequestInitChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestInitChain)
  app_state_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_.Clear();
}

bool RequestInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestInitChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .abci.Validator validators = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_validators:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_validators()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_validators;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_app_state_bytes;
        break;
      }

      // optional bytes app_state_bytes = 2;
      case 2: {
        if (tag == 18) {
         parse_app_state_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_state_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestInitChain)
  return false;
#undef DO_
}

void RequestInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestInitChain)
  // repeated .abci.Validator validators = 1;
  for (unsigned int i = 0, n = this->validators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->validators(i), output);
  }

  // optional bytes app_state_bytes = 2;
  if (this->app_state_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->app_state_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestInitChain)
}

::google::protobuf::uint8* RequestInitChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestInitChain)
  // repeated .abci.Validator validators = 1;
  for (unsigned int i = 0, n = this->validators_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->validators(i), false, target);
  }

  // optional bytes app_state_bytes = 2;
  if (this->app_state_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->app_state_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestInitChain)
  return target;
}

int RequestInitChain::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestInitChain)
  int total_size = 0;

  // optional bytes app_state_bytes = 2;
  if (this->app_state_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_state_bytes());
  }

  // repeated .abci.Validator validators = 1;
  total_size += 1 * this->validators_size();
  for (int i = 0; i < this->validators_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->validators(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInitChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestInitChain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestInitChain* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInitChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestInitChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestInitChain)
    MergeFrom(*source);
  }
}

void RequestInitChain::MergeFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestInitChain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  validators_.MergeFrom(from.validators_);
  if (from.app_state_bytes().size() > 0) {

    app_state_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_state_bytes_);
  }
}

void RequestInitChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {

  return true;
}

void RequestInitChain::Swap(RequestInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInitChain::InternalSwap(RequestInitChain* other) {
  validators_.UnsafeArenaSwap(&other->validators_);
  app_state_bytes_.Swap(&other->app_state_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInitChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestInitChain_descriptor_;
  metadata.reflection = RequestInitChain_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestInitChain

// repeated .abci.Validator validators = 1;
int RequestInitChain::validators_size() const {
  return validators_.size();
}
void RequestInitChain::clear_validators() {
  validators_.Clear();
}
const ::abci::Validator& RequestInitChain::validators(int index) const {
  // @@protoc_insertion_point(field_get:abci.RequestInitChain.validators)
  return validators_.Get(index);
}
::abci::Validator* RequestInitChain::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:abci.RequestInitChain.validators)
  return validators_.Mutable(index);
}
::abci::Validator* RequestInitChain::add_validators() {
  // @@protoc_insertion_point(field_add:abci.RequestInitChain.validators)
  return validators_.Add();
}
::google::protobuf::RepeatedPtrField< ::abci::Validator >*
RequestInitChain::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:abci.RequestInitChain.validators)
  return &validators_;
}
const ::google::protobuf::RepeatedPtrField< ::abci::Validator >&
RequestInitChain::validators() const {
  // @@protoc_insertion_point(field_list:abci.RequestInitChain.validators)
  return validators_;
}

// optional bytes app_state_bytes = 2;
void RequestInitChain::clear_app_state_bytes() {
  app_state_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestInitChain::app_state_bytes() const {
  // @@protoc_insertion_point(field_get:abci.RequestInitChain.app_state_bytes)
  return app_state_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestInitChain::set_app_state_bytes(const ::std::string& value) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestInitChain.app_state_bytes)
}
 void RequestInitChain::set_app_state_bytes(const char* value) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestInitChain.app_state_bytes)
}
 void RequestInitChain::set_app_state_bytes(const void* value, size_t size) {
  
  app_state_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestInitChain.app_state_bytes)
}
 ::std::string* RequestInitChain::mutable_app_state_bytes() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestInitChain.app_state_bytes)
  return app_state_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestInitChain::release_app_state_bytes() {
  // @@protoc_insertion_point(field_release:abci.RequestInitChain.app_state_bytes)
  
  return app_state_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestInitChain::set_allocated_app_state_bytes(::std::string* app_state_bytes) {
  if (app_state_bytes != NULL) {
    
  } else {
    
  }
  app_state_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_state_bytes);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestInitChain.app_state_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQuery::kDataFieldNumber;
const int RequestQuery::kPathFieldNumber;
const int RequestQuery::kHeightFieldNumber;
const int RequestQuery::kProveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuery::RequestQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestQuery)
}

void RequestQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestQuery::RequestQuery(const RequestQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestQuery)
}

void RequestQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_LONGLONG(0);
  prove_ = false;
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:abci.RequestQuery)
  SharedDtor();
}

void RequestQuery::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQuery_descriptor_;
}

const RequestQuery& RequestQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestQuery* RequestQuery::default_instance_ = NULL;

RequestQuery* RequestQuery::New(::google::protobuf::Arena* arena) const {
  RequestQuery* n = new RequestQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestQuery)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestQuery, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestQuery*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(height_, prove_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RequestQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestQuery.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int64 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prove;
        break;
      }

      // optional bool prove = 4;
      case 4: {
        if (tag == 32) {
         parse_prove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prove_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestQuery)
  return false;
#undef DO_
}

void RequestQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestQuery)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestQuery.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // optional bool prove = 4;
  if (this->prove() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prove(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestQuery)
}

::google::protobuf::uint8* RequestQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestQuery)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestQuery.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional int64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->height(), target);
  }

  // optional bool prove = 4;
  if (this->prove() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prove(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestQuery)
  return target;
}

int RequestQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestQuery)
  int total_size = 0;

  // optional bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // optional bool prove = 4;
  if (this->prove() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestQuery)
    MergeFrom(*source);
  }
}

void RequestQuery::MergeFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.prove() != 0) {
    set_prove(from.prove());
  }
}

void RequestQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {

  return true;
}

void RequestQuery::Swap(RequestQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuery::InternalSwap(RequestQuery* other) {
  data_.Swap(&other->data_);
  path_.Swap(&other->path_);
  std::swap(height_, other->height_);
  std::swap(prove_, other->prove_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQuery_descriptor_;
  metadata.reflection = RequestQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQuery

// optional bytes data = 1;
void RequestQuery::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestQuery::data() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestQuery::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestQuery.data)
}
 void RequestQuery::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestQuery.data)
}
 void RequestQuery::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestQuery.data)
}
 ::std::string* RequestQuery::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestQuery.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestQuery::release_data() {
  // @@protoc_insertion_point(field_release:abci.RequestQuery.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestQuery::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestQuery.data)
}

// optional string path = 2;
void RequestQuery::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestQuery::path() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestQuery::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestQuery.path)
}
 void RequestQuery::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestQuery.path)
}
 void RequestQuery::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestQuery.path)
}
 ::std::string* RequestQuery::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestQuery.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestQuery::release_path() {
  // @@protoc_insertion_point(field_release:abci.RequestQuery.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestQuery::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestQuery.path)
}

// optional int64 height = 3;
void RequestQuery::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RequestQuery::height() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.height)
  return height_;
}
 void RequestQuery::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.RequestQuery.height)
}

// optional bool prove = 4;
void RequestQuery::clear_prove() {
  prove_ = false;
}
 bool RequestQuery::prove() const {
  // @@protoc_insertion_point(field_get:abci.RequestQuery.prove)
  return prove_;
}
 void RequestQuery::set_prove(bool value) {
  
  prove_ = value;
  // @@protoc_insertion_point(field_set:abci.RequestQuery.prove)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBeginBlock::kHashFieldNumber;
const int RequestBeginBlock::kHeaderFieldNumber;
const int RequestBeginBlock::kAbsentValidatorsFieldNumber;
const int RequestBeginBlock::kByzantineValidatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBeginBlock::RequestBeginBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestBeginBlock)
}

void RequestBeginBlock::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::abci::Header*>(&::abci::Header::default_instance());
}

RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestBeginBlock)
}

void RequestBeginBlock::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:abci.RequestBeginBlock)
  SharedDtor();
}

void RequestBeginBlock::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void RequestBeginBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBeginBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBeginBlock_descriptor_;
}

const RequestBeginBlock& RequestBeginBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestBeginBlock* RequestBeginBlock::default_instance_ = NULL;

RequestBeginBlock* RequestBeginBlock::New(::google::protobuf::Arena* arena) const {
  RequestBeginBlock* n = new RequestBeginBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestBeginBlock)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  absent_validators_.Clear();
  byzantine_validators_.Clear();
}

bool RequestBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestBeginBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .abci.Header header = 2;
      case 2: {
        if (tag == 18) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_absent_validators;
        break;
      }

      // repeated int32 absent_validators = 3;
      case 3: {
        if (tag == 26) {
         parse_absent_validators:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_absent_validators())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_absent_validators())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_byzantine_validators;
        break;
      }

      // repeated .abci.Evidence byzantine_validators = 4;
      case 4: {
        if (tag == 34) {
         parse_byzantine_validators:
          DO_(input->IncrementRecursionDepth());
         parse_loop_byzantine_validators:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_byzantine_validators()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_byzantine_validators;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestBeginBlock)
  return false;
#undef DO_
}

void RequestBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestBeginBlock)
  // optional bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // optional .abci.Header header = 2;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // repeated int32 absent_validators = 3;
  if (this->absent_validators_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_absent_validators_cached_byte_size_);
  }
  for (int i = 0; i < this->absent_validators_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->absent_validators(i), output);
  }

  // repeated .abci.Evidence byzantine_validators = 4;
  for (unsigned int i = 0, n = this->byzantine_validators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->byzantine_validators(i), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestBeginBlock)
}

::google::protobuf::uint8* RequestBeginBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestBeginBlock)
  // optional bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // optional .abci.Header header = 2;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, false, target);
  }

  // repeated int32 absent_validators = 3;
  if (this->absent_validators_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _absent_validators_cached_byte_size_, target);
  }
  for (int i = 0; i < this->absent_validators_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->absent_validators(i), target);
  }

  // repeated .abci.Evidence byzantine_validators = 4;
  for (unsigned int i = 0, n = this->byzantine_validators_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->byzantine_validators(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestBeginBlock)
  return target;
}

int RequestBeginBlock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestBeginBlock)
  int total_size = 0;

  // optional bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // optional .abci.Header header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated int32 absent_validators = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->absent_validators_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->absent_validators(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _absent_validators_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .abci.Evidence byzantine_validators = 4;
  total_size += 1 * this->byzantine_validators_size();
  for (int i = 0; i < this->byzantine_validators_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->byzantine_validators(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBeginBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestBeginBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestBeginBlock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBeginBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestBeginBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestBeginBlock)
    MergeFrom(*source);
  }
}

void RequestBeginBlock::MergeFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestBeginBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  absent_validators_.MergeFrom(from.absent_validators_);
  byzantine_validators_.MergeFrom(from.byzantine_validators_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_header()) {
    mutable_header()->::abci::Header::MergeFrom(from.header());
  }
}

void RequestBeginBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {

  return true;
}

void RequestBeginBlock::Swap(RequestBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  hash_.Swap(&other->hash_);
  std::swap(header_, other->header_);
  absent_validators_.UnsafeArenaSwap(&other->absent_validators_);
  byzantine_validators_.UnsafeArenaSwap(&other->byzantine_validators_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestBeginBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBeginBlock_descriptor_;
  metadata.reflection = RequestBeginBlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestBeginBlock

// optional bytes hash = 1;
void RequestBeginBlock::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestBeginBlock::hash() const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBeginBlock::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestBeginBlock.hash)
}
 void RequestBeginBlock::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestBeginBlock.hash)
}
 void RequestBeginBlock::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestBeginBlock.hash)
}
 ::std::string* RequestBeginBlock::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestBeginBlock.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestBeginBlock::release_hash() {
  // @@protoc_insertion_point(field_release:abci.RequestBeginBlock.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestBeginBlock::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestBeginBlock.hash)
}

// optional .abci.Header header = 2;
bool RequestBeginBlock::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void RequestBeginBlock::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::abci::Header& RequestBeginBlock::header() const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::abci::Header* RequestBeginBlock::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::abci::Header;
  }
  // @@protoc_insertion_point(field_mutable:abci.RequestBeginBlock.header)
  return header_;
}
::abci::Header* RequestBeginBlock::release_header() {
  // @@protoc_insertion_point(field_release:abci.RequestBeginBlock.header)
  
  ::abci::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RequestBeginBlock::set_allocated_header(::abci::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.RequestBeginBlock.header)
}

// repeated int32 absent_validators = 3;
int RequestBeginBlock::absent_validators_size() const {
  return absent_validators_.size();
}
void RequestBeginBlock::clear_absent_validators() {
  absent_validators_.Clear();
}
 ::google::protobuf::int32 RequestBeginBlock::absent_validators(int index) const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.absent_validators)
  return absent_validators_.Get(index);
}
 void RequestBeginBlock::set_absent_validators(int index, ::google::protobuf::int32 value) {
  absent_validators_.Set(index, value);
  // @@protoc_insertion_point(field_set:abci.RequestBeginBlock.absent_validators)
}
 void RequestBeginBlock::add_absent_validators(::google::protobuf::int32 value) {
  absent_validators_.Add(value);
  // @@protoc_insertion_point(field_add:abci.RequestBeginBlock.absent_validators)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RequestBeginBlock::absent_validators() const {
  // @@protoc_insertion_point(field_list:abci.RequestBeginBlock.absent_validators)
  return absent_validators_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RequestBeginBlock::mutable_absent_validators() {
  // @@protoc_insertion_point(field_mutable_list:abci.RequestBeginBlock.absent_validators)
  return &absent_validators_;
}

// repeated .abci.Evidence byzantine_validators = 4;
int RequestBeginBlock::byzantine_validators_size() const {
  return byzantine_validators_.size();
}
void RequestBeginBlock::clear_byzantine_validators() {
  byzantine_validators_.Clear();
}
const ::abci::Evidence& RequestBeginBlock::byzantine_validators(int index) const {
  // @@protoc_insertion_point(field_get:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Get(index);
}
::abci::Evidence* RequestBeginBlock::mutable_byzantine_validators(int index) {
  // @@protoc_insertion_point(field_mutable:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Mutable(index);
}
::abci::Evidence* RequestBeginBlock::add_byzantine_validators() {
  // @@protoc_insertion_point(field_add:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_.Add();
}
::google::protobuf::RepeatedPtrField< ::abci::Evidence >*
RequestBeginBlock::mutable_byzantine_validators() {
  // @@protoc_insertion_point(field_mutable_list:abci.RequestBeginBlock.byzantine_validators)
  return &byzantine_validators_;
}
const ::google::protobuf::RepeatedPtrField< ::abci::Evidence >&
RequestBeginBlock::byzantine_validators() const {
  // @@protoc_insertion_point(field_list:abci.RequestBeginBlock.byzantine_validators)
  return byzantine_validators_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCheckTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCheckTx::RequestCheckTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestCheckTx)
}

void RequestCheckTx::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestCheckTx::RequestCheckTx(const RequestCheckTx& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestCheckTx)
}

void RequestCheckTx::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestCheckTx::~RequestCheckTx() {
  // @@protoc_insertion_point(destructor:abci.RequestCheckTx)
  SharedDtor();
}

void RequestCheckTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestCheckTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCheckTx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCheckTx_descriptor_;
}

const RequestCheckTx& RequestCheckTx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestCheckTx* RequestCheckTx::default_instance_ = NULL;

RequestCheckTx* RequestCheckTx::New(::google::protobuf::Arena* arena) const {
  RequestCheckTx* n = new RequestCheckTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestCheckTx)
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestCheckTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes tx = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestCheckTx)
  return false;
#undef DO_
}

void RequestCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestCheckTx)
  // optional bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestCheckTx)
}

::google::protobuf::uint8* RequestCheckTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestCheckTx)
  // optional bytes tx = 1;
  if (this->tx().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestCheckTx)
  return target;
}

int RequestCheckTx::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestCheckTx)
  int total_size = 0;

  // optional bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheckTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestCheckTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestCheckTx* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCheckTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestCheckTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestCheckTx)
    MergeFrom(*source);
  }
}

void RequestCheckTx::MergeFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestCheckTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestCheckTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCheckTx::CopyFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckTx::IsInitialized() const {

  return true;
}

void RequestCheckTx::Swap(RequestCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCheckTx::InternalSwap(RequestCheckTx* other) {
  tx_.Swap(&other->tx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCheckTx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCheckTx_descriptor_;
  metadata.reflection = RequestCheckTx_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestCheckTx

// optional bytes tx = 1;
void RequestCheckTx::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestCheckTx::tx() const {
  // @@protoc_insertion_point(field_get:abci.RequestCheckTx.tx)
  return tx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestCheckTx::set_tx(const ::std::string& value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestCheckTx.tx)
}
 void RequestCheckTx::set_tx(const char* value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestCheckTx.tx)
}
 void RequestCheckTx::set_tx(const void* value, size_t size) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestCheckTx.tx)
}
 ::std::string* RequestCheckTx::mutable_tx() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestCheckTx.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestCheckTx::release_tx() {
  // @@protoc_insertion_point(field_release:abci.RequestCheckTx.tx)
  
  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestCheckTx::set_allocated_tx(::std::string* tx) {
  if (tx != NULL) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestCheckTx.tx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDeliverTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDeliverTx::RequestDeliverTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestDeliverTx)
}

void RequestDeliverTx::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestDeliverTx)
}

void RequestDeliverTx::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:abci.RequestDeliverTx)
  SharedDtor();
}

void RequestDeliverTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestDeliverTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDeliverTx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDeliverTx_descriptor_;
}

const RequestDeliverTx& RequestDeliverTx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestDeliverTx* RequestDeliverTx::default_instance_ = NULL;

RequestDeliverTx* RequestDeliverTx::New(::google::protobuf::Arena* arena) const {
  RequestDeliverTx* n = new RequestDeliverTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestDeliverTx)
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestDeliverTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes tx = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestDeliverTx)
  return false;
#undef DO_
}

void RequestDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestDeliverTx)
  // optional bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestDeliverTx)
}

::google::protobuf::uint8* RequestDeliverTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestDeliverTx)
  // optional bytes tx = 1;
  if (this->tx().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestDeliverTx)
  return target;
}

int RequestDeliverTx::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestDeliverTx)
  int total_size = 0;

  // optional bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDeliverTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestDeliverTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestDeliverTx* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDeliverTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestDeliverTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestDeliverTx)
    MergeFrom(*source);
  }
}

void RequestDeliverTx::MergeFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestDeliverTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestDeliverTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {

  return true;
}

void RequestDeliverTx::Swap(RequestDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  tx_.Swap(&other->tx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestDeliverTx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDeliverTx_descriptor_;
  metadata.reflection = RequestDeliverTx_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestDeliverTx

// optional bytes tx = 1;
void RequestDeliverTx::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestDeliverTx::tx() const {
  // @@protoc_insertion_point(field_get:abci.RequestDeliverTx.tx)
  return tx_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestDeliverTx::set_tx(const ::std::string& value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.RequestDeliverTx.tx)
}
 void RequestDeliverTx::set_tx(const char* value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.RequestDeliverTx.tx)
}
 void RequestDeliverTx::set_tx(const void* value, size_t size) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.RequestDeliverTx.tx)
}
 ::std::string* RequestDeliverTx::mutable_tx() {
  
  // @@protoc_insertion_point(field_mutable:abci.RequestDeliverTx.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestDeliverTx::release_tx() {
  // @@protoc_insertion_point(field_release:abci.RequestDeliverTx.tx)
  
  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestDeliverTx::set_allocated_tx(::std::string* tx) {
  if (tx != NULL) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:abci.RequestDeliverTx.tx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEndBlock::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEndBlock::RequestEndBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestEndBlock)
}

void RequestEndBlock::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestEndBlock::RequestEndBlock(const RequestEndBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestEndBlock)
}

void RequestEndBlock::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  height_ = GOOGLE_LONGLONG(0);
}

RequestEndBlock::~RequestEndBlock() {
  // @@protoc_insertion_point(destructor:abci.RequestEndBlock)
  SharedDtor();
}

void RequestEndBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestEndBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEndBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEndBlock_descriptor_;
}

const RequestEndBlock& RequestEndBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestEndBlock* RequestEndBlock::default_instance_ = NULL;

RequestEndBlock* RequestEndBlock::New(::google::protobuf::Arena* arena) const {
  RequestEndBlock* n = new RequestEndBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestEndBlock)
  height_ = GOOGLE_LONGLONG(0);
}

bool RequestEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestEndBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 height = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestEndBlock)
  return false;
#undef DO_
}

void RequestEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestEndBlock)
  // optional int64 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.RequestEndBlock)
}

::google::protobuf::uint8* RequestEndBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestEndBlock)
  // optional int64 height = 1;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestEndBlock)
  return target;
}

int RequestEndBlock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestEndBlock)
  int total_size = 0;

  // optional int64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEndBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestEndBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestEndBlock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEndBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestEndBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestEndBlock)
    MergeFrom(*source);
  }
}

void RequestEndBlock::MergeFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestEndBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void RequestEndBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEndBlock::CopyFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEndBlock::IsInitialized() const {

  return true;
}

void RequestEndBlock::Swap(RequestEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEndBlock::InternalSwap(RequestEndBlock* other) {
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEndBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEndBlock_descriptor_;
  metadata.reflection = RequestEndBlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestEndBlock

// optional int64 height = 1;
void RequestEndBlock::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RequestEndBlock::height() const {
  // @@protoc_insertion_point(field_get:abci.RequestEndBlock.height)
  return height_;
}
 void RequestEndBlock::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.RequestEndBlock.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCommit::RequestCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestCommit)
}

void RequestCommit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestCommit::RequestCommit(const RequestCommit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.RequestCommit)
}

void RequestCommit::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RequestCommit::~RequestCommit() {
  // @@protoc_insertion_point(destructor:abci.RequestCommit)
  SharedDtor();
}

void RequestCommit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCommit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCommit_descriptor_;
}

const RequestCommit& RequestCommit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

RequestCommit* RequestCommit::default_instance_ = NULL;

RequestCommit* RequestCommit::New(::google::protobuf::Arena* arena) const {
  RequestCommit* n = new RequestCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestCommit)
}

bool RequestCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestCommit)
  return false;
#undef DO_
}

void RequestCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestCommit)
  // @@protoc_insertion_point(serialize_end:abci.RequestCommit)
}

::google::protobuf::uint8* RequestCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestCommit)
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestCommit)
  return target;
}

int RequestCommit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestCommit)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestCommit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestCommit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestCommit)
    MergeFrom(*source);
  }
}

void RequestCommit::MergeFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestCommit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void RequestCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCommit::CopyFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCommit::IsInitialized() const {

  return true;
}

void RequestCommit::Swap(RequestCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCommit::InternalSwap(RequestCommit* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCommit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCommit_descriptor_;
  metadata.reflection = RequestCommit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestCommit

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kExceptionFieldNumber;
const int Response::kEchoFieldNumber;
const int Response::kFlushFieldNumber;
const int Response::kInfoFieldNumber;
const int Response::kSetOptionFieldNumber;
const int Response::kInitChainFieldNumber;
const int Response::kQueryFieldNumber;
const int Response::kBeginBlockFieldNumber;
const int Response::kCheckTxFieldNumber;
const int Response::kDeliverTxFieldNumber;
const int Response::kEndBlockFieldNumber;
const int Response::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Response_default_oneof_instance_->exception_ = const_cast< ::abci::ResponseException*>(&::abci::ResponseException::default_instance());
  Response_default_oneof_instance_->echo_ = const_cast< ::abci::ResponseEcho*>(&::abci::ResponseEcho::default_instance());
  Response_default_oneof_instance_->flush_ = const_cast< ::abci::ResponseFlush*>(&::abci::ResponseFlush::default_instance());
  Response_default_oneof_instance_->info_ = const_cast< ::abci::ResponseInfo*>(&::abci::ResponseInfo::default_instance());
  Response_default_oneof_instance_->set_option_ = const_cast< ::abci::ResponseSetOption*>(&::abci::ResponseSetOption::default_instance());
  Response_default_oneof_instance_->init_chain_ = const_cast< ::abci::ResponseInitChain*>(&::abci::ResponseInitChain::default_instance());
  Response_default_oneof_instance_->query_ = const_cast< ::abci::ResponseQuery*>(&::abci::ResponseQuery::default_instance());
  Response_default_oneof_instance_->begin_block_ = const_cast< ::abci::ResponseBeginBlock*>(&::abci::ResponseBeginBlock::default_instance());
  Response_default_oneof_instance_->check_tx_ = const_cast< ::abci::ResponseCheckTx*>(&::abci::ResponseCheckTx::default_instance());
  Response_default_oneof_instance_->deliver_tx_ = const_cast< ::abci::ResponseDeliverTx*>(&::abci::ResponseDeliverTx::default_instance());
  Response_default_oneof_instance_->end_block_ = const_cast< ::abci::ResponseEndBlock*>(&::abci::ResponseEndBlock::default_instance());
  Response_default_oneof_instance_->commit_ = const_cast< ::abci::ResponseCommit*>(&::abci::ResponseCommit::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_value();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:abci.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:abci.Response)
  switch(value_case()) {
    case kException: {
      delete value_.exception_;
      break;
    }
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Response)
  clear_value();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abci.ResponseException exception = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_echo;
        break;
      }

      // optional .abci.ResponseEcho echo = 2;
      case 2: {
        if (tag == 18) {
         parse_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_flush;
        break;
      }

      // optional .abci.ResponseFlush flush = 3;
      case 3: {
        if (tag == 26) {
         parse_flush:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .abci.ResponseInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_set_option;
        break;
      }

      // optional .abci.ResponseSetOption set_option = 5;
      case 5: {
        if (tag == 42) {
         parse_set_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_init_chain;
        break;
      }

      // optional .abci.ResponseInitChain init_chain = 6;
      case 6: {
        if (tag == 50) {
         parse_init_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_query;
        break;
      }

      // optional .abci.ResponseQuery query = 7;
      case 7: {
        if (tag == 58) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_begin_block;
        break;
      }

      // optional .abci.ResponseBeginBlock begin_block = 8;
      case 8: {
        if (tag == 66) {
         parse_begin_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_check_tx;
        break;
      }

      // optional .abci.ResponseCheckTx check_tx = 9;
      case 9: {
        if (tag == 74) {
         parse_check_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_deliver_tx;
        break;
      }

      // optional .abci.ResponseDeliverTx deliver_tx = 10;
      case 10: {
        if (tag == 82) {
         parse_deliver_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_end_block;
        break;
      }

      // optional .abci.ResponseEndBlock end_block = 11;
      case 11: {
        if (tag == 90) {
         parse_end_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_commit;
        break;
      }

      // optional .abci.ResponseCommit commit = 12;
      case 12: {
        if (tag == 98) {
         parse_commit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Response)
  // optional .abci.ResponseException exception = 1;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_.exception_, output);
  }

  // optional .abci.ResponseEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.echo_, output);
  }

  // optional .abci.ResponseFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.flush_, output);
  }

  // optional .abci.ResponseInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.info_, output);
  }

  // optional .abci.ResponseSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.set_option_, output);
  }

  // optional .abci.ResponseInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.init_chain_, output);
  }

  // optional .abci.ResponseQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.query_, output);
  }

  // optional .abci.ResponseBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.begin_block_, output);
  }

  // optional .abci.ResponseCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.check_tx_, output);
  }

  // optional .abci.ResponseDeliverTx deliver_tx = 10;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.deliver_tx_, output);
  }

  // optional .abci.ResponseEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.end_block_, output);
  }

  // optional .abci.ResponseCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.commit_, output);
  }

  // @@protoc_insertion_point(serialize_end:abci.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.Response)
  // optional .abci.ResponseException exception = 1;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *value_.exception_, false, target);
  }

  // optional .abci.ResponseEcho echo = 2;
  if (has_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *value_.echo_, false, target);
  }

  // optional .abci.ResponseFlush flush = 3;
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *value_.flush_, false, target);
  }

  // optional .abci.ResponseInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *value_.info_, false, target);
  }

  // optional .abci.ResponseSetOption set_option = 5;
  if (has_set_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *value_.set_option_, false, target);
  }

  // optional .abci.ResponseInitChain init_chain = 6;
  if (has_init_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *value_.init_chain_, false, target);
  }

  // optional .abci.ResponseQuery query = 7;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *value_.query_, false, target);
  }

  // optional .abci.ResponseBeginBlock begin_block = 8;
  if (has_begin_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *value_.begin_block_, false, target);
  }

  // optional .abci.ResponseCheckTx check_tx = 9;
  if (has_check_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *value_.check_tx_, false, target);
  }

  // optional .abci.ResponseDeliverTx deliver_tx = 10;
  if (has_deliver_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *value_.deliver_tx_, false, target);
  }

  // optional .abci.ResponseEndBlock end_block = 11;
  if (has_end_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *value_.end_block_, false, target);
  }

  // optional .abci.ResponseCommit commit = 12;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *value_.commit_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Response)
  int total_size = 0;

  switch (value_case()) {
    // optional .abci.ResponseException exception = 1;
    case kException: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.exception_);
      break;
    }
    // optional .abci.ResponseEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.echo_);
      break;
    }
    // optional .abci.ResponseFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.flush_);
      break;
    }
    // optional .abci.ResponseInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.info_);
      break;
    }
    // optional .abci.ResponseSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.set_option_);
      break;
    }
    // optional .abci.ResponseInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.init_chain_);
      break;
    }
    // optional .abci.ResponseQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.query_);
      break;
    }
    // optional .abci.ResponseBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.begin_block_);
      break;
    }
    // optional .abci.ResponseCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.check_tx_);
      break;
    }
    // optional .abci.ResponseDeliverTx deliver_tx = 10;
    case kDeliverTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.deliver_tx_);
      break;
    }
    // optional .abci.ResponseEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_block_);
      break;
    }
    // optional .abci.ResponseCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.value_case()) {
    case kException: {
      mutable_exception()->::abci::ResponseException::MergeFrom(from.exception());
      break;
    }
    case kEcho: {
      mutable_echo()->::abci::ResponseEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::abci::ResponseFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::abci::ResponseInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::abci::ResponseSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::abci::ResponseInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::abci::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::abci::ResponseBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::abci::ResponseCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::abci::ResponseDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::abci::ResponseEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::abci::ResponseCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .abci.ResponseException exception = 1;
bool Response::has_exception() const {
  return value_case() == kException;
}
void Response::set_has_exception() {
  _oneof_case_[0] = kException;
}
void Response::clear_exception() {
  if (has_exception()) {
    delete value_.exception_;
    clear_has_value();
  }
}
 const ::abci::ResponseException& Response::exception() const {
  // @@protoc_insertion_point(field_get:abci.Response.exception)
  return has_exception()
      ? *value_.exception_
      : ::abci::ResponseException::default_instance();
}
::abci::ResponseException* Response::mutable_exception() {
  if (!has_exception()) {
    clear_value();
    set_has_exception();
    value_.exception_ = new ::abci::ResponseException;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.exception)
  return value_.exception_;
}
::abci::ResponseException* Response::release_exception() {
  // @@protoc_insertion_point(field_release:abci.Response.exception)
  if (has_exception()) {
    clear_has_value();
    ::abci::ResponseException* temp = value_.exception_;
    value_.exception_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_exception(::abci::ResponseException* exception) {
  clear_value();
  if (exception) {
    set_has_exception();
    value_.exception_ = exception;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.exception)
}

// optional .abci.ResponseEcho echo = 2;
bool Response::has_echo() const {
  return value_case() == kEcho;
}
void Response::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
void Response::clear_echo() {
  if (has_echo()) {
    delete value_.echo_;
    clear_has_value();
  }
}
 const ::abci::ResponseEcho& Response::echo() const {
  // @@protoc_insertion_point(field_get:abci.Response.echo)
  return has_echo()
      ? *value_.echo_
      : ::abci::ResponseEcho::default_instance();
}
::abci::ResponseEcho* Response::mutable_echo() {
  if (!has_echo()) {
    clear_value();
    set_has_echo();
    value_.echo_ = new ::abci::ResponseEcho;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.echo)
  return value_.echo_;
}
::abci::ResponseEcho* Response::release_echo() {
  // @@protoc_insertion_point(field_release:abci.Response.echo)
  if (has_echo()) {
    clear_has_value();
    ::abci::ResponseEcho* temp = value_.echo_;
    value_.echo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_echo(::abci::ResponseEcho* echo) {
  clear_value();
  if (echo) {
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.echo)
}

// optional .abci.ResponseFlush flush = 3;
bool Response::has_flush() const {
  return value_case() == kFlush;
}
void Response::set_has_flush() {
  _oneof_case_[0] = kFlush;
}
void Response::clear_flush() {
  if (has_flush()) {
    delete value_.flush_;
    clear_has_value();
  }
}
 const ::abci::ResponseFlush& Response::flush() const {
  // @@protoc_insertion_point(field_get:abci.Response.flush)
  return has_flush()
      ? *value_.flush_
      : ::abci::ResponseFlush::default_instance();
}
::abci::ResponseFlush* Response::mutable_flush() {
  if (!has_flush()) {
    clear_value();
    set_has_flush();
    value_.flush_ = new ::abci::ResponseFlush;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.flush)
  return value_.flush_;
}
::abci::ResponseFlush* Response::release_flush() {
  // @@protoc_insertion_point(field_release:abci.Response.flush)
  if (has_flush()) {
    clear_has_value();
    ::abci::ResponseFlush* temp = value_.flush_;
    value_.flush_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_flush(::abci::ResponseFlush* flush) {
  clear_value();
  if (flush) {
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.flush)
}

// optional .abci.ResponseInfo info = 4;
bool Response::has_info() const {
  return value_case() == kInfo;
}
void Response::set_has_info() {
  _oneof_case_[0] = kInfo;
}
void Response::clear_info() {
  if (has_info()) {
    delete value_.info_;
    clear_has_value();
  }
}
 const ::abci::ResponseInfo& Response::info() const {
  // @@protoc_insertion_point(field_get:abci.Response.info)
  return has_info()
      ? *value_.info_
      : ::abci::ResponseInfo::default_instance();
}
::abci::ResponseInfo* Response::mutable_info() {
  if (!has_info()) {
    clear_value();
    set_has_info();
    value_.info_ = new ::abci::ResponseInfo;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.info)
  return value_.info_;
}
::abci::ResponseInfo* Response::release_info() {
  // @@protoc_insertion_point(field_release:abci.Response.info)
  if (has_info()) {
    clear_has_value();
    ::abci::ResponseInfo* temp = value_.info_;
    value_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_info(::abci::ResponseInfo* info) {
  clear_value();
  if (info) {
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.info)
}

// optional .abci.ResponseSetOption set_option = 5;
bool Response::has_set_option() const {
  return value_case() == kSetOption;
}
void Response::set_has_set_option() {
  _oneof_case_[0] = kSetOption;
}
void Response::clear_set_option() {
  if (has_set_option()) {
    delete value_.set_option_;
    clear_has_value();
  }
}
 const ::abci::ResponseSetOption& Response::set_option() const {
  // @@protoc_insertion_point(field_get:abci.Response.set_option)
  return has_set_option()
      ? *value_.set_option_
      : ::abci::ResponseSetOption::default_instance();
}
::abci::ResponseSetOption* Response::mutable_set_option() {
  if (!has_set_option()) {
    clear_value();
    set_has_set_option();
    value_.set_option_ = new ::abci::ResponseSetOption;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.set_option)
  return value_.set_option_;
}
::abci::ResponseSetOption* Response::release_set_option() {
  // @@protoc_insertion_point(field_release:abci.Response.set_option)
  if (has_set_option()) {
    clear_has_value();
    ::abci::ResponseSetOption* temp = value_.set_option_;
    value_.set_option_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_set_option(::abci::ResponseSetOption* set_option) {
  clear_value();
  if (set_option) {
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.set_option)
}

// optional .abci.ResponseInitChain init_chain = 6;
bool Response::has_init_chain() const {
  return value_case() == kInitChain;
}
void Response::set_has_init_chain() {
  _oneof_case_[0] = kInitChain;
}
void Response::clear_init_chain() {
  if (has_init_chain()) {
    delete value_.init_chain_;
    clear_has_value();
  }
}
 const ::abci::ResponseInitChain& Response::init_chain() const {
  // @@protoc_insertion_point(field_get:abci.Response.init_chain)
  return has_init_chain()
      ? *value_.init_chain_
      : ::abci::ResponseInitChain::default_instance();
}
::abci::ResponseInitChain* Response::mutable_init_chain() {
  if (!has_init_chain()) {
    clear_value();
    set_has_init_chain();
    value_.init_chain_ = new ::abci::ResponseInitChain;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.init_chain)
  return value_.init_chain_;
}
::abci::ResponseInitChain* Response::release_init_chain() {
  // @@protoc_insertion_point(field_release:abci.Response.init_chain)
  if (has_init_chain()) {
    clear_has_value();
    ::abci::ResponseInitChain* temp = value_.init_chain_;
    value_.init_chain_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_init_chain(::abci::ResponseInitChain* init_chain) {
  clear_value();
  if (init_chain) {
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.init_chain)
}

// optional .abci.ResponseQuery query = 7;
bool Response::has_query() const {
  return value_case() == kQuery;
}
void Response::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void Response::clear_query() {
  if (has_query()) {
    delete value_.query_;
    clear_has_value();
  }
}
 const ::abci::ResponseQuery& Response::query() const {
  // @@protoc_insertion_point(field_get:abci.Response.query)
  return has_query()
      ? *value_.query_
      : ::abci::ResponseQuery::default_instance();
}
::abci::ResponseQuery* Response::mutable_query() {
  if (!has_query()) {
    clear_value();
    set_has_query();
    value_.query_ = new ::abci::ResponseQuery;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.query)
  return value_.query_;
}
::abci::ResponseQuery* Response::release_query() {
  // @@protoc_insertion_point(field_release:abci.Response.query)
  if (has_query()) {
    clear_has_value();
    ::abci::ResponseQuery* temp = value_.query_;
    value_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_query(::abci::ResponseQuery* query) {
  clear_value();
  if (query) {
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.query)
}

// optional .abci.ResponseBeginBlock begin_block = 8;
bool Response::has_begin_block() const {
  return value_case() == kBeginBlock;
}
void Response::set_has_begin_block() {
  _oneof_case_[0] = kBeginBlock;
}
void Response::clear_begin_block() {
  if (has_begin_block()) {
    delete value_.begin_block_;
    clear_has_value();
  }
}
 const ::abci::ResponseBeginBlock& Response::begin_block() const {
  // @@protoc_insertion_point(field_get:abci.Response.begin_block)
  return has_begin_block()
      ? *value_.begin_block_
      : ::abci::ResponseBeginBlock::default_instance();
}
::abci::ResponseBeginBlock* Response::mutable_begin_block() {
  if (!has_begin_block()) {
    clear_value();
    set_has_begin_block();
    value_.begin_block_ = new ::abci::ResponseBeginBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.begin_block)
  return value_.begin_block_;
}
::abci::ResponseBeginBlock* Response::release_begin_block() {
  // @@protoc_insertion_point(field_release:abci.Response.begin_block)
  if (has_begin_block()) {
    clear_has_value();
    ::abci::ResponseBeginBlock* temp = value_.begin_block_;
    value_.begin_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_begin_block(::abci::ResponseBeginBlock* begin_block) {
  clear_value();
  if (begin_block) {
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.begin_block)
}

// optional .abci.ResponseCheckTx check_tx = 9;
bool Response::has_check_tx() const {
  return value_case() == kCheckTx;
}
void Response::set_has_check_tx() {
  _oneof_case_[0] = kCheckTx;
}
void Response::clear_check_tx() {
  if (has_check_tx()) {
    delete value_.check_tx_;
    clear_has_value();
  }
}
 const ::abci::ResponseCheckTx& Response::check_tx() const {
  // @@protoc_insertion_point(field_get:abci.Response.check_tx)
  return has_check_tx()
      ? *value_.check_tx_
      : ::abci::ResponseCheckTx::default_instance();
}
::abci::ResponseCheckTx* Response::mutable_check_tx() {
  if (!has_check_tx()) {
    clear_value();
    set_has_check_tx();
    value_.check_tx_ = new ::abci::ResponseCheckTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.check_tx)
  return value_.check_tx_;
}
::abci::ResponseCheckTx* Response::release_check_tx() {
  // @@protoc_insertion_point(field_release:abci.Response.check_tx)
  if (has_check_tx()) {
    clear_has_value();
    ::abci::ResponseCheckTx* temp = value_.check_tx_;
    value_.check_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_check_tx(::abci::ResponseCheckTx* check_tx) {
  clear_value();
  if (check_tx) {
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.check_tx)
}

// optional .abci.ResponseDeliverTx deliver_tx = 10;
bool Response::has_deliver_tx() const {
  return value_case() == kDeliverTx;
}
void Response::set_has_deliver_tx() {
  _oneof_case_[0] = kDeliverTx;
}
void Response::clear_deliver_tx() {
  if (has_deliver_tx()) {
    delete value_.deliver_tx_;
    clear_has_value();
  }
}
 const ::abci::ResponseDeliverTx& Response::deliver_tx() const {
  // @@protoc_insertion_point(field_get:abci.Response.deliver_tx)
  return has_deliver_tx()
      ? *value_.deliver_tx_
      : ::abci::ResponseDeliverTx::default_instance();
}
::abci::ResponseDeliverTx* Response::mutable_deliver_tx() {
  if (!has_deliver_tx()) {
    clear_value();
    set_has_deliver_tx();
    value_.deliver_tx_ = new ::abci::ResponseDeliverTx;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.deliver_tx)
  return value_.deliver_tx_;
}
::abci::ResponseDeliverTx* Response::release_deliver_tx() {
  // @@protoc_insertion_point(field_release:abci.Response.deliver_tx)
  if (has_deliver_tx()) {
    clear_has_value();
    ::abci::ResponseDeliverTx* temp = value_.deliver_tx_;
    value_.deliver_tx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_deliver_tx(::abci::ResponseDeliverTx* deliver_tx) {
  clear_value();
  if (deliver_tx) {
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.deliver_tx)
}

// optional .abci.ResponseEndBlock end_block = 11;
bool Response::has_end_block() const {
  return value_case() == kEndBlock;
}
void Response::set_has_end_block() {
  _oneof_case_[0] = kEndBlock;
}
void Response::clear_end_block() {
  if (has_end_block()) {
    delete value_.end_block_;
    clear_has_value();
  }
}
 const ::abci::ResponseEndBlock& Response::end_block() const {
  // @@protoc_insertion_point(field_get:abci.Response.end_block)
  return has_end_block()
      ? *value_.end_block_
      : ::abci::ResponseEndBlock::default_instance();
}
::abci::ResponseEndBlock* Response::mutable_end_block() {
  if (!has_end_block()) {
    clear_value();
    set_has_end_block();
    value_.end_block_ = new ::abci::ResponseEndBlock;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.end_block)
  return value_.end_block_;
}
::abci::ResponseEndBlock* Response::release_end_block() {
  // @@protoc_insertion_point(field_release:abci.Response.end_block)
  if (has_end_block()) {
    clear_has_value();
    ::abci::ResponseEndBlock* temp = value_.end_block_;
    value_.end_block_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_end_block(::abci::ResponseEndBlock* end_block) {
  clear_value();
  if (end_block) {
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.end_block)
}

// optional .abci.ResponseCommit commit = 12;
bool Response::has_commit() const {
  return value_case() == kCommit;
}
void Response::set_has_commit() {
  _oneof_case_[0] = kCommit;
}
void Response::clear_commit() {
  if (has_commit()) {
    delete value_.commit_;
    clear_has_value();
  }
}
 const ::abci::ResponseCommit& Response::commit() const {
  // @@protoc_insertion_point(field_get:abci.Response.commit)
  return has_commit()
      ? *value_.commit_
      : ::abci::ResponseCommit::default_instance();
}
::abci::ResponseCommit* Response::mutable_commit() {
  if (!has_commit()) {
    clear_value();
    set_has_commit();
    value_.commit_ = new ::abci::ResponseCommit;
  }
  // @@protoc_insertion_point(field_mutable:abci.Response.commit)
  return value_.commit_;
}
::abci::ResponseCommit* Response::release_commit() {
  // @@protoc_insertion_point(field_release:abci.Response.commit)
  if (has_commit()) {
    clear_has_value();
    ::abci::ResponseCommit* temp = value_.commit_;
    value_.commit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_commit(::abci::ResponseCommit* commit) {
  clear_value();
  if (commit) {
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.commit)
}

bool Response::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Response::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Response::ValueCase Response::value_case() const {
  return Response::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseException::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseException::ResponseException()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseException)
}

void ResponseException::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseException::ResponseException(const ResponseException& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseException)
}

void ResponseException::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseException::~ResponseException() {
  // @@protoc_insertion_point(destructor:abci.ResponseException)
  SharedDtor();
}

void ResponseException::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseException_descriptor_;
}

const ResponseException& ResponseException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseException* ResponseException::default_instance_ = NULL;

ResponseException* ResponseException::New(::google::protobuf::Arena* arena) const {
  ResponseException* n = new ResponseException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseException::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseException)
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseException.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseException)
  return false;
#undef DO_
}

void ResponseException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseException)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseException.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseException)
}

::google::protobuf::uint8* ResponseException::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseException)
  // optional string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseException.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseException)
  return target;
}

int ResponseException::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseException)
  int total_size = 0;

  // optional string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseException* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseException>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseException)
    MergeFrom(*source);
  }
}

void ResponseException::MergeFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void ResponseException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseException::CopyFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseException::IsInitialized() const {

  return true;
}

void ResponseException::Swap(ResponseException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseException::InternalSwap(ResponseException* other) {
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseException_descriptor_;
  metadata.reflection = ResponseException_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseException

// optional string error = 1;
void ResponseException::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseException::error() const {
  // @@protoc_insertion_point(field_get:abci.ResponseException.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseException::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseException.error)
}
 void ResponseException::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseException.error)
}
 void ResponseException::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseException.error)
}
 ::std::string* ResponseException::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseException.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseException::release_error() {
  // @@protoc_insertion_point(field_release:abci.ResponseException.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseException::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseException.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEcho::ResponseEcho()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseEcho)
}

void ResponseEcho::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseEcho::ResponseEcho(const ResponseEcho& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseEcho)
}

void ResponseEcho::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseEcho::~ResponseEcho() {
  // @@protoc_insertion_point(destructor:abci.ResponseEcho)
  SharedDtor();
}

void ResponseEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseEcho::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEcho::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseEcho_descriptor_;
}

const ResponseEcho& ResponseEcho::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseEcho* ResponseEcho::default_instance_ = NULL;

ResponseEcho* ResponseEcho::New(::google::protobuf::Arena* arena) const {
  ResponseEcho* n = new ResponseEcho;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseEcho)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseEcho)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseEcho.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseEcho)
  return false;
#undef DO_
}

void ResponseEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseEcho)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseEcho)
}

::google::protobuf::uint8* ResponseEcho::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseEcho)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseEcho.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseEcho)
  return target;
}

int ResponseEcho::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseEcho)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEcho::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseEcho)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseEcho* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEcho>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseEcho)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseEcho)
    MergeFrom(*source);
  }
}

void ResponseEcho::MergeFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseEcho)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ResponseEcho::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEcho::CopyFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEcho::IsInitialized() const {

  return true;
}

void ResponseEcho::Swap(ResponseEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEcho::InternalSwap(ResponseEcho* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEcho::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseEcho_descriptor_;
  metadata.reflection = ResponseEcho_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseEcho

// optional string message = 1;
void ResponseEcho::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseEcho::message() const {
  // @@protoc_insertion_point(field_get:abci.ResponseEcho.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseEcho::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseEcho.message)
}
 void ResponseEcho::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseEcho.message)
}
 void ResponseEcho::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseEcho.message)
}
 ::std::string* ResponseEcho::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseEcho.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseEcho::release_message() {
  // @@protoc_insertion_point(field_release:abci.ResponseEcho.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseEcho::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseEcho.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseFlush::ResponseFlush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseFlush)
}

void ResponseFlush::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseFlush::ResponseFlush(const ResponseFlush& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseFlush)
}

void ResponseFlush::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ResponseFlush::~ResponseFlush() {
  // @@protoc_insertion_point(destructor:abci.ResponseFlush)
  SharedDtor();
}

void ResponseFlush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFlush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFlush_descriptor_;
}

const ResponseFlush& ResponseFlush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseFlush* ResponseFlush::default_instance_ = NULL;

ResponseFlush* ResponseFlush::New(::google::protobuf::Arena* arena) const {
  ResponseFlush* n = new ResponseFlush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseFlush)
}

bool ResponseFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseFlush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseFlush)
  return false;
#undef DO_
}

void ResponseFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseFlush)
  // @@protoc_insertion_point(serialize_end:abci.ResponseFlush)
}

::google::protobuf::uint8* ResponseFlush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseFlush)
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseFlush)
  return target;
}

int ResponseFlush::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseFlush)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFlush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseFlush)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseFlush* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseFlush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseFlush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseFlush)
    MergeFrom(*source);
  }
}

void ResponseFlush::MergeFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseFlush)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ResponseFlush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFlush::CopyFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFlush::IsInitialized() const {

  return true;
}

void ResponseFlush::Swap(ResponseFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseFlush::InternalSwap(ResponseFlush* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseFlush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFlush_descriptor_;
  metadata.reflection = ResponseFlush_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseFlush

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseInfo::kDataFieldNumber;
const int ResponseInfo::kVersionFieldNumber;
const int ResponseInfo::kLastBlockHeightFieldNumber;
const int ResponseInfo::kLastBlockAppHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInfo::ResponseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseInfo)
}

void ResponseInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseInfo::ResponseInfo(const ResponseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseInfo)
}

void ResponseInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_height_ = GOOGLE_LONGLONG(0);
  last_block_app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseInfo::~ResponseInfo() {
  // @@protoc_insertion_point(destructor:abci.ResponseInfo)
  SharedDtor();
}

void ResponseInfo::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseInfo_descriptor_;
}

const ResponseInfo& ResponseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseInfo* ResponseInfo::default_instance_ = NULL;

ResponseInfo* ResponseInfo::New(::google::protobuf::Arena* arena) const {
  ResponseInfo* n = new ResponseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseInfo)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_height_ = GOOGLE_LONGLONG(0);
  last_block_app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseInfo.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseInfo.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_block_height;
        break;
      }

      // optional int64 last_block_height = 3;
      case 3: {
        if (tag == 24) {
         parse_last_block_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_block_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_last_block_app_hash;
        break;
      }

      // optional bytes last_block_app_hash = 4;
      case 4: {
        if (tag == 34) {
         parse_last_block_app_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_block_app_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseInfo)
  return false;
#undef DO_
}

void ResponseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseInfo)
  // optional string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int64 last_block_height = 3;
  if (this->last_block_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_block_height(), output);
  }

  // optional bytes last_block_app_hash = 4;
  if (this->last_block_app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->last_block_app_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseInfo)
}

::google::protobuf::uint8* ResponseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseInfo)
  // optional string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int64 last_block_height = 3;
  if (this->last_block_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_block_height(), target);
  }

  // optional bytes last_block_app_hash = 4;
  if (this->last_block_app_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->last_block_app_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseInfo)
  return target;
}

int ResponseInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseInfo)
  int total_size = 0;

  // optional string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional int64 last_block_height = 3;
  if (this->last_block_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_block_height());
  }

  // optional bytes last_block_app_hash = 4;
  if (this->last_block_app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_block_app_hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseInfo)
    MergeFrom(*source);
  }
}

void ResponseInfo::MergeFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.last_block_height() != 0) {
    set_last_block_height(from.last_block_height());
  }
  if (from.last_block_app_hash().size() > 0) {

    last_block_app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_block_app_hash_);
  }
}

void ResponseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInfo::CopyFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInfo::IsInitialized() const {

  return true;
}

void ResponseInfo::Swap(ResponseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInfo::InternalSwap(ResponseInfo* other) {
  data_.Swap(&other->data_);
  version_.Swap(&other->version_);
  std::swap(last_block_height_, other->last_block_height_);
  last_block_app_hash_.Swap(&other->last_block_app_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseInfo_descriptor_;
  metadata.reflection = ResponseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseInfo

// optional string data = 1;
void ResponseInfo::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseInfo::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseInfo::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.data)
}
 void ResponseInfo::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseInfo.data)
}
 void ResponseInfo::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseInfo.data)
}
 ::std::string* ResponseInfo::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseInfo.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseInfo::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseInfo.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseInfo::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseInfo.data)
}

// optional string version = 2;
void ResponseInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseInfo::version() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.version)
}
 void ResponseInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseInfo.version)
}
 void ResponseInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseInfo.version)
}
 ::std::string* ResponseInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseInfo::release_version() {
  // @@protoc_insertion_point(field_release:abci.ResponseInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseInfo.version)
}

// optional int64 last_block_height = 3;
void ResponseInfo::clear_last_block_height() {
  last_block_height_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseInfo::last_block_height() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.last_block_height)
  return last_block_height_;
}
 void ResponseInfo::set_last_block_height(::google::protobuf::int64 value) {
  
  last_block_height_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.last_block_height)
}

// optional bytes last_block_app_hash = 4;
void ResponseInfo::clear_last_block_app_hash() {
  last_block_app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseInfo::last_block_app_hash() const {
  // @@protoc_insertion_point(field_get:abci.ResponseInfo.last_block_app_hash)
  return last_block_app_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseInfo::set_last_block_app_hash(const ::std::string& value) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseInfo.last_block_app_hash)
}
 void ResponseInfo::set_last_block_app_hash(const char* value) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseInfo.last_block_app_hash)
}
 void ResponseInfo::set_last_block_app_hash(const void* value, size_t size) {
  
  last_block_app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseInfo.last_block_app_hash)
}
 ::std::string* ResponseInfo::mutable_last_block_app_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseInfo.last_block_app_hash)
  return last_block_app_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseInfo::release_last_block_app_hash() {
  // @@protoc_insertion_point(field_release:abci.ResponseInfo.last_block_app_hash)
  
  return last_block_app_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseInfo::set_allocated_last_block_app_hash(::std::string* last_block_app_hash) {
  if (last_block_app_hash != NULL) {
    
  } else {
    
  }
  last_block_app_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_block_app_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseInfo.last_block_app_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSetOption::kCodeFieldNumber;
const int ResponseSetOption::kLogFieldNumber;
const int ResponseSetOption::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSetOption::ResponseSetOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseSetOption)
}

void ResponseSetOption::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseSetOption::ResponseSetOption(const ResponseSetOption& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseSetOption)
}

void ResponseSetOption::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0u;
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseSetOption::~ResponseSetOption() {
  // @@protoc_insertion_point(destructor:abci.ResponseSetOption)
  SharedDtor();
}

void ResponseSetOption::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseSetOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSetOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSetOption_descriptor_;
}

const ResponseSetOption& ResponseSetOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseSetOption* ResponseSetOption::default_instance_ = NULL;

ResponseSetOption* ResponseSetOption::New(::google::protobuf::Arena* arena) const {
  ResponseSetOption* n = new ResponseSetOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseSetOption)
  code_ = 0u;
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseSetOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // optional string log = 3;
      case 3: {
        if (tag == 26) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseSetOption.log"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseSetOption.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseSetOption)
  return false;
#undef DO_
}

void ResponseSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseSetOption)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseSetOption)
}

::google::protobuf::uint8* ResponseSetOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseSetOption)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseSetOption)
  return target;
}

int ResponseSetOption::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseSetOption)
  int total_size = 0;

  // optional uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSetOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseSetOption)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseSetOption* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSetOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseSetOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseSetOption)
    MergeFrom(*source);
  }
}

void ResponseSetOption::MergeFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseSetOption)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
}

void ResponseSetOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSetOption::CopyFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSetOption::IsInitialized() const {

  return true;
}

void ResponseSetOption::Swap(ResponseSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSetOption::InternalSwap(ResponseSetOption* other) {
  std::swap(code_, other->code_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSetOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSetOption_descriptor_;
  metadata.reflection = ResponseSetOption_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseSetOption

// optional uint32 code = 1;
void ResponseSetOption::clear_code() {
  code_ = 0u;
}
 ::google::protobuf::uint32 ResponseSetOption::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseSetOption.code)
  return code_;
}
 void ResponseSetOption::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseSetOption.code)
}

// optional string log = 3;
void ResponseSetOption::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseSetOption::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseSetOption.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSetOption::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseSetOption.log)
}
 void ResponseSetOption::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseSetOption.log)
}
 void ResponseSetOption::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseSetOption.log)
}
 ::std::string* ResponseSetOption::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseSetOption.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseSetOption::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseSetOption.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSetOption::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseSetOption.log)
}

// optional string info = 4;
void ResponseSetOption::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseSetOption::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseSetOption.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSetOption::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseSetOption.info)
}
 void ResponseSetOption::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseSetOption.info)
}
 void ResponseSetOption::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseSetOption.info)
}
 ::std::string* ResponseSetOption::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseSetOption.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseSetOption::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseSetOption.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSetOption::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseSetOption.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInitChain::ResponseInitChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseInitChain)
}

void ResponseInitChain::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseInitChain)
}

void ResponseInitChain::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:abci.ResponseInitChain)
  SharedDtor();
}

void ResponseInitChain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseInitChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseInitChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseInitChain_descriptor_;
}

const ResponseInitChain& ResponseInitChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseInitChain* ResponseInitChain::default_instance_ = NULL;

ResponseInitChain* ResponseInitChain::New(::google::protobuf::Arena* arena) const {
  ResponseInitChain* n = new ResponseInitChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseInitChain)
}

bool ResponseInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseInitChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseInitChain)
  return false;
#undef DO_
}

void ResponseInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseInitChain)
  // @@protoc_insertion_point(serialize_end:abci.ResponseInitChain)
}

::google::protobuf::uint8* ResponseInitChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseInitChain)
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseInitChain)
  return target;
}

int ResponseInitChain::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseInitChain)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseInitChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseInitChain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseInitChain* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseInitChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseInitChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseInitChain)
    MergeFrom(*source);
  }
}

void ResponseInitChain::MergeFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseInitChain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ResponseInitChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {

  return true;
}

void ResponseInitChain::Swap(ResponseInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseInitChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseInitChain_descriptor_;
  metadata.reflection = ResponseInitChain_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseInitChain

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery::kCodeFieldNumber;
const int ResponseQuery::kLogFieldNumber;
const int ResponseQuery::kInfoFieldNumber;
const int ResponseQuery::kIndexFieldNumber;
const int ResponseQuery::kKeyFieldNumber;
const int ResponseQuery::kValueFieldNumber;
const int ResponseQuery::kProofFieldNumber;
const int ResponseQuery::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery::ResponseQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseQuery)
}

void ResponseQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseQuery)
}

void ResponseQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0u;
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_LONGLONG(0);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_LONGLONG(0);
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:abci.ResponseQuery)
  SharedDtor();
}

void ResponseQuery::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQuery_descriptor_;
}

const ResponseQuery& ResponseQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseQuery* ResponseQuery::default_instance_ = NULL;

ResponseQuery* ResponseQuery::New(::google::protobuf::Arena* arena) const {
  ResponseQuery* n = new ResponseQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseQuery)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseQuery, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseQuery*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(height_, code_);
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_LONGLONG(0);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ResponseQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // optional string log = 3;
      case 3: {
        if (tag == 26) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseQuery.log"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseQuery.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional int64 index = 5;
      case 5: {
        if (tag == 40) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }

      // optional bytes key = 6;
      case 6: {
        if (tag == 50) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_value;
        break;
      }

      // optional bytes value = 7;
      case 7: {
        if (tag == 58) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_proof;
        break;
      }

      // optional bytes proof = 8;
      case 8: {
        if (tag == 66) {
         parse_proof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // optional int64 height = 9;
      case 9: {
        if (tag == 72) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseQuery)
  return false;
#undef DO_
}

void ResponseQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseQuery)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // optional int64 index = 5;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->index(), output);
  }

  // optional bytes key = 6;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->key(), output);
  }

  // optional bytes value = 7;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->value(), output);
  }

  // optional bytes proof = 8;
  if (this->proof().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->proof(), output);
  }

  // optional int64 height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseQuery)
}

::google::protobuf::uint8* ResponseQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseQuery)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // optional int64 index = 5;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->index(), target);
  }

  // optional bytes key = 6;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key(), target);
  }

  // optional bytes value = 7;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->value(), target);
  }

  // optional bytes proof = 8;
  if (this->proof().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->proof(), target);
  }

  // optional int64 height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseQuery)
  return target;
}

int ResponseQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseQuery)
  int total_size = 0;

  // optional uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // optional int64 index = 5;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // optional bytes key = 6;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional bytes proof = 8;
  if (this->proof().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proof());
  }

  // optional int64 height = 9;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseQuery)
    MergeFrom(*source);
  }
}

void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.proof().size() > 0) {

    proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void ResponseQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {

  return true;
}

void ResponseQuery::Swap(ResponseQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery::InternalSwap(ResponseQuery* other) {
  std::swap(code_, other->code_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  std::swap(index_, other->index_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  proof_.Swap(&other->proof_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQuery_descriptor_;
  metadata.reflection = ResponseQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuery

// optional uint32 code = 1;
void ResponseQuery::clear_code() {
  code_ = 0u;
}
 ::google::protobuf::uint32 ResponseQuery::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.code)
  return code_;
}
 void ResponseQuery::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.code)
}

// optional string log = 3;
void ResponseQuery::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseQuery::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.log)
}
 void ResponseQuery::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.log)
}
 void ResponseQuery::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.log)
}
 ::std::string* ResponseQuery::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseQuery::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.log)
}

// optional string info = 4;
void ResponseQuery::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseQuery::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.info)
}
 void ResponseQuery::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.info)
}
 void ResponseQuery::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.info)
}
 ::std::string* ResponseQuery::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseQuery::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.info)
}

// optional int64 index = 5;
void ResponseQuery::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseQuery::index() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.index)
  return index_;
}
 void ResponseQuery::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.index)
}

// optional bytes key = 6;
void ResponseQuery::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseQuery::key() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.key)
}
 void ResponseQuery::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.key)
}
 void ResponseQuery::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.key)
}
 ::std::string* ResponseQuery::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseQuery::release_key() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.key)
}

// optional bytes value = 7;
void ResponseQuery::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseQuery::value() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.value)
}
 void ResponseQuery::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.value)
}
 void ResponseQuery::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.value)
}
 ::std::string* ResponseQuery::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseQuery::release_value() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.value)
}

// optional bytes proof = 8;
void ResponseQuery::clear_proof() {
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseQuery::proof() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.proof)
  return proof_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_proof(const ::std::string& value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.proof)
}
 void ResponseQuery::set_proof(const char* value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseQuery.proof)
}
 void ResponseQuery::set_proof(const void* value, size_t size) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseQuery.proof)
}
 ::std::string* ResponseQuery::mutable_proof() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseQuery.proof)
  return proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseQuery::release_proof() {
  // @@protoc_insertion_point(field_release:abci.ResponseQuery.proof)
  
  return proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseQuery::set_allocated_proof(::std::string* proof) {
  if (proof != NULL) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseQuery.proof)
}

// optional int64 height = 9;
void ResponseQuery::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseQuery::height() const {
  // @@protoc_insertion_point(field_get:abci.ResponseQuery.height)
  return height_;
}
 void ResponseQuery::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseQuery.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseBeginBlock::ResponseBeginBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseBeginBlock)
}

void ResponseBeginBlock::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseBeginBlock)
}

void ResponseBeginBlock::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:abci.ResponseBeginBlock)
  SharedDtor();
}

void ResponseBeginBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseBeginBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBeginBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBeginBlock_descriptor_;
}

const ResponseBeginBlock& ResponseBeginBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseBeginBlock* ResponseBeginBlock::default_instance_ = NULL;

ResponseBeginBlock* ResponseBeginBlock::New(::google::protobuf::Arena* arena) const {
  ResponseBeginBlock* n = new ResponseBeginBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseBeginBlock)
}

bool ResponseBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseBeginBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseBeginBlock)
  return false;
#undef DO_
}

void ResponseBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseBeginBlock)
  // @@protoc_insertion_point(serialize_end:abci.ResponseBeginBlock)
}

::google::protobuf::uint8* ResponseBeginBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseBeginBlock)
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseBeginBlock)
  return target;
}

int ResponseBeginBlock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseBeginBlock)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBeginBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseBeginBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseBeginBlock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseBeginBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseBeginBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseBeginBlock)
    MergeFrom(*source);
  }
}

void ResponseBeginBlock::MergeFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseBeginBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ResponseBeginBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {

  return true;
}

void ResponseBeginBlock::Swap(ResponseBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseBeginBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBeginBlock_descriptor_;
  metadata.reflection = ResponseBeginBlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseBeginBlock

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCheckTx::kCodeFieldNumber;
const int ResponseCheckTx::kDataFieldNumber;
const int ResponseCheckTx::kLogFieldNumber;
const int ResponseCheckTx::kInfoFieldNumber;
const int ResponseCheckTx::kGasWantedFieldNumber;
const int ResponseCheckTx::kGasUsedFieldNumber;
const int ResponseCheckTx::kTagsFieldNumber;
const int ResponseCheckTx::kFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCheckTx::ResponseCheckTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseCheckTx)
}

void ResponseCheckTx::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fee_ = const_cast< ::abci::KI64Pair*>(&::abci::KI64Pair::default_instance());
}

ResponseCheckTx::ResponseCheckTx(const ResponseCheckTx& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseCheckTx)
}

void ResponseCheckTx::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_wanted_ = GOOGLE_LONGLONG(0);
  gas_used_ = GOOGLE_LONGLONG(0);
  fee_ = NULL;
}

ResponseCheckTx::~ResponseCheckTx() {
  // @@protoc_insertion_point(destructor:abci.ResponseCheckTx)
  SharedDtor();
}

void ResponseCheckTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete fee_;
  }
}

void ResponseCheckTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCheckTx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCheckTx_descriptor_;
}

const ResponseCheckTx& ResponseCheckTx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseCheckTx* ResponseCheckTx::default_instance_ = NULL;

ResponseCheckTx* ResponseCheckTx::New(::google::protobuf::Arena* arena) const {
  ResponseCheckTx* n = new ResponseCheckTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseCheckTx)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseCheckTx, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseCheckTx*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gas_wanted_, gas_used_);
  code_ = 0u;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  tags_.Clear();
}

bool ResponseCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseCheckTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // optional string log = 3;
      case 3: {
        if (tag == 26) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseCheckTx.log"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseCheckTx.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gas_wanted;
        break;
      }

      // optional int64 gas_wanted = 5;
      case 5: {
        if (tag == 40) {
         parse_gas_wanted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gas_used;
        break;
      }

      // optional int64 gas_used = 6;
      case 6: {
        if (tag == 48) {
         parse_gas_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tags;
        break;
      }

      // repeated .abci.KVPair tags = 7;
      case 7: {
        if (tag == 58) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_fee;
        break;
      }

      // optional .abci.KI64Pair fee = 8;
      case 8: {
        if (tag == 66) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseCheckTx)
  return false;
#undef DO_
}

void ResponseCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseCheckTx)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // optional int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // optional int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(i), output);
  }

  // optional .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fee_, output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseCheckTx)
}

::google::protobuf::uint8* ResponseCheckTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseCheckTx)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // optional int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gas_wanted(), target);
  }

  // optional int64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gas_used(), target);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tags(i), false, target);
  }

  // optional .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->fee_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseCheckTx)
  return target;
}

int ResponseCheckTx::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseCheckTx)
  int total_size = 0;

  // optional uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // optional int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // optional int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // optional .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fee_);
  }

  // repeated .abci.KVPair tags = 7;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCheckTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseCheckTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseCheckTx* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCheckTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseCheckTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseCheckTx)
    MergeFrom(*source);
  }
}

void ResponseCheckTx::MergeFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseCheckTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tags_.MergeFrom(from.tags_);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.has_fee()) {
    mutable_fee()->::abci::KI64Pair::MergeFrom(from.fee());
  }
}

void ResponseCheckTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCheckTx::CopyFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckTx::IsInitialized() const {

  return true;
}

void ResponseCheckTx::Swap(ResponseCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCheckTx::InternalSwap(ResponseCheckTx* other) {
  std::swap(code_, other->code_);
  data_.Swap(&other->data_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  std::swap(gas_wanted_, other->gas_wanted_);
  std::swap(gas_used_, other->gas_used_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(fee_, other->fee_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCheckTx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCheckTx_descriptor_;
  metadata.reflection = ResponseCheckTx_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseCheckTx

// optional uint32 code = 1;
void ResponseCheckTx::clear_code() {
  code_ = 0u;
}
 ::google::protobuf::uint32 ResponseCheckTx::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.code)
  return code_;
}
 void ResponseCheckTx::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.code)
}

// optional bytes data = 2;
void ResponseCheckTx::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseCheckTx::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCheckTx::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.data)
}
 void ResponseCheckTx::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCheckTx.data)
}
 void ResponseCheckTx::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCheckTx.data)
}
 ::std::string* ResponseCheckTx::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseCheckTx::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCheckTx::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.data)
}

// optional string log = 3;
void ResponseCheckTx::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseCheckTx::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCheckTx::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.log)
}
 void ResponseCheckTx::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCheckTx.log)
}
 void ResponseCheckTx::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCheckTx.log)
}
 ::std::string* ResponseCheckTx::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseCheckTx::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCheckTx::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.log)
}

// optional string info = 4;
void ResponseCheckTx::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseCheckTx::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCheckTx::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.info)
}
 void ResponseCheckTx::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCheckTx.info)
}
 void ResponseCheckTx::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCheckTx.info)
}
 ::std::string* ResponseCheckTx::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseCheckTx::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCheckTx::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.info)
}

// optional int64 gas_wanted = 5;
void ResponseCheckTx::clear_gas_wanted() {
  gas_wanted_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseCheckTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.gas_wanted)
  return gas_wanted_;
}
 void ResponseCheckTx::set_gas_wanted(::google::protobuf::int64 value) {
  
  gas_wanted_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.gas_wanted)
}

// optional int64 gas_used = 6;
void ResponseCheckTx::clear_gas_used() {
  gas_used_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseCheckTx::gas_used() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.gas_used)
  return gas_used_;
}
 void ResponseCheckTx::set_gas_used(::google::protobuf::int64 value) {
  
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseCheckTx.gas_used)
}

// repeated .abci.KVPair tags = 7;
int ResponseCheckTx::tags_size() const {
  return tags_.size();
}
void ResponseCheckTx::clear_tags() {
  tags_.Clear();
}
const ::abci::KVPair& ResponseCheckTx::tags(int index) const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.tags)
  return tags_.Get(index);
}
::abci::KVPair* ResponseCheckTx::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.tags)
  return tags_.Mutable(index);
}
::abci::KVPair* ResponseCheckTx::add_tags() {
  // @@protoc_insertion_point(field_add:abci.ResponseCheckTx.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::abci::KVPair >*
ResponseCheckTx::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:abci.ResponseCheckTx.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::abci::KVPair >&
ResponseCheckTx::tags() const {
  // @@protoc_insertion_point(field_list:abci.ResponseCheckTx.tags)
  return tags_;
}

// optional .abci.KI64Pair fee = 8;
bool ResponseCheckTx::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
void ResponseCheckTx::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
const ::abci::KI64Pair& ResponseCheckTx::fee() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCheckTx.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
::abci::KI64Pair* ResponseCheckTx::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::abci::KI64Pair;
  }
  // @@protoc_insertion_point(field_mutable:abci.ResponseCheckTx.fee)
  return fee_;
}
::abci::KI64Pair* ResponseCheckTx::release_fee() {
  // @@protoc_insertion_point(field_release:abci.ResponseCheckTx.fee)
  
  ::abci::KI64Pair* temp = fee_;
  fee_ = NULL;
  return temp;
}
void ResponseCheckTx::set_allocated_fee(::abci::KI64Pair* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCheckTx.fee)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDeliverTx::kCodeFieldNumber;
const int ResponseDeliverTx::kDataFieldNumber;
const int ResponseDeliverTx::kLogFieldNumber;
const int ResponseDeliverTx::kInfoFieldNumber;
const int ResponseDeliverTx::kGasWantedFieldNumber;
const int ResponseDeliverTx::kGasUsedFieldNumber;
const int ResponseDeliverTx::kTagsFieldNumber;
const int ResponseDeliverTx::kFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDeliverTx::ResponseDeliverTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseDeliverTx)
}

void ResponseDeliverTx::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fee_ = const_cast< ::abci::KI64Pair*>(&::abci::KI64Pair::default_instance());
}

ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseDeliverTx)
}

void ResponseDeliverTx::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_wanted_ = GOOGLE_LONGLONG(0);
  gas_used_ = GOOGLE_LONGLONG(0);
  fee_ = NULL;
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:abci.ResponseDeliverTx)
  SharedDtor();
}

void ResponseDeliverTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete fee_;
  }
}

void ResponseDeliverTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDeliverTx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseDeliverTx_descriptor_;
}

const ResponseDeliverTx& ResponseDeliverTx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseDeliverTx* ResponseDeliverTx::default_instance_ = NULL;

ResponseDeliverTx* ResponseDeliverTx::New(::google::protobuf::Arena* arena) const {
  ResponseDeliverTx* n = new ResponseDeliverTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseDeliverTx)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseDeliverTx, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseDeliverTx*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gas_wanted_, gas_used_);
  code_ = 0u;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  tags_.Clear();
}

bool ResponseDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseDeliverTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // optional string log = 3;
      case 3: {
        if (tag == 26) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseDeliverTx.log"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseDeliverTx.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gas_wanted;
        break;
      }

      // optional int64 gas_wanted = 5;
      case 5: {
        if (tag == 40) {
         parse_gas_wanted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gas_used;
        break;
      }

      // optional int64 gas_used = 6;
      case 6: {
        if (tag == 48) {
         parse_gas_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tags;
        break;
      }

      // repeated .abci.KVPair tags = 7;
      case 7: {
        if (tag == 58) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_fee;
        break;
      }

      // optional .abci.KI64Pair fee = 8;
      case 8: {
        if (tag == 66) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseDeliverTx)
  return false;
#undef DO_
}

void ResponseDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseDeliverTx)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // optional int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // optional int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(i), output);
  }

  // optional .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fee_, output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseDeliverTx)
}

::google::protobuf::uint8* ResponseDeliverTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseDeliverTx)
  // optional uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // optional int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gas_wanted(), target);
  }

  // optional int64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gas_used(), target);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tags(i), false, target);
  }

  // optional .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->fee_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseDeliverTx)
  return target;
}

int ResponseDeliverTx::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseDeliverTx)
  int total_size = 0;

  // optional uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // optional string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // optional int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // optional int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // optional .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fee_);
  }

  // repeated .abci.KVPair tags = 7;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDeliverTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseDeliverTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseDeliverTx* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDeliverTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseDeliverTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseDeliverTx)
    MergeFrom(*source);
  }
}

void ResponseDeliverTx::MergeFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseDeliverTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tags_.MergeFrom(from.tags_);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.has_fee()) {
    mutable_fee()->::abci::KI64Pair::MergeFrom(from.fee());
  }
}

void ResponseDeliverTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {

  return true;
}

void ResponseDeliverTx::Swap(ResponseDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  std::swap(code_, other->code_);
  data_.Swap(&other->data_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  std::swap(gas_wanted_, other->gas_wanted_);
  std::swap(gas_used_, other->gas_used_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(fee_, other->fee_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseDeliverTx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseDeliverTx_descriptor_;
  metadata.reflection = ResponseDeliverTx_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseDeliverTx

// optional uint32 code = 1;
void ResponseDeliverTx::clear_code() {
  code_ = 0u;
}
 ::google::protobuf::uint32 ResponseDeliverTx::code() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.code)
  return code_;
}
 void ResponseDeliverTx::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.code)
}

// optional bytes data = 2;
void ResponseDeliverTx::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseDeliverTx::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDeliverTx::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.data)
}
 void ResponseDeliverTx::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseDeliverTx.data)
}
 void ResponseDeliverTx::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseDeliverTx.data)
}
 ::std::string* ResponseDeliverTx::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseDeliverTx::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDeliverTx::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.data)
}

// optional string log = 3;
void ResponseDeliverTx::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseDeliverTx::log() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.log)
  return log_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDeliverTx::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.log)
}
 void ResponseDeliverTx::set_log(const char* value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseDeliverTx.log)
}
 void ResponseDeliverTx::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseDeliverTx.log)
}
 ::std::string* ResponseDeliverTx::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseDeliverTx::release_log() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDeliverTx::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.log)
}

// optional string info = 4;
void ResponseDeliverTx::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseDeliverTx::info() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDeliverTx::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.info)
}
 void ResponseDeliverTx::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseDeliverTx.info)
}
 void ResponseDeliverTx::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseDeliverTx.info)
}
 ::std::string* ResponseDeliverTx::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseDeliverTx::release_info() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseDeliverTx::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.info)
}

// optional int64 gas_wanted = 5;
void ResponseDeliverTx::clear_gas_wanted() {
  gas_wanted_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseDeliverTx::gas_wanted() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.gas_wanted)
  return gas_wanted_;
}
 void ResponseDeliverTx::set_gas_wanted(::google::protobuf::int64 value) {
  
  gas_wanted_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.gas_wanted)
}

// optional int64 gas_used = 6;
void ResponseDeliverTx::clear_gas_used() {
  gas_used_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ResponseDeliverTx::gas_used() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.gas_used)
  return gas_used_;
}
 void ResponseDeliverTx::set_gas_used(::google::protobuf::int64 value) {
  
  gas_used_ = value;
  // @@protoc_insertion_point(field_set:abci.ResponseDeliverTx.gas_used)
}

// repeated .abci.KVPair tags = 7;
int ResponseDeliverTx::tags_size() const {
  return tags_.size();
}
void ResponseDeliverTx::clear_tags() {
  tags_.Clear();
}
const ::abci::KVPair& ResponseDeliverTx::tags(int index) const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.tags)
  return tags_.Get(index);
}
::abci::KVPair* ResponseDeliverTx::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.tags)
  return tags_.Mutable(index);
}
::abci::KVPair* ResponseDeliverTx::add_tags() {
  // @@protoc_insertion_point(field_add:abci.ResponseDeliverTx.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::abci::KVPair >*
ResponseDeliverTx::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:abci.ResponseDeliverTx.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::abci::KVPair >&
ResponseDeliverTx::tags() const {
  // @@protoc_insertion_point(field_list:abci.ResponseDeliverTx.tags)
  return tags_;
}

// optional .abci.KI64Pair fee = 8;
bool ResponseDeliverTx::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
void ResponseDeliverTx::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
const ::abci::KI64Pair& ResponseDeliverTx::fee() const {
  // @@protoc_insertion_point(field_get:abci.ResponseDeliverTx.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
::abci::KI64Pair* ResponseDeliverTx::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::abci::KI64Pair;
  }
  // @@protoc_insertion_point(field_mutable:abci.ResponseDeliverTx.fee)
  return fee_;
}
::abci::KI64Pair* ResponseDeliverTx::release_fee() {
  // @@protoc_insertion_point(field_release:abci.ResponseDeliverTx.fee)
  
  ::abci::KI64Pair* temp = fee_;
  fee_ = NULL;
  return temp;
}
void ResponseDeliverTx::set_allocated_fee(::abci::KI64Pair* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseDeliverTx.fee)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEndBlock::kValidatorUpdatesFieldNumber;
const int ResponseEndBlock::kConsensusParamUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEndBlock::ResponseEndBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseEndBlock)
}

void ResponseEndBlock::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  consensus_param_updates_ = const_cast< ::abci::ConsensusParams*>(&::abci::ConsensusParams::default_instance());
}

ResponseEndBlock::ResponseEndBlock(const ResponseEndBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseEndBlock)
}

void ResponseEndBlock::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  consensus_param_updates_ = NULL;
}

ResponseEndBlock::~ResponseEndBlock() {
  // @@protoc_insertion_point(destructor:abci.ResponseEndBlock)
  SharedDtor();
}

void ResponseEndBlock::SharedDtor() {
  if (this != default_instance_) {
    delete consensus_param_updates_;
  }
}

void ResponseEndBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEndBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseEndBlock_descriptor_;
}

const ResponseEndBlock& ResponseEndBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseEndBlock* ResponseEndBlock::default_instance_ = NULL;

ResponseEndBlock* ResponseEndBlock::New(::google::protobuf::Arena* arena) const {
  ResponseEndBlock* n = new ResponseEndBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseEndBlock)
  if (GetArenaNoVirtual() == NULL && consensus_param_updates_ != NULL) delete consensus_param_updates_;
  consensus_param_updates_ = NULL;
  validator_updates_.Clear();
}

bool ResponseEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseEndBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .abci.Validator validator_updates = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_validator_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_validator_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_validator_updates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_consensus_param_updates;
        break;
      }

      // optional .abci.ConsensusParams consensus_param_updates = 2;
      case 2: {
        if (tag == 18) {
         parse_consensus_param_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_param_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseEndBlock)
  return false;
#undef DO_
}

void ResponseEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseEndBlock)
  // repeated .abci.Validator validator_updates = 1;
  for (unsigned int i = 0, n = this->validator_updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->validator_updates(i), output);
  }

  // optional .abci.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->consensus_param_updates_, output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseEndBlock)
}

::google::protobuf::uint8* ResponseEndBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseEndBlock)
  // repeated .abci.Validator validator_updates = 1;
  for (unsigned int i = 0, n = this->validator_updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->validator_updates(i), false, target);
  }

  // optional .abci.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->consensus_param_updates_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseEndBlock)
  return target;
}

int ResponseEndBlock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseEndBlock)
  int total_size = 0;

  // optional .abci.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_param_updates_);
  }

  // repeated .abci.Validator validator_updates = 1;
  total_size += 1 * this->validator_updates_size();
  for (int i = 0; i < this->validator_updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->validator_updates(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEndBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseEndBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseEndBlock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEndBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseEndBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseEndBlock)
    MergeFrom(*source);
  }
}

void ResponseEndBlock::MergeFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseEndBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  validator_updates_.MergeFrom(from.validator_updates_);
  if (from.has_consensus_param_updates()) {
    mutable_consensus_param_updates()->::abci::ConsensusParams::MergeFrom(from.consensus_param_updates());
  }
}

void ResponseEndBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEndBlock::CopyFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEndBlock::IsInitialized() const {

  return true;
}

void ResponseEndBlock::Swap(ResponseEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEndBlock::InternalSwap(ResponseEndBlock* other) {
  validator_updates_.UnsafeArenaSwap(&other->validator_updates_);
  std::swap(consensus_param_updates_, other->consensus_param_updates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEndBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseEndBlock_descriptor_;
  metadata.reflection = ResponseEndBlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseEndBlock

// repeated .abci.Validator validator_updates = 1;
int ResponseEndBlock::validator_updates_size() const {
  return validator_updates_.size();
}
void ResponseEndBlock::clear_validator_updates() {
  validator_updates_.Clear();
}
const ::abci::Validator& ResponseEndBlock::validator_updates(int index) const {
  // @@protoc_insertion_point(field_get:abci.ResponseEndBlock.validator_updates)
  return validator_updates_.Get(index);
}
::abci::Validator* ResponseEndBlock::mutable_validator_updates(int index) {
  // @@protoc_insertion_point(field_mutable:abci.ResponseEndBlock.validator_updates)
  return validator_updates_.Mutable(index);
}
::abci::Validator* ResponseEndBlock::add_validator_updates() {
  // @@protoc_insertion_point(field_add:abci.ResponseEndBlock.validator_updates)
  return validator_updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::abci::Validator >*
ResponseEndBlock::mutable_validator_updates() {
  // @@protoc_insertion_point(field_mutable_list:abci.ResponseEndBlock.validator_updates)
  return &validator_updates_;
}
const ::google::protobuf::RepeatedPtrField< ::abci::Validator >&
ResponseEndBlock::validator_updates() const {
  // @@protoc_insertion_point(field_list:abci.ResponseEndBlock.validator_updates)
  return validator_updates_;
}

// optional .abci.ConsensusParams consensus_param_updates = 2;
bool ResponseEndBlock::has_consensus_param_updates() const {
  return !_is_default_instance_ && consensus_param_updates_ != NULL;
}
void ResponseEndBlock::clear_consensus_param_updates() {
  if (GetArenaNoVirtual() == NULL && consensus_param_updates_ != NULL) delete consensus_param_updates_;
  consensus_param_updates_ = NULL;
}
const ::abci::ConsensusParams& ResponseEndBlock::consensus_param_updates() const {
  // @@protoc_insertion_point(field_get:abci.ResponseEndBlock.consensus_param_updates)
  return consensus_param_updates_ != NULL ? *consensus_param_updates_ : *default_instance_->consensus_param_updates_;
}
::abci::ConsensusParams* ResponseEndBlock::mutable_consensus_param_updates() {
  
  if (consensus_param_updates_ == NULL) {
    consensus_param_updates_ = new ::abci::ConsensusParams;
  }
  // @@protoc_insertion_point(field_mutable:abci.ResponseEndBlock.consensus_param_updates)
  return consensus_param_updates_;
}
::abci::ConsensusParams* ResponseEndBlock::release_consensus_param_updates() {
  // @@protoc_insertion_point(field_release:abci.ResponseEndBlock.consensus_param_updates)
  
  ::abci::ConsensusParams* temp = consensus_param_updates_;
  consensus_param_updates_ = NULL;
  return temp;
}
void ResponseEndBlock::set_allocated_consensus_param_updates(::abci::ConsensusParams* consensus_param_updates) {
  delete consensus_param_updates_;
  consensus_param_updates_ = consensus_param_updates;
  if (consensus_param_updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseEndBlock.consensus_param_updates)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCommit::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCommit::ResponseCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseCommit)
}

void ResponseCommit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseCommit::ResponseCommit(const ResponseCommit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseCommit)
}

void ResponseCommit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseCommit::~ResponseCommit() {
  // @@protoc_insertion_point(destructor:abci.ResponseCommit)
  SharedDtor();
}

void ResponseCommit::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCommit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCommit_descriptor_;
}

const ResponseCommit& ResponseCommit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ResponseCommit* ResponseCommit::default_instance_ = NULL;

ResponseCommit* ResponseCommit::New(::google::protobuf::Arena* arena) const {
  ResponseCommit* n = new ResponseCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseCommit)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseCommit)
  return false;
#undef DO_
}

void ResponseCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseCommit)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ResponseCommit)
}

::google::protobuf::uint8* ResponseCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseCommit)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseCommit)
  return target;
}

int ResponseCommit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseCommit)
  int total_size = 0;

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseCommit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseCommit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseCommit)
    MergeFrom(*source);
  }
}

void ResponseCommit::MergeFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseCommit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ResponseCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCommit::CopyFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCommit::IsInitialized() const {

  return true;
}

void ResponseCommit::Swap(ResponseCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCommit::InternalSwap(ResponseCommit* other) {
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCommit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCommit_descriptor_;
  metadata.reflection = ResponseCommit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseCommit

// optional bytes data = 2;
void ResponseCommit::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseCommit::data() const {
  // @@protoc_insertion_point(field_get:abci.ResponseCommit.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCommit::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.ResponseCommit.data)
}
 void ResponseCommit::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.ResponseCommit.data)
}
 void ResponseCommit::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.ResponseCommit.data)
}
 ::std::string* ResponseCommit::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:abci.ResponseCommit.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseCommit::release_data() {
  // @@protoc_insertion_point(field_release:abci.ResponseCommit.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCommit::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:abci.ResponseCommit.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusParams::kBlockSizeFieldNumber;
const int ConsensusParams::kTxSizeFieldNumber;
const int ConsensusParams::kBlockGossipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusParams::ConsensusParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ConsensusParams)
}

void ConsensusParams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  block_size_ = const_cast< ::abci::BlockSize*>(&::abci::BlockSize::default_instance());
  tx_size_ = const_cast< ::abci::TxSize*>(&::abci::TxSize::default_instance());
  block_gossip_ = const_cast< ::abci::BlockGossip*>(&::abci::BlockGossip::default_instance());
}

ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.ConsensusParams)
}

void ConsensusParams::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  block_size_ = NULL;
  tx_size_ = NULL;
  block_gossip_ = NULL;
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:abci.ConsensusParams)
  SharedDtor();
}

void ConsensusParams::SharedDtor() {
  if (this != default_instance_) {
    delete block_size_;
    delete tx_size_;
    delete block_gossip_;
  }
}

void ConsensusParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusParams_descriptor_;
}

const ConsensusParams& ConsensusParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

ConsensusParams* ConsensusParams::default_instance_ = NULL;

ConsensusParams* ConsensusParams::New(::google::protobuf::Arena* arena) const {
  ConsensusParams* n = new ConsensusParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ConsensusParams)
  if (GetArenaNoVirtual() == NULL && block_size_ != NULL) delete block_size_;
  block_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_size_ != NULL) delete tx_size_;
  tx_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && block_gossip_ != NULL) delete block_gossip_;
  block_gossip_ = NULL;
}

bool ConsensusParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ConsensusParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abci.BlockSize block_size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tx_size;
        break;
      }

      // optional .abci.TxSize tx_size = 2;
      case 2: {
        if (tag == 18) {
         parse_tx_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_block_gossip;
        break;
      }

      // optional .abci.BlockGossip block_gossip = 3;
      case 3: {
        if (tag == 26) {
         parse_block_gossip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_gossip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ConsensusParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ConsensusParams)
  return false;
#undef DO_
}

void ConsensusParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ConsensusParams)
  // optional .abci.BlockSize block_size = 1;
  if (this->has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->block_size_, output);
  }

  // optional .abci.TxSize tx_size = 2;
  if (this->has_tx_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tx_size_, output);
  }

  // optional .abci.BlockGossip block_gossip = 3;
  if (this->has_block_gossip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->block_gossip_, output);
  }

  // @@protoc_insertion_point(serialize_end:abci.ConsensusParams)
}

::google::protobuf::uint8* ConsensusParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.ConsensusParams)
  // optional .abci.BlockSize block_size = 1;
  if (this->has_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->block_size_, false, target);
  }

  // optional .abci.TxSize tx_size = 2;
  if (this->has_tx_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tx_size_, false, target);
  }

  // optional .abci.BlockGossip block_gossip = 3;
  if (this->has_block_gossip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->block_gossip_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.ConsensusParams)
  return target;
}

int ConsensusParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ConsensusParams)
  int total_size = 0;

  // optional .abci.BlockSize block_size = 1;
  if (this->has_block_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_size_);
  }

  // optional .abci.TxSize tx_size = 2;
  if (this->has_tx_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tx_size_);
  }

  // optional .abci.BlockGossip block_gossip = 3;
  if (this->has_block_gossip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_gossip_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ConsensusParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConsensusParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ConsensusParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ConsensusParams)
    MergeFrom(*source);
  }
}

void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ConsensusParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_block_size()) {
    mutable_block_size()->::abci::BlockSize::MergeFrom(from.block_size());
  }
  if (from.has_tx_size()) {
    mutable_tx_size()->::abci::TxSize::MergeFrom(from.tx_size());
  }
  if (from.has_block_gossip()) {
    mutable_block_gossip()->::abci::BlockGossip::MergeFrom(from.block_gossip());
  }
}

void ConsensusParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {

  return true;
}

void ConsensusParams::Swap(ConsensusParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusParams::InternalSwap(ConsensusParams* other) {
  std::swap(block_size_, other->block_size_);
  std::swap(tx_size_, other->tx_size_);
  std::swap(block_gossip_, other->block_gossip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusParams_descriptor_;
  metadata.reflection = ConsensusParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusParams

// optional .abci.BlockSize block_size = 1;
bool ConsensusParams::has_block_size() const {
  return !_is_default_instance_ && block_size_ != NULL;
}
void ConsensusParams::clear_block_size() {
  if (GetArenaNoVirtual() == NULL && block_size_ != NULL) delete block_size_;
  block_size_ = NULL;
}
const ::abci::BlockSize& ConsensusParams::block_size() const {
  // @@protoc_insertion_point(field_get:abci.ConsensusParams.block_size)
  return block_size_ != NULL ? *block_size_ : *default_instance_->block_size_;
}
::abci::BlockSize* ConsensusParams::mutable_block_size() {
  
  if (block_size_ == NULL) {
    block_size_ = new ::abci::BlockSize;
  }
  // @@protoc_insertion_point(field_mutable:abci.ConsensusParams.block_size)
  return block_size_;
}
::abci::BlockSize* ConsensusParams::release_block_size() {
  // @@protoc_insertion_point(field_release:abci.ConsensusParams.block_size)
  
  ::abci::BlockSize* temp = block_size_;
  block_size_ = NULL;
  return temp;
}
void ConsensusParams::set_allocated_block_size(::abci::BlockSize* block_size) {
  delete block_size_;
  block_size_ = block_size;
  if (block_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ConsensusParams.block_size)
}

// optional .abci.TxSize tx_size = 2;
bool ConsensusParams::has_tx_size() const {
  return !_is_default_instance_ && tx_size_ != NULL;
}
void ConsensusParams::clear_tx_size() {
  if (GetArenaNoVirtual() == NULL && tx_size_ != NULL) delete tx_size_;
  tx_size_ = NULL;
}
const ::abci::TxSize& ConsensusParams::tx_size() const {
  // @@protoc_insertion_point(field_get:abci.ConsensusParams.tx_size)
  return tx_size_ != NULL ? *tx_size_ : *default_instance_->tx_size_;
}
::abci::TxSize* ConsensusParams::mutable_tx_size() {
  
  if (tx_size_ == NULL) {
    tx_size_ = new ::abci::TxSize;
  }
  // @@protoc_insertion_point(field_mutable:abci.ConsensusParams.tx_size)
  return tx_size_;
}
::abci::TxSize* ConsensusParams::release_tx_size() {
  // @@protoc_insertion_point(field_release:abci.ConsensusParams.tx_size)
  
  ::abci::TxSize* temp = tx_size_;
  tx_size_ = NULL;
  return temp;
}
void ConsensusParams::set_allocated_tx_size(::abci::TxSize* tx_size) {
  delete tx_size_;
  tx_size_ = tx_size;
  if (tx_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ConsensusParams.tx_size)
}

// optional .abci.BlockGossip block_gossip = 3;
bool ConsensusParams::has_block_gossip() const {
  return !_is_default_instance_ && block_gossip_ != NULL;
}
void ConsensusParams::clear_block_gossip() {
  if (GetArenaNoVirtual() == NULL && block_gossip_ != NULL) delete block_gossip_;
  block_gossip_ = NULL;
}
const ::abci::BlockGossip& ConsensusParams::block_gossip() const {
  // @@protoc_insertion_point(field_get:abci.ConsensusParams.block_gossip)
  return block_gossip_ != NULL ? *block_gossip_ : *default_instance_->block_gossip_;
}
::abci::BlockGossip* ConsensusParams::mutable_block_gossip() {
  
  if (block_gossip_ == NULL) {
    block_gossip_ = new ::abci::BlockGossip;
  }
  // @@protoc_insertion_point(field_mutable:abci.ConsensusParams.block_gossip)
  return block_gossip_;
}
::abci::BlockGossip* ConsensusParams::release_block_gossip() {
  // @@protoc_insertion_point(field_release:abci.ConsensusParams.block_gossip)
  
  ::abci::BlockGossip* temp = block_gossip_;
  block_gossip_ = NULL;
  return temp;
}
void ConsensusParams::set_allocated_block_gossip(::abci::BlockGossip* block_gossip) {
  delete block_gossip_;
  block_gossip_ = block_gossip;
  if (block_gossip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.ConsensusParams.block_gossip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockSize::kMaxBytesFieldNumber;
const int BlockSize::kMaxTxsFieldNumber;
const int BlockSize::kMaxGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockSize::BlockSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.BlockSize)
}

void BlockSize::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockSize::BlockSize(const BlockSize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.BlockSize)
}

void BlockSize::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  max_bytes_ = 0;
  max_txs_ = 0;
  max_gas_ = GOOGLE_LONGLONG(0);
}

BlockSize::~BlockSize() {
  // @@protoc_insertion_point(destructor:abci.BlockSize)
  SharedDtor();
}

void BlockSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockSize_descriptor_;
}

const BlockSize& BlockSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

BlockSize* BlockSize::default_instance_ = NULL;

BlockSize* BlockSize::New(::google::protobuf::Arena* arena) const {
  BlockSize* n = new BlockSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockSize::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.BlockSize)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BlockSize, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlockSize*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_bytes_, max_gas_);

#undef ZR_HELPER_
#undef ZR_

}

bool BlockSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.BlockSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_bytes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_txs;
        break;
      }

      // optional int32 max_txs = 2;
      case 2: {
        if (tag == 16) {
         parse_max_txs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_txs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_gas;
        break;
      }

      // optional int64 max_gas = 3;
      case 3: {
        if (tag == 24) {
         parse_max_gas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_gas_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.BlockSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.BlockSize)
  return false;
#undef DO_
}

void BlockSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.BlockSize)
  // optional int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_bytes(), output);
  }

  // optional int32 max_txs = 2;
  if (this->max_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_txs(), output);
  }

  // optional int64 max_gas = 3;
  if (this->max_gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_gas(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.BlockSize)
}

::google::protobuf::uint8* BlockSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.BlockSize)
  // optional int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_bytes(), target);
  }

  // optional int32 max_txs = 2;
  if (this->max_txs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_txs(), target);
  }

  // optional int64 max_gas = 3;
  if (this->max_gas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_gas(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.BlockSize)
  return target;
}

int BlockSize::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.BlockSize)
  int total_size = 0;

  // optional int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bytes());
  }

  // optional int32 max_txs = 2;
  if (this->max_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_txs());
  }

  // optional int64 max_gas = 3;
  if (this->max_gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_gas());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.BlockSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlockSize* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.BlockSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.BlockSize)
    MergeFrom(*source);
  }
}

void BlockSize::MergeFrom(const BlockSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.BlockSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.max_bytes() != 0) {
    set_max_bytes(from.max_bytes());
  }
  if (from.max_txs() != 0) {
    set_max_txs(from.max_txs());
  }
  if (from.max_gas() != 0) {
    set_max_gas(from.max_gas());
  }
}

void BlockSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.BlockSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockSize::CopyFrom(const BlockSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.BlockSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSize::IsInitialized() const {

  return true;
}

void BlockSize::Swap(BlockSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockSize::InternalSwap(BlockSize* other) {
  std::swap(max_bytes_, other->max_bytes_);
  std::swap(max_txs_, other->max_txs_);
  std::swap(max_gas_, other->max_gas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockSize_descriptor_;
  metadata.reflection = BlockSize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockSize

// optional int32 max_bytes = 1;
void BlockSize::clear_max_bytes() {
  max_bytes_ = 0;
}
 ::google::protobuf::int32 BlockSize::max_bytes() const {
  // @@protoc_insertion_point(field_get:abci.BlockSize.max_bytes)
  return max_bytes_;
}
 void BlockSize::set_max_bytes(::google::protobuf::int32 value) {
  
  max_bytes_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockSize.max_bytes)
}

// optional int32 max_txs = 2;
void BlockSize::clear_max_txs() {
  max_txs_ = 0;
}
 ::google::protobuf::int32 BlockSize::max_txs() const {
  // @@protoc_insertion_point(field_get:abci.BlockSize.max_txs)
  return max_txs_;
}
 void BlockSize::set_max_txs(::google::protobuf::int32 value) {
  
  max_txs_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockSize.max_txs)
}

// optional int64 max_gas = 3;
void BlockSize::clear_max_gas() {
  max_gas_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BlockSize::max_gas() const {
  // @@protoc_insertion_point(field_get:abci.BlockSize.max_gas)
  return max_gas_;
}
 void BlockSize::set_max_gas(::google::protobuf::int64 value) {
  
  max_gas_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockSize.max_gas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxSize::kMaxBytesFieldNumber;
const int TxSize::kMaxGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxSize::TxSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.TxSize)
}

void TxSize::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TxSize::TxSize(const TxSize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.TxSize)
}

void TxSize::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  max_bytes_ = 0;
  max_gas_ = GOOGLE_LONGLONG(0);
}

TxSize::~TxSize() {
  // @@protoc_insertion_point(destructor:abci.TxSize)
  SharedDtor();
}

void TxSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TxSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxSize_descriptor_;
}

const TxSize& TxSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

TxSize* TxSize::default_instance_ = NULL;

TxSize* TxSize::New(::google::protobuf::Arena* arena) const {
  TxSize* n = new TxSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxSize::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.TxSize)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TxSize, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TxSize*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_gas_, max_bytes_);

#undef ZR_HELPER_
#undef ZR_

}

bool TxSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.TxSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_bytes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_gas;
        break;
      }

      // optional int64 max_gas = 2;
      case 2: {
        if (tag == 16) {
         parse_max_gas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_gas_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.TxSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.TxSize)
  return false;
#undef DO_
}

void TxSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.TxSize)
  // optional int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_bytes(), output);
  }

  // optional int64 max_gas = 2;
  if (this->max_gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_gas(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.TxSize)
}

::google::protobuf::uint8* TxSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.TxSize)
  // optional int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_bytes(), target);
  }

  // optional int64 max_gas = 2;
  if (this->max_gas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_gas(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.TxSize)
  return target;
}

int TxSize::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.TxSize)
  int total_size = 0;

  // optional int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bytes());
  }

  // optional int64 max_gas = 2;
  if (this->max_gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_gas());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.TxSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TxSize* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TxSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.TxSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.TxSize)
    MergeFrom(*source);
  }
}

void TxSize::MergeFrom(const TxSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.TxSize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.max_bytes() != 0) {
    set_max_bytes(from.max_bytes());
  }
  if (from.max_gas() != 0) {
    set_max_gas(from.max_gas());
  }
}

void TxSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.TxSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxSize::CopyFrom(const TxSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.TxSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxSize::IsInitialized() const {

  return true;
}

void TxSize::Swap(TxSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxSize::InternalSwap(TxSize* other) {
  std::swap(max_bytes_, other->max_bytes_);
  std::swap(max_gas_, other->max_gas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxSize_descriptor_;
  metadata.reflection = TxSize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxSize

// optional int32 max_bytes = 1;
void TxSize::clear_max_bytes() {
  max_bytes_ = 0;
}
 ::google::protobuf::int32 TxSize::max_bytes() const {
  // @@protoc_insertion_point(field_get:abci.TxSize.max_bytes)
  return max_bytes_;
}
 void TxSize::set_max_bytes(::google::protobuf::int32 value) {
  
  max_bytes_ = value;
  // @@protoc_insertion_point(field_set:abci.TxSize.max_bytes)
}

// optional int64 max_gas = 2;
void TxSize::clear_max_gas() {
  max_gas_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 TxSize::max_gas() const {
  // @@protoc_insertion_point(field_get:abci.TxSize.max_gas)
  return max_gas_;
}
 void TxSize::set_max_gas(::google::protobuf::int64 value) {
  
  max_gas_ = value;
  // @@protoc_insertion_point(field_set:abci.TxSize.max_gas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockGossip::kBlockPartSizeBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockGossip::BlockGossip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.BlockGossip)
}

void BlockGossip::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockGossip::BlockGossip(const BlockGossip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.BlockGossip)
}

void BlockGossip::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  block_part_size_bytes_ = 0;
}

BlockGossip::~BlockGossip() {
  // @@protoc_insertion_point(destructor:abci.BlockGossip)
  SharedDtor();
}

void BlockGossip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockGossip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockGossip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockGossip_descriptor_;
}

const BlockGossip& BlockGossip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

BlockGossip* BlockGossip::default_instance_ = NULL;

BlockGossip* BlockGossip::New(::google::protobuf::Arena* arena) const {
  BlockGossip* n = new BlockGossip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockGossip::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.BlockGossip)
  block_part_size_bytes_ = 0;
}

bool BlockGossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.BlockGossip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 block_part_size_bytes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_part_size_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.BlockGossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.BlockGossip)
  return false;
#undef DO_
}

void BlockGossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.BlockGossip)
  // optional int32 block_part_size_bytes = 1;
  if (this->block_part_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->block_part_size_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.BlockGossip)
}

::google::protobuf::uint8* BlockGossip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.BlockGossip)
  // optional int32 block_part_size_bytes = 1;
  if (this->block_part_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->block_part_size_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.BlockGossip)
  return target;
}

int BlockGossip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.BlockGossip)
  int total_size = 0;

  // optional int32 block_part_size_bytes = 1;
  if (this->block_part_size_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->block_part_size_bytes());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockGossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.BlockGossip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlockGossip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockGossip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.BlockGossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.BlockGossip)
    MergeFrom(*source);
  }
}

void BlockGossip::MergeFrom(const BlockGossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.BlockGossip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.block_part_size_bytes() != 0) {
    set_block_part_size_bytes(from.block_part_size_bytes());
  }
}

void BlockGossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.BlockGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockGossip::CopyFrom(const BlockGossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.BlockGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockGossip::IsInitialized() const {

  return true;
}

void BlockGossip::Swap(BlockGossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockGossip::InternalSwap(BlockGossip* other) {
  std::swap(block_part_size_bytes_, other->block_part_size_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockGossip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockGossip_descriptor_;
  metadata.reflection = BlockGossip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockGossip

// optional int32 block_part_size_bytes = 1;
void BlockGossip::clear_block_part_size_bytes() {
  block_part_size_bytes_ = 0;
}
 ::google::protobuf::int32 BlockGossip::block_part_size_bytes() const {
  // @@protoc_insertion_point(field_get:abci.BlockGossip.block_part_size_bytes)
  return block_part_size_bytes_;
}
 void BlockGossip::set_block_part_size_bytes(::google::protobuf::int32 value) {
  
  block_part_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:abci.BlockGossip.block_part_size_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kChainIdFieldNumber;
const int Header::kHeightFieldNumber;
const int Header::kTimeFieldNumber;
const int Header::kNumTxsFieldNumber;
const int Header::kLastBlockIdFieldNumber;
const int Header::kLastCommitHashFieldNumber;
const int Header::kDataHashFieldNumber;
const int Header::kValidatorsHashFieldNumber;
const int Header::kAppHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Header)
}

void Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  last_block_id_ = const_cast< ::abci::BlockID*>(&::abci::BlockID::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.Header)
}

void Header::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  num_txs_ = 0;
  last_block_id_ = NULL;
  last_commit_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:abci.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete last_block_id_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(height_, time_);
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_txs_ = 0;
  if (GetArenaNoVirtual() == NULL && last_block_id_ != NULL) delete last_block_id_;
  last_block_id_ = NULL;
  last_commit_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chain_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), this->chain_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.Header.chain_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int64 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_txs;
        break;
      }

      // optional int32 num_txs = 4;
      case 4: {
        if (tag == 32) {
         parse_num_txs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_txs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_last_block_id;
        break;
      }

      // optional .abci.BlockID last_block_id = 5;
      case 5: {
        if (tag == 42) {
         parse_last_block_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_block_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_last_commit_hash;
        break;
      }

      // optional bytes last_commit_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_last_commit_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_commit_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_hash;
        break;
      }

      // optional bytes data_hash = 7;
      case 7: {
        if (tag == 58) {
         parse_data_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_validators_hash;
        break;
      }

      // optional bytes validators_hash = 8;
      case 8: {
        if (tag == 66) {
         parse_validators_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_validators_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_app_hash;
        break;
      }

      // optional bytes app_hash = 9;
      case 9: {
        if (tag == 74) {
         parse_app_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Header)
  // optional string chain_id = 1;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.Header.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chain_id(), output);
  }

  // optional int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  // optional int64 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional int32 num_txs = 4;
  if (this->num_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_txs(), output);
  }

  // optional .abci.BlockID last_block_id = 5;
  if (this->has_last_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->last_block_id_, output);
  }

  // optional bytes last_commit_hash = 6;
  if (this->last_commit_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->last_commit_hash(), output);
  }

  // optional bytes data_hash = 7;
  if (this->data_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data_hash(), output);
  }

  // optional bytes validators_hash = 8;
  if (this->validators_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->validators_hash(), output);
  }

  // optional bytes app_hash = 9;
  if (this->app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->app_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.Header)
  // optional string chain_id = 1;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), this->chain_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.Header.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chain_id(), target);
  }

  // optional int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  // optional int64 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional int32 num_txs = 4;
  if (this->num_txs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_txs(), target);
  }

  // optional .abci.BlockID last_block_id = 5;
  if (this->has_last_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->last_block_id_, false, target);
  }

  // optional bytes last_commit_hash = 6;
  if (this->last_commit_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->last_commit_hash(), target);
  }

  // optional bytes data_hash = 7;
  if (this->data_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data_hash(), target);
  }

  // optional bytes validators_hash = 8;
  if (this->validators_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->validators_hash(), target);
  }

  // optional bytes app_hash = 9;
  if (this->app_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->app_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.Header)
  return target;
}

int Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Header)
  int total_size = 0;

  // optional string chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // optional int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // optional int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional int32 num_txs = 4;
  if (this->num_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_txs());
  }

  // optional .abci.BlockID last_block_id = 5;
  if (this->has_last_block_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->last_block_id_);
  }

  // optional bytes last_commit_hash = 6;
  if (this->last_commit_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_commit_hash());
  }

  // optional bytes data_hash = 7;
  if (this->data_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_hash());
  }

  // optional bytes validators_hash = 8;
  if (this->validators_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->validators_hash());
  }

  // optional bytes app_hash = 9;
  if (this->app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.num_txs() != 0) {
    set_num_txs(from.num_txs());
  }
  if (from.has_last_block_id()) {
    mutable_last_block_id()->::abci::BlockID::MergeFrom(from.last_block_id());
  }
  if (from.last_commit_hash().size() > 0) {

    last_commit_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_commit_hash_);
  }
  if (from.data_hash().size() > 0) {

    data_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_hash_);
  }
  if (from.validators_hash().size() > 0) {

    validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validators_hash_);
  }
  if (from.app_hash().size() > 0) {

    app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_hash_);
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  chain_id_.Swap(&other->chain_id_);
  std::swap(height_, other->height_);
  std::swap(time_, other->time_);
  std::swap(num_txs_, other->num_txs_);
  std::swap(last_block_id_, other->last_block_id_);
  last_commit_hash_.Swap(&other->last_commit_hash_);
  data_hash_.Swap(&other->data_hash_);
  validators_hash_.Swap(&other->validators_hash_);
  app_hash_.Swap(&other->app_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional string chain_id = 1;
void Header::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Header::chain_id() const {
  // @@protoc_insertion_point(field_get:abci.Header.chain_id)
  return chain_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.chain_id)
}
 void Header::set_chain_id(const char* value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.chain_id)
}
 void Header::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.chain_id)
}
 ::std::string* Header::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_chain_id() {
  // @@protoc_insertion_point(field_release:abci.Header.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.chain_id)
}

// optional int64 height = 2;
void Header::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Header::height() const {
  // @@protoc_insertion_point(field_get:abci.Header.height)
  return height_;
}
 void Header::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.Header.height)
}

// optional int64 time = 3;
void Header::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Header::time() const {
  // @@protoc_insertion_point(field_get:abci.Header.time)
  return time_;
}
 void Header::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:abci.Header.time)
}

// optional int32 num_txs = 4;
void Header::clear_num_txs() {
  num_txs_ = 0;
}
 ::google::protobuf::int32 Header::num_txs() const {
  // @@protoc_insertion_point(field_get:abci.Header.num_txs)
  return num_txs_;
}
 void Header::set_num_txs(::google::protobuf::int32 value) {
  
  num_txs_ = value;
  // @@protoc_insertion_point(field_set:abci.Header.num_txs)
}

// optional .abci.BlockID last_block_id = 5;
bool Header::has_last_block_id() const {
  return !_is_default_instance_ && last_block_id_ != NULL;
}
void Header::clear_last_block_id() {
  if (GetArenaNoVirtual() == NULL && last_block_id_ != NULL) delete last_block_id_;
  last_block_id_ = NULL;
}
const ::abci::BlockID& Header::last_block_id() const {
  // @@protoc_insertion_point(field_get:abci.Header.last_block_id)
  return last_block_id_ != NULL ? *last_block_id_ : *default_instance_->last_block_id_;
}
::abci::BlockID* Header::mutable_last_block_id() {
  
  if (last_block_id_ == NULL) {
    last_block_id_ = new ::abci::BlockID;
  }
  // @@protoc_insertion_point(field_mutable:abci.Header.last_block_id)
  return last_block_id_;
}
::abci::BlockID* Header::release_last_block_id() {
  // @@protoc_insertion_point(field_release:abci.Header.last_block_id)
  
  ::abci::BlockID* temp = last_block_id_;
  last_block_id_ = NULL;
  return temp;
}
void Header::set_allocated_last_block_id(::abci::BlockID* last_block_id) {
  delete last_block_id_;
  last_block_id_ = last_block_id;
  if (last_block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Header.last_block_id)
}

// optional bytes last_commit_hash = 6;
void Header::clear_last_commit_hash() {
  last_commit_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Header::last_commit_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.last_commit_hash)
  return last_commit_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_last_commit_hash(const ::std::string& value) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.last_commit_hash)
}
 void Header::set_last_commit_hash(const char* value) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.last_commit_hash)
}
 void Header::set_last_commit_hash(const void* value, size_t size) {
  
  last_commit_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.last_commit_hash)
}
 ::std::string* Header::mutable_last_commit_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.last_commit_hash)
  return last_commit_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_last_commit_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.last_commit_hash)
  
  return last_commit_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_last_commit_hash(::std::string* last_commit_hash) {
  if (last_commit_hash != NULL) {
    
  } else {
    
  }
  last_commit_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_commit_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.last_commit_hash)
}

// optional bytes data_hash = 7;
void Header::clear_data_hash() {
  data_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Header::data_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.data_hash)
  return data_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_data_hash(const ::std::string& value) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.data_hash)
}
 void Header::set_data_hash(const char* value) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.data_hash)
}
 void Header::set_data_hash(const void* value, size_t size) {
  
  data_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.data_hash)
}
 ::std::string* Header::mutable_data_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.data_hash)
  return data_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_data_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.data_hash)
  
  return data_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_data_hash(::std::string* data_hash) {
  if (data_hash != NULL) {
    
  } else {
    
  }
  data_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.data_hash)
}

// optional bytes validators_hash = 8;
void Header::clear_validators_hash() {
  validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Header::validators_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.validators_hash)
  return validators_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_validators_hash(const ::std::string& value) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.validators_hash)
}
 void Header::set_validators_hash(const char* value) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.validators_hash)
}
 void Header::set_validators_hash(const void* value, size_t size) {
  
  validators_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.validators_hash)
}
 ::std::string* Header::mutable_validators_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.validators_hash)
  return validators_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_validators_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.validators_hash)
  
  return validators_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_validators_hash(::std::string* validators_hash) {
  if (validators_hash != NULL) {
    
  } else {
    
  }
  validators_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), validators_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.validators_hash)
}

// optional bytes app_hash = 9;
void Header::clear_app_hash() {
  app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Header::app_hash() const {
  // @@protoc_insertion_point(field_get:abci.Header.app_hash)
  return app_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_app_hash(const ::std::string& value) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Header.app_hash)
}
 void Header::set_app_hash(const char* value) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Header.app_hash)
}
 void Header::set_app_hash(const void* value, size_t size) {
  
  app_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Header.app_hash)
}
 ::std::string* Header::mutable_app_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.Header.app_hash)
  return app_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_app_hash() {
  // @@protoc_insertion_point(field_release:abci.Header.app_hash)
  
  return app_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_app_hash(::std::string* app_hash) {
  if (app_hash != NULL) {
    
  } else {
    
  }
  app_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_hash);
  // @@protoc_insertion_point(field_set_allocated:abci.Header.app_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockID::kHashFieldNumber;
const int BlockID::kPartsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockID::BlockID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.BlockID)
}

void BlockID::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  parts_ = const_cast< ::abci::PartSetHeader*>(&::abci::PartSetHeader::default_instance());
}

BlockID::BlockID(const BlockID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.BlockID)
}

void BlockID::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parts_ = NULL;
}

BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:abci.BlockID)
  SharedDtor();
}

void BlockID::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete parts_;
  }
}

void BlockID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockID_descriptor_;
}

const BlockID& BlockID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

BlockID* BlockID::default_instance_ = NULL;

BlockID* BlockID::New(::google::protobuf::Arena* arena) const {
  BlockID* n = new BlockID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.BlockID)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && parts_ != NULL) delete parts_;
  parts_ = NULL;
}

bool BlockID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.BlockID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parts;
        break;
      }

      // optional .abci.PartSetHeader parts = 2;
      case 2: {
        if (tag == 18) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.BlockID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.BlockID)
  return false;
#undef DO_
}

void BlockID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.BlockID)
  // optional bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // optional .abci.PartSetHeader parts = 2;
  if (this->has_parts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parts_, output);
  }

  // @@protoc_insertion_point(serialize_end:abci.BlockID)
}

::google::protobuf::uint8* BlockID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.BlockID)
  // optional bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // optional .abci.PartSetHeader parts = 2;
  if (this->has_parts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->parts_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.BlockID)
  return target;
}

int BlockID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.BlockID)
  int total_size = 0;

  // optional bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // optional .abci.PartSetHeader parts = 2;
  if (this->has_parts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->parts_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.BlockID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlockID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.BlockID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.BlockID)
    MergeFrom(*source);
  }
}

void BlockID::MergeFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.BlockID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_parts()) {
    mutable_parts()->::abci::PartSetHeader::MergeFrom(from.parts());
  }
}

void BlockID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockID::IsInitialized() const {

  return true;
}

void BlockID::Swap(BlockID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockID::InternalSwap(BlockID* other) {
  hash_.Swap(&other->hash_);
  std::swap(parts_, other->parts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockID_descriptor_;
  metadata.reflection = BlockID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockID

// optional bytes hash = 1;
void BlockID::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BlockID::hash() const {
  // @@protoc_insertion_point(field_get:abci.BlockID.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockID::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.BlockID.hash)
}
 void BlockID::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.BlockID.hash)
}
 void BlockID::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.BlockID.hash)
}
 ::std::string* BlockID::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.BlockID.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockID::release_hash() {
  // @@protoc_insertion_point(field_release:abci.BlockID.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockID::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:abci.BlockID.hash)
}

// optional .abci.PartSetHeader parts = 2;
bool BlockID::has_parts() const {
  return !_is_default_instance_ && parts_ != NULL;
}
void BlockID::clear_parts() {
  if (GetArenaNoVirtual() == NULL && parts_ != NULL) delete parts_;
  parts_ = NULL;
}
const ::abci::PartSetHeader& BlockID::parts() const {
  // @@protoc_insertion_point(field_get:abci.BlockID.parts)
  return parts_ != NULL ? *parts_ : *default_instance_->parts_;
}
::abci::PartSetHeader* BlockID::mutable_parts() {
  
  if (parts_ == NULL) {
    parts_ = new ::abci::PartSetHeader;
  }
  // @@protoc_insertion_point(field_mutable:abci.BlockID.parts)
  return parts_;
}
::abci::PartSetHeader* BlockID::release_parts() {
  // @@protoc_insertion_point(field_release:abci.BlockID.parts)
  
  ::abci::PartSetHeader* temp = parts_;
  parts_ = NULL;
  return temp;
}
void BlockID::set_allocated_parts(::abci::PartSetHeader* parts) {
  delete parts_;
  parts_ = parts;
  if (parts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:abci.BlockID.parts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartSetHeader::kTotalFieldNumber;
const int PartSetHeader::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartSetHeader::PartSetHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.PartSetHeader)
}

void PartSetHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PartSetHeader::PartSetHeader(const PartSetHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.PartSetHeader)
}

void PartSetHeader::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  total_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PartSetHeader::~PartSetHeader() {
  // @@protoc_insertion_point(destructor:abci.PartSetHeader)
  SharedDtor();
}

void PartSetHeader::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PartSetHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartSetHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartSetHeader_descriptor_;
}

const PartSetHeader& PartSetHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

PartSetHeader* PartSetHeader::default_instance_ = NULL;

PartSetHeader* PartSetHeader::New(::google::protobuf::Arena* arena) const {
  PartSetHeader* n = new PartSetHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.PartSetHeader)
  total_ = 0;
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PartSetHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.PartSetHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.PartSetHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.PartSetHeader)
  return false;
#undef DO_
}

void PartSetHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.PartSetHeader)
  // optional int32 total = 1;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.PartSetHeader)
}

::google::protobuf::uint8* PartSetHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.PartSetHeader)
  // optional int32 total = 1;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.PartSetHeader)
  return target;
}

int PartSetHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.PartSetHeader)
  int total_size = 0;

  // optional int32 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartSetHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.PartSetHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PartSetHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PartSetHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.PartSetHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.PartSetHeader)
    MergeFrom(*source);
  }
}

void PartSetHeader::MergeFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.PartSetHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void PartSetHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartSetHeader::CopyFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartSetHeader::IsInitialized() const {

  return true;
}

void PartSetHeader::Swap(PartSetHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartSetHeader::InternalSwap(PartSetHeader* other) {
  std::swap(total_, other->total_);
  hash_.Swap(&other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartSetHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartSetHeader_descriptor_;
  metadata.reflection = PartSetHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartSetHeader

// optional int32 total = 1;
void PartSetHeader::clear_total() {
  total_ = 0;
}
 ::google::protobuf::int32 PartSetHeader::total() const {
  // @@protoc_insertion_point(field_get:abci.PartSetHeader.total)
  return total_;
}
 void PartSetHeader::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:abci.PartSetHeader.total)
}

// optional bytes hash = 2;
void PartSetHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PartSetHeader::hash() const {
  // @@protoc_insertion_point(field_get:abci.PartSetHeader.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartSetHeader::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.PartSetHeader.hash)
}
 void PartSetHeader::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.PartSetHeader.hash)
}
 void PartSetHeader::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.PartSetHeader.hash)
}
 ::std::string* PartSetHeader::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:abci.PartSetHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PartSetHeader::release_hash() {
  // @@protoc_insertion_point(field_release:abci.PartSetHeader.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PartSetHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:abci.PartSetHeader.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Validator::kPubKeyFieldNumber;
const int Validator::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Validator::Validator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Validator)
}

void Validator::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Validator::Validator(const Validator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.Validator)
}

void Validator::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = GOOGLE_LONGLONG(0);
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:abci.Validator)
  SharedDtor();
}

void Validator::SharedDtor() {
  pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Validator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Validator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Validator_descriptor_;
}

const Validator& Validator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

Validator* Validator::default_instance_ = NULL;

Validator* Validator::New(::google::protobuf::Arena* arena) const {
  Validator* n = new Validator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Validator)
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = GOOGLE_LONGLONG(0);
}

bool Validator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Validator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pub_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }

      // optional int64 power = 2;
      case 2: {
        if (tag == 16) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Validator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Validator)
  return false;
#undef DO_
}

void Validator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Validator)
  // optional bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pub_key(), output);
  }

  // optional int64 power = 2;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->power(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.Validator)
}

::google::protobuf::uint8* Validator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.Validator)
  // optional bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pub_key(), target);
  }

  // optional int64 power = 2;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->power(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.Validator)
  return target;
}

int Validator::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Validator)
  int total_size = 0;

  // optional bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pub_key());
  }

  // optional int64 power = 2;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->power());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Validator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Validator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Validator* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Validator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Validator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Validator)
    MergeFrom(*source);
  }
}

void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Validator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
}

void Validator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {

  return true;
}

void Validator::Swap(Validator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Validator::InternalSwap(Validator* other) {
  pub_key_.Swap(&other->pub_key_);
  std::swap(power_, other->power_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Validator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Validator_descriptor_;
  metadata.reflection = Validator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Validator

// optional bytes pub_key = 1;
void Validator::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Validator::pub_key() const {
  // @@protoc_insertion_point(field_get:abci.Validator.pub_key)
  return pub_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Validator::set_pub_key(const ::std::string& value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Validator.pub_key)
}
 void Validator::set_pub_key(const char* value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Validator.pub_key)
}
 void Validator::set_pub_key(const void* value, size_t size) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Validator.pub_key)
}
 ::std::string* Validator::mutable_pub_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.Validator.pub_key)
  return pub_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Validator::release_pub_key() {
  // @@protoc_insertion_point(field_release:abci.Validator.pub_key)
  
  return pub_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Validator::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key != NULL) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:abci.Validator.pub_key)
}

// optional int64 power = 2;
void Validator::clear_power() {
  power_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Validator::power() const {
  // @@protoc_insertion_point(field_get:abci.Validator.power)
  return power_;
}
 void Validator::set_power(::google::protobuf::int64 value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:abci.Validator.power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Evidence::kPubKeyFieldNumber;
const int Evidence::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Evidence::Evidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Evidence)
}

void Evidence::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Evidence::Evidence(const Evidence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abci.Evidence)
}

void Evidence::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_LONGLONG(0);
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:abci.Evidence)
  SharedDtor();
}

void Evidence::SharedDtor() {
  pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Evidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Evidence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Evidence_descriptor_;
}

const Evidence& Evidence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_abci_2eproto();
  return *default_instance_;
}

Evidence* Evidence::default_instance_ = NULL;

Evidence* Evidence::New(::google::protobuf::Arena* arena) const {
  Evidence* n = new Evidence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Evidence)
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_LONGLONG(0);
}

bool Evidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Evidence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pub_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int64 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Evidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Evidence)
  return false;
#undef DO_
}

void Evidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Evidence)
  // optional bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pub_key(), output);
  }

  // optional int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:abci.Evidence)
}

::google::protobuf::uint8* Evidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:abci.Evidence)
  // optional bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pub_key(), target);
  }

  // optional int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:abci.Evidence)
  return target;
}

int Evidence::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Evidence)
  int total_size = 0;

  // optional bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pub_key());
  }

  // optional int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Evidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Evidence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Evidence* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Evidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Evidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Evidence)
    MergeFrom(*source);
  }
}

void Evidence::MergeFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Evidence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Evidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {

  return true;
}

void Evidence::Swap(Evidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Evidence::InternalSwap(Evidence* other) {
  pub_key_.Swap(&other->pub_key_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Evidence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Evidence_descriptor_;
  metadata.reflection = Evidence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Evidence

// optional bytes pub_key = 1;
void Evidence::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Evidence::pub_key() const {
  // @@protoc_insertion_point(field_get:abci.Evidence.pub_key)
  return pub_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Evidence::set_pub_key(const ::std::string& value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:abci.Evidence.pub_key)
}
 void Evidence::set_pub_key(const char* value) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:abci.Evidence.pub_key)
}
 void Evidence::set_pub_key(const void* value, size_t size) {
  
  pub_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:abci.Evidence.pub_key)
}
 ::std::string* Evidence::mutable_pub_key() {
  
  // @@protoc_insertion_point(field_mutable:abci.Evidence.pub_key)
  return pub_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Evidence::release_pub_key() {
  // @@protoc_insertion_point(field_release:abci.Evidence.pub_key)
  
  return pub_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Evidence::set_allocated_pub_key(::std::string* pub_key) {
  if (pub_key != NULL) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:abci.Evidence.pub_key)
}

// optional int64 height = 2;
void Evidence::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Evidence::height() const {
  // @@protoc_insertion_point(field_get:abci.Evidence.height)
  return height_;
}
 void Evidence::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:abci.Evidence.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace abci

// @@protoc_insertion_point(global_scope)
