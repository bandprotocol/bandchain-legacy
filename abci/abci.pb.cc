// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abci.proto

#include "abci.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace abci {
class KVPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KVPair>
      _instance;
} _KVPair_default_instance_;
class KI64PairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KI64Pair>
      _instance;
} _KI64Pair_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
  const ::abci::RequestEcho* echo_;
  const ::abci::RequestFlush* flush_;
  const ::abci::RequestInfo* info_;
  const ::abci::RequestSetOption* set_option_;
  const ::abci::RequestInitChain* init_chain_;
  const ::abci::RequestQuery* query_;
  const ::abci::RequestBeginBlock* begin_block_;
  const ::abci::RequestCheckTx* check_tx_;
  const ::abci::RequestDeliverTx* deliver_tx_;
  const ::abci::RequestEndBlock* end_block_;
  const ::abci::RequestCommit* commit_;
} _Request_default_instance_;
class RequestEchoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestEcho>
      _instance;
} _RequestEcho_default_instance_;
class RequestFlushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestFlush>
      _instance;
} _RequestFlush_default_instance_;
class RequestInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestInfo>
      _instance;
} _RequestInfo_default_instance_;
class RequestSetOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestSetOption>
      _instance;
} _RequestSetOption_default_instance_;
class RequestInitChainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestInitChain>
      _instance;
} _RequestInitChain_default_instance_;
class RequestQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQuery>
      _instance;
} _RequestQuery_default_instance_;
class RequestBeginBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestBeginBlock>
      _instance;
} _RequestBeginBlock_default_instance_;
class RequestCheckTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestCheckTx>
      _instance;
} _RequestCheckTx_default_instance_;
class RequestDeliverTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestDeliverTx>
      _instance;
} _RequestDeliverTx_default_instance_;
class RequestEndBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestEndBlock>
      _instance;
} _RequestEndBlock_default_instance_;
class RequestCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestCommit>
      _instance;
} _RequestCommit_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response>
      _instance;
  const ::abci::ResponseException* exception_;
  const ::abci::ResponseEcho* echo_;
  const ::abci::ResponseFlush* flush_;
  const ::abci::ResponseInfo* info_;
  const ::abci::ResponseSetOption* set_option_;
  const ::abci::ResponseInitChain* init_chain_;
  const ::abci::ResponseQuery* query_;
  const ::abci::ResponseBeginBlock* begin_block_;
  const ::abci::ResponseCheckTx* check_tx_;
  const ::abci::ResponseDeliverTx* deliver_tx_;
  const ::abci::ResponseEndBlock* end_block_;
  const ::abci::ResponseCommit* commit_;
} _Response_default_instance_;
class ResponseExceptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseException>
      _instance;
} _ResponseException_default_instance_;
class ResponseEchoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseEcho>
      _instance;
} _ResponseEcho_default_instance_;
class ResponseFlushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseFlush>
      _instance;
} _ResponseFlush_default_instance_;
class ResponseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseInfo>
      _instance;
} _ResponseInfo_default_instance_;
class ResponseSetOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseSetOption>
      _instance;
} _ResponseSetOption_default_instance_;
class ResponseInitChainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseInitChain>
      _instance;
} _ResponseInitChain_default_instance_;
class ResponseQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuery>
      _instance;
} _ResponseQuery_default_instance_;
class ResponseBeginBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseBeginBlock>
      _instance;
} _ResponseBeginBlock_default_instance_;
class ResponseCheckTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseCheckTx>
      _instance;
} _ResponseCheckTx_default_instance_;
class ResponseDeliverTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseDeliverTx>
      _instance;
} _ResponseDeliverTx_default_instance_;
class ResponseEndBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseEndBlock>
      _instance;
} _ResponseEndBlock_default_instance_;
class ResponseCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseCommit>
      _instance;
} _ResponseCommit_default_instance_;
class ConsensusParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConsensusParams>
      _instance;
} _ConsensusParams_default_instance_;
class BlockSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockSize>
      _instance;
} _BlockSize_default_instance_;
class TxSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxSize>
      _instance;
} _TxSize_default_instance_;
class BlockGossipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockGossip>
      _instance;
} _BlockGossip_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class BlockIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockID>
      _instance;
} _BlockID_default_instance_;
class PartSetHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartSetHeader>
      _instance;
} _PartSetHeader_default_instance_;
class ValidatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Validator>
      _instance;
} _Validator_default_instance_;
class EvidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Evidence>
      _instance;
} _Evidence_default_instance_;
}  // namespace abci
namespace protobuf_abci_2eproto {
void InitDefaultsKVPairImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_KVPair_default_instance_;
    new (ptr) ::abci::KVPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::KVPair::InitAsDefaultInstance();
}

void InitDefaultsKVPair() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKVPairImpl);
}

void InitDefaultsKI64PairImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_KI64Pair_default_instance_;
    new (ptr) ::abci::KI64Pair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::KI64Pair::InitAsDefaultInstance();
}

void InitDefaultsKI64Pair() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKI64PairImpl);
}

void InitDefaultsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsRequestEcho();
  protobuf_abci_2eproto::InitDefaultsRequestFlush();
  protobuf_abci_2eproto::InitDefaultsRequestInfo();
  protobuf_abci_2eproto::InitDefaultsRequestSetOption();
  protobuf_abci_2eproto::InitDefaultsRequestInitChain();
  protobuf_abci_2eproto::InitDefaultsRequestQuery();
  protobuf_abci_2eproto::InitDefaultsRequestBeginBlock();
  protobuf_abci_2eproto::InitDefaultsRequestCheckTx();
  protobuf_abci_2eproto::InitDefaultsRequestDeliverTx();
  protobuf_abci_2eproto::InitDefaultsRequestEndBlock();
  protobuf_abci_2eproto::InitDefaultsRequestCommit();
  {
    void* ptr = &::abci::_Request_default_instance_;
    new (ptr) ::abci::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::Request::InitAsDefaultInstance();
}

void InitDefaultsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestImpl);
}

void InitDefaultsRequestEchoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestEcho_default_instance_;
    new (ptr) ::abci::RequestEcho();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestEcho::InitAsDefaultInstance();
}

void InitDefaultsRequestEcho() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestEchoImpl);
}

void InitDefaultsRequestFlushImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestFlush_default_instance_;
    new (ptr) ::abci::RequestFlush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestFlush::InitAsDefaultInstance();
}

void InitDefaultsRequestFlush() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestFlushImpl);
}

void InitDefaultsRequestInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestInfo_default_instance_;
    new (ptr) ::abci::RequestInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestInfo::InitAsDefaultInstance();
}

void InitDefaultsRequestInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestInfoImpl);
}

void InitDefaultsRequestSetOptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestSetOption_default_instance_;
    new (ptr) ::abci::RequestSetOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestSetOption::InitAsDefaultInstance();
}

void InitDefaultsRequestSetOption() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestSetOptionImpl);
}

void InitDefaultsRequestInitChainImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsValidator();
  {
    void* ptr = &::abci::_RequestInitChain_default_instance_;
    new (ptr) ::abci::RequestInitChain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestInitChain::InitAsDefaultInstance();
}

void InitDefaultsRequestInitChain() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestInitChainImpl);
}

void InitDefaultsRequestQueryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestQuery_default_instance_;
    new (ptr) ::abci::RequestQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestQuery::InitAsDefaultInstance();
}

void InitDefaultsRequestQuery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestQueryImpl);
}

void InitDefaultsRequestBeginBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsHeader();
  protobuf_abci_2eproto::InitDefaultsEvidence();
  {
    void* ptr = &::abci::_RequestBeginBlock_default_instance_;
    new (ptr) ::abci::RequestBeginBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestBeginBlock::InitAsDefaultInstance();
}

void InitDefaultsRequestBeginBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestBeginBlockImpl);
}

void InitDefaultsRequestCheckTxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestCheckTx_default_instance_;
    new (ptr) ::abci::RequestCheckTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestCheckTx::InitAsDefaultInstance();
}

void InitDefaultsRequestCheckTx() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestCheckTxImpl);
}

void InitDefaultsRequestDeliverTxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestDeliverTx_default_instance_;
    new (ptr) ::abci::RequestDeliverTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestDeliverTx::InitAsDefaultInstance();
}

void InitDefaultsRequestDeliverTx() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestDeliverTxImpl);
}

void InitDefaultsRequestEndBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestEndBlock_default_instance_;
    new (ptr) ::abci::RequestEndBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestEndBlock::InitAsDefaultInstance();
}

void InitDefaultsRequestEndBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestEndBlockImpl);
}

void InitDefaultsRequestCommitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_RequestCommit_default_instance_;
    new (ptr) ::abci::RequestCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::RequestCommit::InitAsDefaultInstance();
}

void InitDefaultsRequestCommit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestCommitImpl);
}

void InitDefaultsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsResponseException();
  protobuf_abci_2eproto::InitDefaultsResponseEcho();
  protobuf_abci_2eproto::InitDefaultsResponseFlush();
  protobuf_abci_2eproto::InitDefaultsResponseInfo();
  protobuf_abci_2eproto::InitDefaultsResponseSetOption();
  protobuf_abci_2eproto::InitDefaultsResponseInitChain();
  protobuf_abci_2eproto::InitDefaultsResponseQuery();
  protobuf_abci_2eproto::InitDefaultsResponseBeginBlock();
  protobuf_abci_2eproto::InitDefaultsResponseCheckTx();
  protobuf_abci_2eproto::InitDefaultsResponseDeliverTx();
  protobuf_abci_2eproto::InitDefaultsResponseEndBlock();
  protobuf_abci_2eproto::InitDefaultsResponseCommit();
  {
    void* ptr = &::abci::_Response_default_instance_;
    new (ptr) ::abci::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::Response::InitAsDefaultInstance();
}

void InitDefaultsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseImpl);
}

void InitDefaultsResponseExceptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseException_default_instance_;
    new (ptr) ::abci::ResponseException();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseException::InitAsDefaultInstance();
}

void InitDefaultsResponseException() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseExceptionImpl);
}

void InitDefaultsResponseEchoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseEcho_default_instance_;
    new (ptr) ::abci::ResponseEcho();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseEcho::InitAsDefaultInstance();
}

void InitDefaultsResponseEcho() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseEchoImpl);
}

void InitDefaultsResponseFlushImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseFlush_default_instance_;
    new (ptr) ::abci::ResponseFlush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseFlush::InitAsDefaultInstance();
}

void InitDefaultsResponseFlush() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseFlushImpl);
}

void InitDefaultsResponseInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseInfo_default_instance_;
    new (ptr) ::abci::ResponseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseInfo::InitAsDefaultInstance();
}

void InitDefaultsResponseInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseInfoImpl);
}

void InitDefaultsResponseSetOptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseSetOption_default_instance_;
    new (ptr) ::abci::ResponseSetOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseSetOption::InitAsDefaultInstance();
}

void InitDefaultsResponseSetOption() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseSetOptionImpl);
}

void InitDefaultsResponseInitChainImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseInitChain_default_instance_;
    new (ptr) ::abci::ResponseInitChain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseInitChain::InitAsDefaultInstance();
}

void InitDefaultsResponseInitChain() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseInitChainImpl);
}

void InitDefaultsResponseQueryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseQuery_default_instance_;
    new (ptr) ::abci::ResponseQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseQuery::InitAsDefaultInstance();
}

void InitDefaultsResponseQuery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseQueryImpl);
}

void InitDefaultsResponseBeginBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseBeginBlock_default_instance_;
    new (ptr) ::abci::ResponseBeginBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseBeginBlock::InitAsDefaultInstance();
}

void InitDefaultsResponseBeginBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseBeginBlockImpl);
}

void InitDefaultsResponseCheckTxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsKVPair();
  protobuf_abci_2eproto::InitDefaultsKI64Pair();
  {
    void* ptr = &::abci::_ResponseCheckTx_default_instance_;
    new (ptr) ::abci::ResponseCheckTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseCheckTx::InitAsDefaultInstance();
}

void InitDefaultsResponseCheckTx() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseCheckTxImpl);
}

void InitDefaultsResponseDeliverTxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsKVPair();
  protobuf_abci_2eproto::InitDefaultsKI64Pair();
  {
    void* ptr = &::abci::_ResponseDeliverTx_default_instance_;
    new (ptr) ::abci::ResponseDeliverTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseDeliverTx::InitAsDefaultInstance();
}

void InitDefaultsResponseDeliverTx() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseDeliverTxImpl);
}

void InitDefaultsResponseEndBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsValidator();
  protobuf_abci_2eproto::InitDefaultsConsensusParams();
  {
    void* ptr = &::abci::_ResponseEndBlock_default_instance_;
    new (ptr) ::abci::ResponseEndBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseEndBlock::InitAsDefaultInstance();
}

void InitDefaultsResponseEndBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseEndBlockImpl);
}

void InitDefaultsResponseCommitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_ResponseCommit_default_instance_;
    new (ptr) ::abci::ResponseCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ResponseCommit::InitAsDefaultInstance();
}

void InitDefaultsResponseCommit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResponseCommitImpl);
}

void InitDefaultsConsensusParamsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsBlockSize();
  protobuf_abci_2eproto::InitDefaultsTxSize();
  protobuf_abci_2eproto::InitDefaultsBlockGossip();
  {
    void* ptr = &::abci::_ConsensusParams_default_instance_;
    new (ptr) ::abci::ConsensusParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::ConsensusParams::InitAsDefaultInstance();
}

void InitDefaultsConsensusParams() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConsensusParamsImpl);
}

void InitDefaultsBlockSizeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_BlockSize_default_instance_;
    new (ptr) ::abci::BlockSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::BlockSize::InitAsDefaultInstance();
}

void InitDefaultsBlockSize() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlockSizeImpl);
}

void InitDefaultsTxSizeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_TxSize_default_instance_;
    new (ptr) ::abci::TxSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::TxSize::InitAsDefaultInstance();
}

void InitDefaultsTxSize() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTxSizeImpl);
}

void InitDefaultsBlockGossipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_BlockGossip_default_instance_;
    new (ptr) ::abci::BlockGossip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::BlockGossip::InitAsDefaultInstance();
}

void InitDefaultsBlockGossip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlockGossipImpl);
}

void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsBlockID();
  {
    void* ptr = &::abci::_Header_default_instance_;
    new (ptr) ::abci::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsBlockIDImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_abci_2eproto::InitDefaultsPartSetHeader();
  {
    void* ptr = &::abci::_BlockID_default_instance_;
    new (ptr) ::abci::BlockID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::BlockID::InitAsDefaultInstance();
}

void InitDefaultsBlockID() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlockIDImpl);
}

void InitDefaultsPartSetHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_PartSetHeader_default_instance_;
    new (ptr) ::abci::PartSetHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::PartSetHeader::InitAsDefaultInstance();
}

void InitDefaultsPartSetHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPartSetHeaderImpl);
}

void InitDefaultsValidatorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_Validator_default_instance_;
    new (ptr) ::abci::Validator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::Validator::InitAsDefaultInstance();
}

void InitDefaultsValidator() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsValidatorImpl);
}

void InitDefaultsEvidenceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::abci::_Evidence_default_instance_;
    new (ptr) ::abci::Evidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::abci::Evidence::InitAsDefaultInstance();
}

void InitDefaultsEvidence() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEvidenceImpl);
}

::google::protobuf::Metadata file_level_metadata[36];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::KVPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::KVPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::KVPair, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::KI64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::KI64Pair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::KI64Pair, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::abci::RequestDefaultTypeInternal, echo_),
  offsetof(::abci::RequestDefaultTypeInternal, flush_),
  offsetof(::abci::RequestDefaultTypeInternal, info_),
  offsetof(::abci::RequestDefaultTypeInternal, set_option_),
  offsetof(::abci::RequestDefaultTypeInternal, init_chain_),
  offsetof(::abci::RequestDefaultTypeInternal, query_),
  offsetof(::abci::RequestDefaultTypeInternal, begin_block_),
  offsetof(::abci::RequestDefaultTypeInternal, check_tx_),
  offsetof(::abci::RequestDefaultTypeInternal, deliver_tx_),
  offsetof(::abci::RequestDefaultTypeInternal, end_block_),
  offsetof(::abci::RequestDefaultTypeInternal, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Request, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestEcho, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestInfo, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestSetOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestSetOption, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestSetOption, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestInitChain, validators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestInitChain, app_state_bytes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestQuery, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestQuery, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestQuery, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestQuery, prove_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestBeginBlock, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestBeginBlock, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestBeginBlock, absent_validators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestBeginBlock, byzantine_validators_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestCheckTx, tx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestDeliverTx, tx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestEndBlock, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::RequestCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::abci::ResponseDefaultTypeInternal, exception_),
  offsetof(::abci::ResponseDefaultTypeInternal, echo_),
  offsetof(::abci::ResponseDefaultTypeInternal, flush_),
  offsetof(::abci::ResponseDefaultTypeInternal, info_),
  offsetof(::abci::ResponseDefaultTypeInternal, set_option_),
  offsetof(::abci::ResponseDefaultTypeInternal, init_chain_),
  offsetof(::abci::ResponseDefaultTypeInternal, query_),
  offsetof(::abci::ResponseDefaultTypeInternal, begin_block_),
  offsetof(::abci::ResponseDefaultTypeInternal, check_tx_),
  offsetof(::abci::ResponseDefaultTypeInternal, deliver_tx_),
  offsetof(::abci::ResponseDefaultTypeInternal, end_block_),
  offsetof(::abci::ResponseDefaultTypeInternal, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Response, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseException, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseEcho, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseInfo, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseInfo, last_block_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseInfo, last_block_app_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseSetOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseSetOption, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseSetOption, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseSetOption, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, proof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseQuery, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, gas_wanted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, gas_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCheckTx, fee_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, gas_wanted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, gas_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseDeliverTx, fee_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseEndBlock, validator_updates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseEndBlock, consensus_param_updates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ResponseCommit, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ConsensusParams, block_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ConsensusParams, tx_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::ConsensusParams, block_gossip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockSize, max_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockSize, max_txs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockSize, max_gas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::TxSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::TxSize, max_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::TxSize, max_gas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockGossip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockGossip, block_part_size_bytes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, chain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, num_txs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, last_block_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, last_commit_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, data_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, validators_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Header, app_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockID, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::BlockID, parts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::PartSetHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::PartSetHeader, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::PartSetHeader, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Validator, pub_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Validator, power_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Evidence, pub_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::abci::Evidence, height_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::abci::KVPair)},
  { 7, -1, sizeof(::abci::KI64Pair)},
  { 14, -1, sizeof(::abci::Request)},
  { 31, -1, sizeof(::abci::RequestEcho)},
  { 37, -1, sizeof(::abci::RequestFlush)},
  { 42, -1, sizeof(::abci::RequestInfo)},
  { 48, -1, sizeof(::abci::RequestSetOption)},
  { 55, -1, sizeof(::abci::RequestInitChain)},
  { 62, -1, sizeof(::abci::RequestQuery)},
  { 71, -1, sizeof(::abci::RequestBeginBlock)},
  { 80, -1, sizeof(::abci::RequestCheckTx)},
  { 86, -1, sizeof(::abci::RequestDeliverTx)},
  { 92, -1, sizeof(::abci::RequestEndBlock)},
  { 98, -1, sizeof(::abci::RequestCommit)},
  { 103, -1, sizeof(::abci::Response)},
  { 121, -1, sizeof(::abci::ResponseException)},
  { 127, -1, sizeof(::abci::ResponseEcho)},
  { 133, -1, sizeof(::abci::ResponseFlush)},
  { 138, -1, sizeof(::abci::ResponseInfo)},
  { 147, -1, sizeof(::abci::ResponseSetOption)},
  { 155, -1, sizeof(::abci::ResponseInitChain)},
  { 160, -1, sizeof(::abci::ResponseQuery)},
  { 173, -1, sizeof(::abci::ResponseBeginBlock)},
  { 178, -1, sizeof(::abci::ResponseCheckTx)},
  { 191, -1, sizeof(::abci::ResponseDeliverTx)},
  { 204, -1, sizeof(::abci::ResponseEndBlock)},
  { 211, -1, sizeof(::abci::ResponseCommit)},
  { 217, -1, sizeof(::abci::ConsensusParams)},
  { 225, -1, sizeof(::abci::BlockSize)},
  { 233, -1, sizeof(::abci::TxSize)},
  { 240, -1, sizeof(::abci::BlockGossip)},
  { 246, -1, sizeof(::abci::Header)},
  { 260, -1, sizeof(::abci::BlockID)},
  { 267, -1, sizeof(::abci::PartSetHeader)},
  { 274, -1, sizeof(::abci::Validator)},
  { 281, -1, sizeof(::abci::Evidence)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_KVPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_KI64Pair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestEcho_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestFlush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestSetOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestInitChain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestBeginBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestCheckTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestDeliverTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestEndBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_RequestCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseException_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseEcho_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseFlush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseSetOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseInitChain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseBeginBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseCheckTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseDeliverTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseEndBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ResponseCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_ConsensusParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_BlockSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_TxSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_BlockGossip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_BlockID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_PartSetHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_Validator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::abci::_Evidence_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "abci.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 36);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nabci.proto\022\004abci\"$\n\006KVPair\022\013\n\003key\030\001 \001("
      "\014\022\r\n\005value\030\002 \001(\014\"&\n\010KI64Pair\022\013\n\003key\030\001 \001("
      "\014\022\r\n\005value\030\002 \001(\003\"\331\003\n\007Request\022!\n\004echo\030\002 \001"
      "(\0132\021.abci.RequestEchoH\000\022#\n\005flush\030\003 \001(\0132\022"
      ".abci.RequestFlushH\000\022!\n\004info\030\004 \001(\0132\021.abc"
      "i.RequestInfoH\000\022,\n\nset_option\030\005 \001(\0132\026.ab"
      "ci.RequestSetOptionH\000\022,\n\ninit_chain\030\006 \001("
      "\0132\026.abci.RequestInitChainH\000\022#\n\005query\030\007 \001"
      "(\0132\022.abci.RequestQueryH\000\022.\n\013begin_block\030"
      "\010 \001(\0132\027.abci.RequestBeginBlockH\000\022(\n\010chec"
      "k_tx\030\t \001(\0132\024.abci.RequestCheckTxH\000\022,\n\nde"
      "liver_tx\030\023 \001(\0132\026.abci.RequestDeliverTxH\000"
      "\022*\n\tend_block\030\013 \001(\0132\025.abci.RequestEndBlo"
      "ckH\000\022%\n\006commit\030\014 \001(\0132\023.abci.RequestCommi"
      "tH\000B\007\n\005value\"\036\n\013RequestEcho\022\017\n\007message\030\001"
      " \001(\t\"\016\n\014RequestFlush\"\036\n\013RequestInfo\022\017\n\007v"
      "ersion\030\001 \001(\t\".\n\020RequestSetOption\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005value\030\002 \001(\t\"P\n\020RequestInitChain"
      "\022#\n\nvalidators\030\001 \003(\0132\017.abci.Validator\022\027\n"
      "\017app_state_bytes\030\002 \001(\014\"I\n\014RequestQuery\022\014"
      "\n\004data\030\001 \001(\014\022\014\n\004path\030\002 \001(\t\022\016\n\006height\030\003 \001"
      "(\003\022\r\n\005prove\030\004 \001(\010\"\210\001\n\021RequestBeginBlock\022"
      "\014\n\004hash\030\001 \001(\014\022\034\n\006header\030\002 \001(\0132\014.abci.Hea"
      "der\022\031\n\021absent_validators\030\003 \003(\005\022,\n\024byzant"
      "ine_validators\030\004 \003(\0132\016.abci.Evidence\"\034\n\016"
      "RequestCheckTx\022\n\n\002tx\030\001 \001(\014\"\036\n\020RequestDel"
      "iverTx\022\n\n\002tx\030\001 \001(\014\"!\n\017RequestEndBlock\022\016\n"
      "\006height\030\001 \001(\003\"\017\n\rRequestCommit\"\223\004\n\010Respo"
      "nse\022,\n\texception\030\001 \001(\0132\027.abci.ResponseEx"
      "ceptionH\000\022\"\n\004echo\030\002 \001(\0132\022.abci.ResponseE"
      "choH\000\022$\n\005flush\030\003 \001(\0132\023.abci.ResponseFlus"
      "hH\000\022\"\n\004info\030\004 \001(\0132\022.abci.ResponseInfoH\000\022"
      "-\n\nset_option\030\005 \001(\0132\027.abci.ResponseSetOp"
      "tionH\000\022-\n\ninit_chain\030\006 \001(\0132\027.abci.Respon"
      "seInitChainH\000\022$\n\005query\030\007 \001(\0132\023.abci.Resp"
      "onseQueryH\000\022/\n\013begin_block\030\010 \001(\0132\030.abci."
      "ResponseBeginBlockH\000\022)\n\010check_tx\030\t \001(\0132\025"
      ".abci.ResponseCheckTxH\000\022-\n\ndeliver_tx\030\n "
      "\001(\0132\027.abci.ResponseDeliverTxH\000\022+\n\tend_bl"
      "ock\030\013 \001(\0132\026.abci.ResponseEndBlockH\000\022&\n\006c"
      "ommit\030\014 \001(\0132\024.abci.ResponseCommitH\000B\007\n\005v"
      "alue\"\"\n\021ResponseException\022\r\n\005error\030\001 \001(\t"
      "\"\037\n\014ResponseEcho\022\017\n\007message\030\001 \001(\t\"\017\n\rRes"
      "ponseFlush\"e\n\014ResponseInfo\022\014\n\004data\030\001 \001(\t"
      "\022\017\n\007version\030\002 \001(\t\022\031\n\021last_block_height\030\003"
      " \001(\003\022\033\n\023last_block_app_hash\030\004 \001(\014\"<\n\021Res"
      "ponseSetOption\022\014\n\004code\030\001 \001(\r\022\013\n\003log\030\003 \001("
      "\t\022\014\n\004info\030\004 \001(\t\"\023\n\021ResponseInitChain\"\202\001\n"
      "\rResponseQuery\022\014\n\004code\030\001 \001(\r\022\013\n\003log\030\003 \001("
      "\t\022\014\n\004info\030\004 \001(\t\022\r\n\005index\030\005 \001(\003\022\013\n\003key\030\006 "
      "\001(\014\022\r\n\005value\030\007 \001(\014\022\r\n\005proof\030\010 \001(\014\022\016\n\006hei"
      "ght\030\t \001(\003\"\024\n\022ResponseBeginBlock\"\247\001\n\017Resp"
      "onseCheckTx\022\014\n\004code\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022"
      "\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\022\n\ngas_wanted"
      "\030\005 \001(\003\022\020\n\010gas_used\030\006 \001(\003\022\032\n\004tags\030\007 \003(\0132\014"
      ".abci.KVPair\022\033\n\003fee\030\010 \001(\0132\016.abci.KI64Pai"
      "r\"\251\001\n\021ResponseDeliverTx\022\014\n\004code\030\001 \001(\r\022\014\n"
      "\004data\030\002 \001(\014\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\022"
      "\n\ngas_wanted\030\005 \001(\003\022\020\n\010gas_used\030\006 \001(\003\022\032\n\004"
      "tags\030\007 \003(\0132\014.abci.KVPair\022\033\n\003fee\030\010 \001(\0132\016."
      "abci.KI64Pair\"v\n\020ResponseEndBlock\022*\n\021val"
      "idator_updates\030\001 \003(\0132\017.abci.Validator\0226\n"
      "\027consensus_param_updates\030\002 \001(\0132\025.abci.Co"
      "nsensusParams\"\036\n\016ResponseCommit\022\014\n\004data\030"
      "\002 \001(\014\"~\n\017ConsensusParams\022#\n\nblock_size\030\001"
      " \001(\0132\017.abci.BlockSize\022\035\n\007tx_size\030\002 \001(\0132\014"
      ".abci.TxSize\022\'\n\014block_gossip\030\003 \001(\0132\021.abc"
      "i.BlockGossip\"@\n\tBlockSize\022\021\n\tmax_bytes\030"
      "\001 \001(\005\022\017\n\007max_txs\030\002 \001(\005\022\017\n\007max_gas\030\003 \001(\003\""
      ",\n\006TxSize\022\021\n\tmax_bytes\030\001 \001(\005\022\017\n\007max_gas\030"
      "\002 \001(\003\",\n\013BlockGossip\022\035\n\025block_part_size_"
      "bytes\030\001 \001(\005\"\307\001\n\006Header\022\020\n\010chain_id\030\001 \001(\t"
      "\022\016\n\006height\030\002 \001(\003\022\014\n\004time\030\003 \001(\003\022\017\n\007num_tx"
      "s\030\004 \001(\005\022$\n\rlast_block_id\030\005 \001(\0132\r.abci.Bl"
      "ockID\022\030\n\020last_commit_hash\030\006 \001(\014\022\021\n\tdata_"
      "hash\030\007 \001(\014\022\027\n\017validators_hash\030\010 \001(\014\022\020\n\010a"
      "pp_hash\030\t \001(\014\";\n\007BlockID\022\014\n\004hash\030\001 \001(\014\022\""
      "\n\005parts\030\002 \001(\0132\023.abci.PartSetHeader\",\n\rPa"
      "rtSetHeader\022\r\n\005total\030\001 \001(\005\022\014\n\004hash\030\002 \001(\014"
      "\"+\n\tValidator\022\017\n\007pub_key\030\001 \001(\014\022\r\n\005power\030"
      "\002 \001(\003\"+\n\010Evidence\022\017\n\007pub_key\030\001 \001(\014\022\016\n\006he"
      "ight\030\002 \001(\0032\366\004\n\017ABCIApplication\022-\n\004Echo\022\021"
      ".abci.RequestEcho\032\022.abci.ResponseEcho\0220\n"
      "\005Flush\022\022.abci.RequestFlush\032\023.abci.Respon"
      "seFlush\022-\n\004Info\022\021.abci.RequestInfo\032\022.abc"
      "i.ResponseInfo\022<\n\tSetOption\022\026.abci.Reque"
      "stSetOption\032\027.abci.ResponseSetOption\022<\n\t"
      "DeliverTx\022\026.abci.RequestDeliverTx\032\027.abci"
      ".ResponseDeliverTx\0226\n\007CheckTx\022\024.abci.Req"
      "uestCheckTx\032\025.abci.ResponseCheckTx\0220\n\005Qu"
      "ery\022\022.abci.RequestQuery\032\023.abci.ResponseQ"
      "uery\0223\n\006Commit\022\023.abci.RequestCommit\032\024.ab"
      "ci.ResponseCommit\022<\n\tInitChain\022\026.abci.Re"
      "questInitChain\032\027.abci.ResponseInitChain\022"
      "\?\n\nBeginBlock\022\027.abci.RequestBeginBlock\032\030"
      ".abci.ResponseBeginBlock\0229\n\010EndBlock\022\025.a"
      "bci.RequestEndBlock\032\026.abci.ResponseEndBl"
      "ockb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3891);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "abci.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_abci_2eproto
namespace abci {

// ===================================================================

void KVPair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVPair::kKeyFieldNumber;
const int KVPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVPair::KVPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsKVPair();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.KVPair)
}
KVPair::KVPair(const KVPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.KVPair)
}

void KVPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KVPair::~KVPair() {
  // @@protoc_insertion_point(destructor:abci.KVPair)
  SharedDtor();
}

void KVPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KVPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVPair::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KVPair& KVPair::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsKVPair();
  return *internal_default_instance();
}

KVPair* KVPair::New(::google::protobuf::Arena* arena) const {
  KVPair* n = new KVPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.KVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool KVPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.KVPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.KVPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.KVPair)
  return false;
#undef DO_
}

void KVPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.KVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.KVPair)
}

::google::protobuf::uint8* KVPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.KVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.KVPair)
  return target;
}

size_t KVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.KVPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.KVPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KVPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KVPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.KVPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.KVPair)
    MergeFrom(*source);
  }
}

void KVPair::MergeFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.KVPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KVPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVPair::CopyFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVPair::IsInitialized() const {
  return true;
}

void KVPair::Swap(KVPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVPair::InternalSwap(KVPair* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVPair::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KI64Pair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KI64Pair::kKeyFieldNumber;
const int KI64Pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KI64Pair::KI64Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsKI64Pair();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.KI64Pair)
}
KI64Pair::KI64Pair(const KI64Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:abci.KI64Pair)
}

void KI64Pair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

KI64Pair::~KI64Pair() {
  // @@protoc_insertion_point(destructor:abci.KI64Pair)
  SharedDtor();
}

void KI64Pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KI64Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KI64Pair::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KI64Pair& KI64Pair::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsKI64Pair();
  return *internal_default_instance();
}

KI64Pair* KI64Pair::New(::google::protobuf::Arena* arena) const {
  KI64Pair* n = new KI64Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KI64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.KI64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool KI64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.KI64Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.KI64Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.KI64Pair)
  return false;
#undef DO_
}

void KI64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.KI64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.KI64Pair)
}

::google::protobuf::uint8* KI64Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.KI64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.KI64Pair)
  return target;
}

size_t KI64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.KI64Pair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KI64Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.KI64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const KI64Pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KI64Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.KI64Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.KI64Pair)
    MergeFrom(*source);
  }
}

void KI64Pair::MergeFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.KI64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void KI64Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.KI64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KI64Pair::CopyFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.KI64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KI64Pair::IsInitialized() const {
  return true;
}

void KI64Pair::Swap(KI64Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KI64Pair::InternalSwap(KI64Pair* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KI64Pair::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::abci::_Request_default_instance_.echo_ = const_cast< ::abci::RequestEcho*>(
      ::abci::RequestEcho::internal_default_instance());
  ::abci::_Request_default_instance_.flush_ = const_cast< ::abci::RequestFlush*>(
      ::abci::RequestFlush::internal_default_instance());
  ::abci::_Request_default_instance_.info_ = const_cast< ::abci::RequestInfo*>(
      ::abci::RequestInfo::internal_default_instance());
  ::abci::_Request_default_instance_.set_option_ = const_cast< ::abci::RequestSetOption*>(
      ::abci::RequestSetOption::internal_default_instance());
  ::abci::_Request_default_instance_.init_chain_ = const_cast< ::abci::RequestInitChain*>(
      ::abci::RequestInitChain::internal_default_instance());
  ::abci::_Request_default_instance_.query_ = const_cast< ::abci::RequestQuery*>(
      ::abci::RequestQuery::internal_default_instance());
  ::abci::_Request_default_instance_.begin_block_ = const_cast< ::abci::RequestBeginBlock*>(
      ::abci::RequestBeginBlock::internal_default_instance());
  ::abci::_Request_default_instance_.check_tx_ = const_cast< ::abci::RequestCheckTx*>(
      ::abci::RequestCheckTx::internal_default_instance());
  ::abci::_Request_default_instance_.deliver_tx_ = const_cast< ::abci::RequestDeliverTx*>(
      ::abci::RequestDeliverTx::internal_default_instance());
  ::abci::_Request_default_instance_.end_block_ = const_cast< ::abci::RequestEndBlock*>(
      ::abci::RequestEndBlock::internal_default_instance());
  ::abci::_Request_default_instance_.commit_ = const_cast< ::abci::RequestCommit*>(
      ::abci::RequestCommit::internal_default_instance());
}
void Request::set_allocated_echo(::abci::RequestEcho* echo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (echo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      echo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.echo)
}
void Request::set_allocated_flush(::abci::RequestFlush* flush) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (flush) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flush = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.flush)
}
void Request::set_allocated_info(::abci::RequestInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.info)
}
void Request::set_allocated_set_option(::abci::RequestSetOption* set_option) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (set_option) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_option = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_option, submessage_arena);
    }
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.set_option)
}
void Request::set_allocated_init_chain(::abci::RequestInitChain* init_chain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (init_chain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_chain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.init_chain)
}
void Request::set_allocated_query(::abci::RequestQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.query)
}
void Request::set_allocated_begin_block(::abci::RequestBeginBlock* begin_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (begin_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      begin_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.begin_block)
}
void Request::set_allocated_check_tx(::abci::RequestCheckTx* check_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (check_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.check_tx)
}
void Request::set_allocated_deliver_tx(::abci::RequestDeliverTx* deliver_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (deliver_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deliver_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.deliver_tx)
}
void Request::set_allocated_end_block(::abci::RequestEndBlock* end_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (end_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.end_block)
}
void Request::set_allocated_commit(::abci::RequestCommit* commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (commit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Request.commit)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kEchoFieldNumber;
const int Request::kFlushFieldNumber;
const int Request::kInfoFieldNumber;
const int Request::kSetOptionFieldNumber;
const int Request::kInitChainFieldNumber;
const int Request::kQueryFieldNumber;
const int Request::kBeginBlockFieldNumber;
const int Request::kCheckTxFieldNumber;
const int Request::kDeliverTxFieldNumber;
const int Request::kEndBlockFieldNumber;
const int Request::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kEcho: {
      mutable_echo()->::abci::RequestEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::abci::RequestFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::abci::RequestInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::abci::RequestSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::abci::RequestInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::abci::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::abci::RequestBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::abci::RequestCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::abci::RequestDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::abci::RequestEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::abci::RequestCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:abci.Request)
}

void Request::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:abci.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequest();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:abci.Request)
  switch (value_case()) {
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .abci.RequestEcho echo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestFlush flush = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestInfo info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestSetOption set_option = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestInitChain init_chain = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestQuery query = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestBeginBlock begin_block = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestCheckTx check_tx = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestEndBlock end_block = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestCommit commit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.RequestDeliverTx deliver_tx = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .abci.RequestEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.echo_, output);
  }

  // .abci.RequestFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.flush_, output);
  }

  // .abci.RequestInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.info_, output);
  }

  // .abci.RequestSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.set_option_, output);
  }

  // .abci.RequestInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.init_chain_, output);
  }

  // .abci.RequestQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.query_, output);
  }

  // .abci.RequestBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.begin_block_, output);
  }

  // .abci.RequestCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.check_tx_, output);
  }

  // .abci.RequestEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.end_block_, output);
  }

  // .abci.RequestCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.commit_, output);
  }

  // .abci.RequestDeliverTx deliver_tx = 19;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *value_.deliver_tx_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .abci.RequestEcho echo = 2;
  if (has_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *value_.echo_, deterministic, target);
  }

  // .abci.RequestFlush flush = 3;
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *value_.flush_, deterministic, target);
  }

  // .abci.RequestInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *value_.info_, deterministic, target);
  }

  // .abci.RequestSetOption set_option = 5;
  if (has_set_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *value_.set_option_, deterministic, target);
  }

  // .abci.RequestInitChain init_chain = 6;
  if (has_init_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *value_.init_chain_, deterministic, target);
  }

  // .abci.RequestQuery query = 7;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *value_.query_, deterministic, target);
  }

  // .abci.RequestBeginBlock begin_block = 8;
  if (has_begin_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *value_.begin_block_, deterministic, target);
  }

  // .abci.RequestCheckTx check_tx = 9;
  if (has_check_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *value_.check_tx_, deterministic, target);
  }

  // .abci.RequestEndBlock end_block = 11;
  if (has_end_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *value_.end_block_, deterministic, target);
  }

  // .abci.RequestCommit commit = 12;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *value_.commit_, deterministic, target);
  }

  // .abci.RequestDeliverTx deliver_tx = 19;
  if (has_deliver_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, *value_.deliver_tx_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (value_case()) {
    // .abci.RequestEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.echo_);
      break;
    }
    // .abci.RequestFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.flush_);
      break;
    }
    // .abci.RequestInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.info_);
      break;
    }
    // .abci.RequestSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.set_option_);
      break;
    }
    // .abci.RequestInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.init_chain_);
      break;
    }
    // .abci.RequestQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_);
      break;
    }
    // .abci.RequestBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.begin_block_);
      break;
    }
    // .abci.RequestCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.check_tx_);
      break;
    }
    // .abci.RequestDeliverTx deliver_tx = 19;
    case kDeliverTx: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.deliver_tx_);
      break;
    }
    // .abci.RequestEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.end_block_);
      break;
    }
    // .abci.RequestCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kEcho: {
      mutable_echo()->::abci::RequestEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::abci::RequestFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::abci::RequestInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::abci::RequestSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::abci::RequestInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::abci::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::abci::RequestBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::abci::RequestCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::abci::RequestDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::abci::RequestEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::abci::RequestCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestEcho::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEcho::RequestEcho()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestEcho();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestEcho)
}
RequestEcho::RequestEcho(const RequestEcho& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.RequestEcho)
}

void RequestEcho::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestEcho::~RequestEcho() {
  // @@protoc_insertion_point(destructor:abci.RequestEcho)
  SharedDtor();
}

void RequestEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestEcho::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEcho::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestEcho& RequestEcho::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestEcho();
  return *internal_default_instance();
}

RequestEcho* RequestEcho::New(::google::protobuf::Arena* arena) const {
  RequestEcho* n = new RequestEcho;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RequestEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestEcho)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestEcho.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestEcho)
  return false;
#undef DO_
}

void RequestEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestEcho)
}

::google::protobuf::uint8* RequestEcho::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestEcho.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestEcho)
  return target;
}

size_t RequestEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestEcho)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEcho::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestEcho)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestEcho* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEcho>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestEcho)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestEcho)
    MergeFrom(*source);
  }
}

void RequestEcho::MergeFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestEcho)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void RequestEcho::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEcho::CopyFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEcho::IsInitialized() const {
  return true;
}

void RequestEcho::Swap(RequestEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEcho::InternalSwap(RequestEcho* other) {
  using std::swap;
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEcho::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestFlush::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFlush::RequestFlush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestFlush();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestFlush)
}
RequestFlush::RequestFlush(const RequestFlush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:abci.RequestFlush)
}

void RequestFlush::SharedCtor() {
  _cached_size_ = 0;
}

RequestFlush::~RequestFlush() {
  // @@protoc_insertion_point(destructor:abci.RequestFlush)
  SharedDtor();
}

void RequestFlush::SharedDtor() {
}

void RequestFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFlush::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestFlush& RequestFlush::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestFlush();
  return *internal_default_instance();
}

RequestFlush* RequestFlush::New(::google::protobuf::Arena* arena) const {
  RequestFlush* n = new RequestFlush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RequestFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestFlush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestFlush)
  return false;
#undef DO_
}

void RequestFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestFlush)
}

::google::protobuf::uint8* RequestFlush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestFlush)
  return target;
}

size_t RequestFlush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestFlush)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFlush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestFlush)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestFlush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestFlush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestFlush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestFlush)
    MergeFrom(*source);
  }
}

void RequestFlush::MergeFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestFlush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestFlush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFlush::CopyFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFlush::IsInitialized() const {
  return true;
}

void RequestFlush::Swap(RequestFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFlush::InternalSwap(RequestFlush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestFlush::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInfo::RequestInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.RequestInfo)
}

void RequestInfo::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:abci.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInfo::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestInfo& RequestInfo::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestInfo();
  return *internal_default_instance();
}

RequestInfo* RequestInfo::New(::google::protobuf::Arena* arena) const {
  RequestInfo* n = new RequestInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RequestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestInfo)
  return false;
#undef DO_
}

void RequestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestInfo)
}

::google::protobuf::uint8* RequestInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestInfo)
    MergeFrom(*source);
  }
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void RequestInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::Swap(RequestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInfo::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestSetOption::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetOption::kKeyFieldNumber;
const int RequestSetOption::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetOption::RequestSetOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestSetOption();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestSetOption)
}
RequestSetOption::RequestSetOption(const RequestSetOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.RequestSetOption)
}

void RequestSetOption::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestSetOption::~RequestSetOption() {
  // @@protoc_insertion_point(destructor:abci.RequestSetOption)
  SharedDtor();
}

void RequestSetOption::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestSetOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSetOption::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestSetOption& RequestSetOption::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestSetOption();
  return *internal_default_instance();
}

RequestSetOption* RequestSetOption::New(::google::protobuf::Arena* arena) const {
  RequestSetOption* n = new RequestSetOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RequestSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestSetOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestSetOption.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestSetOption.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestSetOption)
  return false;
#undef DO_
}

void RequestSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestSetOption)
}

::google::protobuf::uint8* RequestSetOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestSetOption.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestSetOption)
  return target;
}

size_t RequestSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestSetOption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSetOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSetOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSetOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestSetOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestSetOption)
    MergeFrom(*source);
  }
}

void RequestSetOption::MergeFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RequestSetOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSetOption::CopyFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetOption::IsInitialized() const {
  return true;
}

void RequestSetOption::Swap(RequestSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetOption::InternalSwap(RequestSetOption* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSetOption::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestInitChain::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInitChain::kValidatorsFieldNumber;
const int RequestInitChain::kAppStateBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInitChain::RequestInitChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestInitChain();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestInitChain)
}
RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      validators_(from.validators_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_state_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_state_bytes().size() > 0) {
    app_state_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_state_bytes_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.RequestInitChain)
}

void RequestInitChain::SharedCtor() {
  app_state_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:abci.RequestInitChain)
  SharedDtor();
}

void RequestInitChain::SharedDtor() {
  app_state_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestInitChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInitChain::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestInitChain& RequestInitChain::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestInitChain();
  return *internal_default_instance();
}

RequestInitChain* RequestInitChain::New(::google::protobuf::Arena* arena) const {
  RequestInitChain* n = new RequestInitChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  app_state_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RequestInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestInitChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .abci.Validator validators = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_validators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes app_state_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_state_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestInitChain)
  return false;
#undef DO_
}

void RequestInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .abci.Validator validators = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validators_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->validators(static_cast<int>(i)), output);
  }

  // bytes app_state_bytes = 2;
  if (this->app_state_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->app_state_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestInitChain)
}

::google::protobuf::uint8* RequestInitChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .abci.Validator validators = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validators_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->validators(static_cast<int>(i)), deterministic, target);
  }

  // bytes app_state_bytes = 2;
  if (this->app_state_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->app_state_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestInitChain)
  return target;
}

size_t RequestInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestInitChain)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .abci.Validator validators = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->validators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->validators(static_cast<int>(i)));
    }
  }

  // bytes app_state_bytes = 2;
  if (this->app_state_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_state_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInitChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInitChain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestInitChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestInitChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestInitChain)
    MergeFrom(*source);
  }
}

void RequestInitChain::MergeFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from.app_state_bytes().size() > 0) {

    app_state_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_state_bytes_);
  }
}

void RequestInitChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {
  return true;
}

void RequestInitChain::Swap(RequestInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInitChain::InternalSwap(RequestInitChain* other) {
  using std::swap;
  validators_.InternalSwap(&other->validators_);
  app_state_bytes_.Swap(&other->app_state_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestInitChain::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQuery::kDataFieldNumber;
const int RequestQuery::kPathFieldNumber;
const int RequestQuery::kHeightFieldNumber;
const int RequestQuery::kProveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuery::RequestQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestQuery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestQuery)
}
RequestQuery::RequestQuery(const RequestQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&prove_) -
    reinterpret_cast<char*>(&height_)) + sizeof(prove_));
  // @@protoc_insertion_point(copy_constructor:abci.RequestQuery)
}

void RequestQuery::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prove_) -
      reinterpret_cast<char*>(&height_)) + sizeof(prove_));
  _cached_size_ = 0;
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:abci.RequestQuery)
  SharedDtor();
}

void RequestQuery::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuery::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQuery& RequestQuery::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestQuery();
  return *internal_default_instance();
}

RequestQuery* RequestQuery::New(::google::protobuf::Arena* arena) const {
  RequestQuery* n = new RequestQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prove_) -
      reinterpret_cast<char*>(&height_)) + sizeof(prove_));
  _internal_metadata_.Clear();
}

bool RequestQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.RequestQuery.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prove = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestQuery)
  return false;
#undef DO_
}

void RequestQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestQuery.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prove(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestQuery)
}

::google::protobuf::uint8* RequestQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.RequestQuery.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->height(), target);
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->prove(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestQuery)
  return target;
}

size_t RequestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestQuery)
    MergeFrom(*source);
  }
}

void RequestQuery::MergeFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.prove() != 0) {
    set_prove(from.prove());
  }
}

void RequestQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {
  return true;
}

void RequestQuery::Swap(RequestQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuery::InternalSwap(RequestQuery* other) {
  using std::swap;
  data_.Swap(&other->data_);
  path_.Swap(&other->path_);
  swap(height_, other->height_);
  swap(prove_, other->prove_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQuery::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestBeginBlock::InitAsDefaultInstance() {
  ::abci::_RequestBeginBlock_default_instance_._instance.get_mutable()->header_ = const_cast< ::abci::Header*>(
      ::abci::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBeginBlock::kHashFieldNumber;
const int RequestBeginBlock::kHeaderFieldNumber;
const int RequestBeginBlock::kAbsentValidatorsFieldNumber;
const int RequestBeginBlock::kByzantineValidatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBeginBlock::RequestBeginBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestBeginBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestBeginBlock)
}
RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      absent_validators_(from.absent_validators_),
      byzantine_validators_(from.byzantine_validators_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_header()) {
    header_ = new ::abci::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abci.RequestBeginBlock)
}

void RequestBeginBlock::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:abci.RequestBeginBlock)
  SharedDtor();
}

void RequestBeginBlock::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RequestBeginBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBeginBlock::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestBeginBlock& RequestBeginBlock::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestBeginBlock();
  return *internal_default_instance();
}

RequestBeginBlock* RequestBeginBlock::New(::google::protobuf::Arena* arena) const {
  RequestBeginBlock* n = new RequestBeginBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  absent_validators_.Clear();
  byzantine_validators_.Clear();
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool RequestBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestBeginBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 absent_validators = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_absent_validators())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_absent_validators())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abci.Evidence byzantine_validators = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_byzantine_validators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestBeginBlock)
  return false;
#undef DO_
}

void RequestBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .abci.Header header = 2;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // repeated int32 absent_validators = 3;
  if (this->absent_validators_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _absent_validators_cached_byte_size_));
  }
  for (int i = 0, n = this->absent_validators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->absent_validators(i), output);
  }

  // repeated .abci.Evidence byzantine_validators = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->byzantine_validators_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->byzantine_validators(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestBeginBlock)
}

::google::protobuf::uint8* RequestBeginBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // .abci.Header header = 2;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->header_, deterministic, target);
  }

  // repeated int32 absent_validators = 3;
  if (this->absent_validators_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _absent_validators_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->absent_validators_, target);
  }

  // repeated .abci.Evidence byzantine_validators = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->byzantine_validators_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->byzantine_validators(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestBeginBlock)
  return target;
}

size_t RequestBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestBeginBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 absent_validators = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->absent_validators_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _absent_validators_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .abci.Evidence byzantine_validators = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->byzantine_validators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->byzantine_validators(static_cast<int>(i)));
    }
  }

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .abci.Header header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBeginBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBeginBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBeginBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestBeginBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestBeginBlock)
    MergeFrom(*source);
  }
}

void RequestBeginBlock::MergeFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  absent_validators_.MergeFrom(from.absent_validators_);
  byzantine_validators_.MergeFrom(from.byzantine_validators_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_header()) {
    mutable_header()->::abci::Header::MergeFrom(from.header());
  }
}

void RequestBeginBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {
  return true;
}

void RequestBeginBlock::Swap(RequestBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  using std::swap;
  absent_validators_.InternalSwap(&other->absent_validators_);
  byzantine_validators_.InternalSwap(&other->byzantine_validators_);
  hash_.Swap(&other->hash_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestBeginBlock::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestCheckTx::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCheckTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCheckTx::RequestCheckTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestCheckTx();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestCheckTx)
}
RequestCheckTx::RequestCheckTx(const RequestCheckTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx().size() > 0) {
    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.RequestCheckTx)
}

void RequestCheckTx::SharedCtor() {
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestCheckTx::~RequestCheckTx() {
  // @@protoc_insertion_point(destructor:abci.RequestCheckTx)
  SharedDtor();
}

void RequestCheckTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestCheckTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCheckTx::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestCheckTx& RequestCheckTx::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestCheckTx();
  return *internal_default_instance();
}

RequestCheckTx* RequestCheckTx::New(::google::protobuf::Arena* arena) const {
  RequestCheckTx* n = new RequestCheckTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RequestCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestCheckTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestCheckTx)
  return false;
#undef DO_
}

void RequestCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestCheckTx)
}

::google::protobuf::uint8* RequestCheckTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestCheckTx)
  return target;
}

size_t RequestCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestCheckTx)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheckTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCheckTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCheckTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestCheckTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestCheckTx)
    MergeFrom(*source);
  }
}

void RequestCheckTx::MergeFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestCheckTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCheckTx::CopyFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckTx::IsInitialized() const {
  return true;
}

void RequestCheckTx::Swap(RequestCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCheckTx::InternalSwap(RequestCheckTx* other) {
  using std::swap;
  tx_.Swap(&other->tx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCheckTx::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestDeliverTx::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDeliverTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDeliverTx::RequestDeliverTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestDeliverTx();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestDeliverTx)
}
RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx().size() > 0) {
    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.RequestDeliverTx)
}

void RequestDeliverTx::SharedCtor() {
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:abci.RequestDeliverTx)
  SharedDtor();
}

void RequestDeliverTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestDeliverTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDeliverTx::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestDeliverTx& RequestDeliverTx::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestDeliverTx();
  return *internal_default_instance();
}

RequestDeliverTx* RequestDeliverTx::New(::google::protobuf::Arena* arena) const {
  RequestDeliverTx* n = new RequestDeliverTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RequestDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestDeliverTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestDeliverTx)
  return false;
#undef DO_
}

void RequestDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestDeliverTx)
}

::google::protobuf::uint8* RequestDeliverTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tx(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestDeliverTx)
  return target;
}

size_t RequestDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestDeliverTx)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDeliverTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestDeliverTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDeliverTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestDeliverTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestDeliverTx)
    MergeFrom(*source);
  }
}

void RequestDeliverTx::MergeFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestDeliverTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {
  return true;
}

void RequestDeliverTx::Swap(RequestDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  using std::swap;
  tx_.Swap(&other->tx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestDeliverTx::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestEndBlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEndBlock::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEndBlock::RequestEndBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestEndBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestEndBlock)
}
RequestEndBlock::RequestEndBlock(const RequestEndBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:abci.RequestEndBlock)
}

void RequestEndBlock::SharedCtor() {
  height_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

RequestEndBlock::~RequestEndBlock() {
  // @@protoc_insertion_point(destructor:abci.RequestEndBlock)
  SharedDtor();
}

void RequestEndBlock::SharedDtor() {
}

void RequestEndBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEndBlock::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestEndBlock& RequestEndBlock::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestEndBlock();
  return *internal_default_instance();
}

RequestEndBlock* RequestEndBlock::New(::google::protobuf::Arena* arena) const {
  RequestEndBlock* n = new RequestEndBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool RequestEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestEndBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestEndBlock)
  return false;
#undef DO_
}

void RequestEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestEndBlock)
}

::google::protobuf::uint8* RequestEndBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestEndBlock)
  return target;
}

size_t RequestEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestEndBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEndBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestEndBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEndBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestEndBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestEndBlock)
    MergeFrom(*source);
  }
}

void RequestEndBlock::MergeFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
}

void RequestEndBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEndBlock::CopyFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEndBlock::IsInitialized() const {
  return true;
}

void RequestEndBlock::Swap(RequestEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEndBlock::InternalSwap(RequestEndBlock* other) {
  using std::swap;
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEndBlock::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCommit::RequestCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsRequestCommit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.RequestCommit)
}
RequestCommit::RequestCommit(const RequestCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:abci.RequestCommit)
}

void RequestCommit::SharedCtor() {
  _cached_size_ = 0;
}

RequestCommit::~RequestCommit() {
  // @@protoc_insertion_point(destructor:abci.RequestCommit)
  SharedDtor();
}

void RequestCommit::SharedDtor() {
}

void RequestCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCommit::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestCommit& RequestCommit::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsRequestCommit();
  return *internal_default_instance();
}

RequestCommit* RequestCommit::New(::google::protobuf::Arena* arena) const {
  RequestCommit* n = new RequestCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.RequestCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RequestCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.RequestCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.RequestCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.RequestCommit)
  return false;
#undef DO_
}

void RequestCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.RequestCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.RequestCommit)
}

::google::protobuf::uint8* RequestCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.RequestCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.RequestCommit)
  return target;
}

size_t RequestCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.RequestCommit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.RequestCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.RequestCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.RequestCommit)
    MergeFrom(*source);
  }
}

void RequestCommit::MergeFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.RequestCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.RequestCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCommit::CopyFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.RequestCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCommit::IsInitialized() const {
  return true;
}

void RequestCommit::Swap(RequestCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCommit::InternalSwap(RequestCommit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCommit::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::abci::_Response_default_instance_.exception_ = const_cast< ::abci::ResponseException*>(
      ::abci::ResponseException::internal_default_instance());
  ::abci::_Response_default_instance_.echo_ = const_cast< ::abci::ResponseEcho*>(
      ::abci::ResponseEcho::internal_default_instance());
  ::abci::_Response_default_instance_.flush_ = const_cast< ::abci::ResponseFlush*>(
      ::abci::ResponseFlush::internal_default_instance());
  ::abci::_Response_default_instance_.info_ = const_cast< ::abci::ResponseInfo*>(
      ::abci::ResponseInfo::internal_default_instance());
  ::abci::_Response_default_instance_.set_option_ = const_cast< ::abci::ResponseSetOption*>(
      ::abci::ResponseSetOption::internal_default_instance());
  ::abci::_Response_default_instance_.init_chain_ = const_cast< ::abci::ResponseInitChain*>(
      ::abci::ResponseInitChain::internal_default_instance());
  ::abci::_Response_default_instance_.query_ = const_cast< ::abci::ResponseQuery*>(
      ::abci::ResponseQuery::internal_default_instance());
  ::abci::_Response_default_instance_.begin_block_ = const_cast< ::abci::ResponseBeginBlock*>(
      ::abci::ResponseBeginBlock::internal_default_instance());
  ::abci::_Response_default_instance_.check_tx_ = const_cast< ::abci::ResponseCheckTx*>(
      ::abci::ResponseCheckTx::internal_default_instance());
  ::abci::_Response_default_instance_.deliver_tx_ = const_cast< ::abci::ResponseDeliverTx*>(
      ::abci::ResponseDeliverTx::internal_default_instance());
  ::abci::_Response_default_instance_.end_block_ = const_cast< ::abci::ResponseEndBlock*>(
      ::abci::ResponseEndBlock::internal_default_instance());
  ::abci::_Response_default_instance_.commit_ = const_cast< ::abci::ResponseCommit*>(
      ::abci::ResponseCommit::internal_default_instance());
}
void Response::set_allocated_exception(::abci::ResponseException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    set_has_exception();
    value_.exception_ = exception;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.exception)
}
void Response::set_allocated_echo(::abci::ResponseEcho* echo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (echo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      echo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.echo)
}
void Response::set_allocated_flush(::abci::ResponseFlush* flush) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (flush) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flush = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.flush)
}
void Response::set_allocated_info(::abci::ResponseInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.info)
}
void Response::set_allocated_set_option(::abci::ResponseSetOption* set_option) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (set_option) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_option = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_option, submessage_arena);
    }
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.set_option)
}
void Response::set_allocated_init_chain(::abci::ResponseInitChain* init_chain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (init_chain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init_chain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.init_chain)
}
void Response::set_allocated_query(::abci::ResponseQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.query)
}
void Response::set_allocated_begin_block(::abci::ResponseBeginBlock* begin_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (begin_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      begin_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.begin_block)
}
void Response::set_allocated_check_tx(::abci::ResponseCheckTx* check_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (check_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      check_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.check_tx)
}
void Response::set_allocated_deliver_tx(::abci::ResponseDeliverTx* deliver_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (deliver_tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deliver_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.deliver_tx)
}
void Response::set_allocated_end_block(::abci::ResponseEndBlock* end_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (end_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.end_block)
}
void Response::set_allocated_commit(::abci::ResponseCommit* commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (commit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:abci.Response.commit)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kExceptionFieldNumber;
const int Response::kEchoFieldNumber;
const int Response::kFlushFieldNumber;
const int Response::kInfoFieldNumber;
const int Response::kSetOptionFieldNumber;
const int Response::kInitChainFieldNumber;
const int Response::kQueryFieldNumber;
const int Response::kBeginBlockFieldNumber;
const int Response::kCheckTxFieldNumber;
const int Response::kDeliverTxFieldNumber;
const int Response::kEndBlockFieldNumber;
const int Response::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kException: {
      mutable_exception()->::abci::ResponseException::MergeFrom(from.exception());
      break;
    }
    case kEcho: {
      mutable_echo()->::abci::ResponseEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::abci::ResponseFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::abci::ResponseInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::abci::ResponseSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::abci::ResponseInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::abci::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::abci::ResponseBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::abci::ResponseCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::abci::ResponseDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::abci::ResponseEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::abci::ResponseCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:abci.Response)
}

void Response::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:abci.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponse();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:abci.Response)
  switch (value_case()) {
    case kException: {
      delete value_.exception_;
      break;
    }
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .abci.ResponseException exception = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseEcho echo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseFlush flush = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseInfo info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseSetOption set_option = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseInitChain init_chain = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseQuery query = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseBeginBlock begin_block = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseCheckTx check_tx = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseDeliverTx deliver_tx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseEndBlock end_block = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ResponseCommit commit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .abci.ResponseException exception = 1;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_.exception_, output);
  }

  // .abci.ResponseEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.echo_, output);
  }

  // .abci.ResponseFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.flush_, output);
  }

  // .abci.ResponseInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.info_, output);
  }

  // .abci.ResponseSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.set_option_, output);
  }

  // .abci.ResponseInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.init_chain_, output);
  }

  // .abci.ResponseQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.query_, output);
  }

  // .abci.ResponseBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.begin_block_, output);
  }

  // .abci.ResponseCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.check_tx_, output);
  }

  // .abci.ResponseDeliverTx deliver_tx = 10;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.deliver_tx_, output);
  }

  // .abci.ResponseEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.end_block_, output);
  }

  // .abci.ResponseCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.commit_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .abci.ResponseException exception = 1;
  if (has_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *value_.exception_, deterministic, target);
  }

  // .abci.ResponseEcho echo = 2;
  if (has_echo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *value_.echo_, deterministic, target);
  }

  // .abci.ResponseFlush flush = 3;
  if (has_flush()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *value_.flush_, deterministic, target);
  }

  // .abci.ResponseInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *value_.info_, deterministic, target);
  }

  // .abci.ResponseSetOption set_option = 5;
  if (has_set_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *value_.set_option_, deterministic, target);
  }

  // .abci.ResponseInitChain init_chain = 6;
  if (has_init_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *value_.init_chain_, deterministic, target);
  }

  // .abci.ResponseQuery query = 7;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *value_.query_, deterministic, target);
  }

  // .abci.ResponseBeginBlock begin_block = 8;
  if (has_begin_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *value_.begin_block_, deterministic, target);
  }

  // .abci.ResponseCheckTx check_tx = 9;
  if (has_check_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *value_.check_tx_, deterministic, target);
  }

  // .abci.ResponseDeliverTx deliver_tx = 10;
  if (has_deliver_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *value_.deliver_tx_, deterministic, target);
  }

  // .abci.ResponseEndBlock end_block = 11;
  if (has_end_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *value_.end_block_, deterministic, target);
  }

  // .abci.ResponseCommit commit = 12;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *value_.commit_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (value_case()) {
    // .abci.ResponseException exception = 1;
    case kException: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.exception_);
      break;
    }
    // .abci.ResponseEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.echo_);
      break;
    }
    // .abci.ResponseFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.flush_);
      break;
    }
    // .abci.ResponseInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.info_);
      break;
    }
    // .abci.ResponseSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.set_option_);
      break;
    }
    // .abci.ResponseInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.init_chain_);
      break;
    }
    // .abci.ResponseQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_);
      break;
    }
    // .abci.ResponseBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.begin_block_);
      break;
    }
    // .abci.ResponseCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.check_tx_);
      break;
    }
    // .abci.ResponseDeliverTx deliver_tx = 10;
    case kDeliverTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.deliver_tx_);
      break;
    }
    // .abci.ResponseEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.end_block_);
      break;
    }
    // .abci.ResponseCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kException: {
      mutable_exception()->::abci::ResponseException::MergeFrom(from.exception());
      break;
    }
    case kEcho: {
      mutable_echo()->::abci::ResponseEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::abci::ResponseFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::abci::ResponseInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::abci::ResponseSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::abci::ResponseInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::abci::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::abci::ResponseBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::abci::ResponseCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::abci::ResponseDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::abci::ResponseEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::abci::ResponseCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseException::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseException::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseException::ResponseException()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseException();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseException)
}
ResponseException::ResponseException(const ResponseException& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.ResponseException)
}

void ResponseException::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseException::~ResponseException() {
  // @@protoc_insertion_point(destructor:abci.ResponseException)
  SharedDtor();
}

void ResponseException::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseException::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseException& ResponseException::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseException();
  return *internal_default_instance();
}

ResponseException* ResponseException::New(::google::protobuf::Arena* arena) const {
  ResponseException* n = new ResponseException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseException::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResponseException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseException.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseException)
  return false;
#undef DO_
}

void ResponseException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseException.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseException)
}

::google::protobuf::uint8* ResponseException::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseException.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseException)
  return target;
}

size_t ResponseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseException)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseException)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseException* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseException>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseException)
    MergeFrom(*source);
  }
}

void ResponseException::MergeFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void ResponseException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseException::CopyFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseException::IsInitialized() const {
  return true;
}

void ResponseException::Swap(ResponseException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseException::InternalSwap(ResponseException* other) {
  using std::swap;
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseException::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseEcho::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEcho::ResponseEcho()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseEcho();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseEcho)
}
ResponseEcho::ResponseEcho(const ResponseEcho& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.ResponseEcho)
}

void ResponseEcho::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseEcho::~ResponseEcho() {
  // @@protoc_insertion_point(destructor:abci.ResponseEcho)
  SharedDtor();
}

void ResponseEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseEcho::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEcho::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseEcho& ResponseEcho::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseEcho();
  return *internal_default_instance();
}

ResponseEcho* ResponseEcho::New(::google::protobuf::Arena* arena) const {
  ResponseEcho* n = new ResponseEcho;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResponseEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseEcho)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseEcho.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseEcho)
  return false;
#undef DO_
}

void ResponseEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseEcho)
}

::google::protobuf::uint8* ResponseEcho::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseEcho.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseEcho)
  return target;
}

size_t ResponseEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseEcho)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEcho::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseEcho)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEcho* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEcho>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseEcho)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseEcho)
    MergeFrom(*source);
  }
}

void ResponseEcho::MergeFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseEcho)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ResponseEcho::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEcho::CopyFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEcho::IsInitialized() const {
  return true;
}

void ResponseEcho::Swap(ResponseEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEcho::InternalSwap(ResponseEcho* other) {
  using std::swap;
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEcho::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseFlush::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseFlush::ResponseFlush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseFlush();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseFlush)
}
ResponseFlush::ResponseFlush(const ResponseFlush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseFlush)
}

void ResponseFlush::SharedCtor() {
  _cached_size_ = 0;
}

ResponseFlush::~ResponseFlush() {
  // @@protoc_insertion_point(destructor:abci.ResponseFlush)
  SharedDtor();
}

void ResponseFlush::SharedDtor() {
}

void ResponseFlush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFlush::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseFlush& ResponseFlush::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseFlush();
  return *internal_default_instance();
}

ResponseFlush* ResponseFlush::New(::google::protobuf::Arena* arena) const {
  ResponseFlush* n = new ResponseFlush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ResponseFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseFlush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseFlush)
  return false;
#undef DO_
}

void ResponseFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseFlush)
}

::google::protobuf::uint8* ResponseFlush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseFlush)
  return target;
}

size_t ResponseFlush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseFlush)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFlush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseFlush)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseFlush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseFlush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseFlush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseFlush)
    MergeFrom(*source);
  }
}

void ResponseFlush::MergeFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseFlush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseFlush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFlush::CopyFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFlush::IsInitialized() const {
  return true;
}

void ResponseFlush::Swap(ResponseFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseFlush::InternalSwap(ResponseFlush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseFlush::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseInfo::kDataFieldNumber;
const int ResponseInfo::kVersionFieldNumber;
const int ResponseInfo::kLastBlockHeightFieldNumber;
const int ResponseInfo::kLastBlockAppHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInfo::ResponseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseInfo)
}
ResponseInfo::ResponseInfo(const ResponseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  last_block_app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_block_app_hash().size() > 0) {
    last_block_app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_block_app_hash_);
  }
  last_block_height_ = from.last_block_height_;
  // @@protoc_insertion_point(copy_constructor:abci.ResponseInfo)
}

void ResponseInfo::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_height_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ResponseInfo::~ResponseInfo() {
  // @@protoc_insertion_point(destructor:abci.ResponseInfo)
  SharedDtor();
}

void ResponseInfo::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseInfo::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseInfo& ResponseInfo::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseInfo();
  return *internal_default_instance();
}

ResponseInfo* ResponseInfo::New(::google::protobuf::Arena* arena) const {
  ResponseInfo* n = new ResponseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_height_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ResponseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseInfo.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_block_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_block_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_block_app_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_block_app_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseInfo)
  return false;
#undef DO_
}

void ResponseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // int64 last_block_height = 3;
  if (this->last_block_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_block_height(), output);
  }

  // bytes last_block_app_hash = 4;
  if (this->last_block_app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->last_block_app_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseInfo)
}

::google::protobuf::uint8* ResponseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // int64 last_block_height = 3;
  if (this->last_block_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_block_height(), target);
  }

  // bytes last_block_app_hash = 4;
  if (this->last_block_app_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->last_block_app_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseInfo)
  return target;
}

size_t ResponseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // bytes last_block_app_hash = 4;
  if (this->last_block_app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_block_app_hash());
  }

  // int64 last_block_height = 3;
  if (this->last_block_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_block_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseInfo)
    MergeFrom(*source);
  }
}

void ResponseInfo::MergeFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.last_block_app_hash().size() > 0) {

    last_block_app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_block_app_hash_);
  }
  if (from.last_block_height() != 0) {
    set_last_block_height(from.last_block_height());
  }
}

void ResponseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInfo::CopyFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInfo::IsInitialized() const {
  return true;
}

void ResponseInfo::Swap(ResponseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInfo::InternalSwap(ResponseInfo* other) {
  using std::swap;
  data_.Swap(&other->data_);
  version_.Swap(&other->version_);
  last_block_app_hash_.Swap(&other->last_block_app_hash_);
  swap(last_block_height_, other->last_block_height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseInfo::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseSetOption::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSetOption::kCodeFieldNumber;
const int ResponseSetOption::kLogFieldNumber;
const int ResponseSetOption::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSetOption::ResponseSetOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseSetOption();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseSetOption)
}
ResponseSetOption::ResponseSetOption(const ResponseSetOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:abci.ResponseSetOption)
}

void ResponseSetOption::SharedCtor() {
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  _cached_size_ = 0;
}

ResponseSetOption::~ResponseSetOption() {
  // @@protoc_insertion_point(destructor:abci.ResponseSetOption)
  SharedDtor();
}

void ResponseSetOption::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseSetOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSetOption::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseSetOption& ResponseSetOption::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseSetOption();
  return *internal_default_instance();
}

ResponseSetOption* ResponseSetOption::New(::google::protobuf::Arena* arena) const {
  ResponseSetOption* n = new ResponseSetOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  _internal_metadata_.Clear();
}

bool ResponseSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseSetOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseSetOption.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseSetOption.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseSetOption)
  return false;
#undef DO_
}

void ResponseSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseSetOption)
}

::google::protobuf::uint8* ResponseSetOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseSetOption.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseSetOption)
  return target;
}

size_t ResponseSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseSetOption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSetOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSetOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSetOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseSetOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseSetOption)
    MergeFrom(*source);
  }
}

void ResponseSetOption::MergeFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseSetOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSetOption::CopyFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSetOption::IsInitialized() const {
  return true;
}

void ResponseSetOption::Swap(ResponseSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSetOption::InternalSwap(ResponseSetOption* other) {
  using std::swap;
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSetOption::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseInitChain::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInitChain::ResponseInitChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseInitChain();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseInitChain)
}
ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseInitChain)
}

void ResponseInitChain::SharedCtor() {
  _cached_size_ = 0;
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:abci.ResponseInitChain)
  SharedDtor();
}

void ResponseInitChain::SharedDtor() {
}

void ResponseInitChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseInitChain::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseInitChain& ResponseInitChain::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseInitChain();
  return *internal_default_instance();
}

ResponseInitChain* ResponseInitChain::New(::google::protobuf::Arena* arena) const {
  ResponseInitChain* n = new ResponseInitChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ResponseInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseInitChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseInitChain)
  return false;
#undef DO_
}

void ResponseInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseInitChain)
}

::google::protobuf::uint8* ResponseInitChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseInitChain)
  return target;
}

size_t ResponseInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseInitChain)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseInitChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseInitChain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseInitChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseInitChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseInitChain)
    MergeFrom(*source);
  }
}

void ResponseInitChain::MergeFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseInitChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {
  return true;
}

void ResponseInitChain::Swap(ResponseInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseInitChain::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery::kCodeFieldNumber;
const int ResponseQuery::kLogFieldNumber;
const int ResponseQuery::kInfoFieldNumber;
const int ResponseQuery::kIndexFieldNumber;
const int ResponseQuery::kKeyFieldNumber;
const int ResponseQuery::kValueFieldNumber;
const int ResponseQuery::kProofFieldNumber;
const int ResponseQuery::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery::ResponseQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseQuery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proof().size() > 0) {
    proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&index_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:abci.ResponseQuery)
}

void ResponseQuery::SharedCtor() {
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(code_));
  _cached_size_ = 0;
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:abci.ResponseQuery)
  SharedDtor();
}

void ResponseQuery::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuery::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQuery& ResponseQuery::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseQuery();
  return *internal_default_instance();
}

ResponseQuery* ResponseQuery::New(::google::protobuf::Arena* arena) const {
  ResponseQuery* n = new ResponseQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool ResponseQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseQuery.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseQuery.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proof = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseQuery)
  return false;
#undef DO_
}

void ResponseQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 index = 5;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->index(), output);
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->key(), output);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->value(), output);
  }

  // bytes proof = 8;
  if (this->proof().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->proof(), output);
  }

  // int64 height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseQuery)
}

::google::protobuf::uint8* ResponseQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseQuery.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // int64 index = 5;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->index(), target);
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key(), target);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->value(), target);
  }

  // bytes proof = 8;
  if (this->proof().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->proof(), target);
  }

  // int64 height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseQuery)
  return target;
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // bytes proof = 8;
  if (this->proof().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proof());
  }

  // int64 index = 5;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 height = 9;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseQuery)
    MergeFrom(*source);
  }
}

void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.proof().size() > 0) {

    proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::Swap(ResponseQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery::InternalSwap(ResponseQuery* other) {
  using std::swap;
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  proof_.Swap(&other->proof_);
  swap(index_, other->index_);
  swap(height_, other->height_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuery::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseBeginBlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseBeginBlock::ResponseBeginBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseBeginBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseBeginBlock)
}
ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:abci.ResponseBeginBlock)
}

void ResponseBeginBlock::SharedCtor() {
  _cached_size_ = 0;
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:abci.ResponseBeginBlock)
  SharedDtor();
}

void ResponseBeginBlock::SharedDtor() {
}

void ResponseBeginBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBeginBlock::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseBeginBlock& ResponseBeginBlock::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseBeginBlock();
  return *internal_default_instance();
}

ResponseBeginBlock* ResponseBeginBlock::New(::google::protobuf::Arena* arena) const {
  ResponseBeginBlock* n = new ResponseBeginBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ResponseBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseBeginBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseBeginBlock)
  return false;
#undef DO_
}

void ResponseBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseBeginBlock)
}

::google::protobuf::uint8* ResponseBeginBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseBeginBlock)
  return target;
}

size_t ResponseBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseBeginBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBeginBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseBeginBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseBeginBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseBeginBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseBeginBlock)
    MergeFrom(*source);
  }
}

void ResponseBeginBlock::MergeFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseBeginBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {
  return true;
}

void ResponseBeginBlock::Swap(ResponseBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseBeginBlock::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseCheckTx::InitAsDefaultInstance() {
  ::abci::_ResponseCheckTx_default_instance_._instance.get_mutable()->fee_ = const_cast< ::abci::KI64Pair*>(
      ::abci::KI64Pair::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCheckTx::kCodeFieldNumber;
const int ResponseCheckTx::kDataFieldNumber;
const int ResponseCheckTx::kLogFieldNumber;
const int ResponseCheckTx::kInfoFieldNumber;
const int ResponseCheckTx::kGasWantedFieldNumber;
const int ResponseCheckTx::kGasUsedFieldNumber;
const int ResponseCheckTx::kTagsFieldNumber;
const int ResponseCheckTx::kFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCheckTx::ResponseCheckTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseCheckTx();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseCheckTx)
}
ResponseCheckTx::ResponseCheckTx(const ResponseCheckTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_fee()) {
    fee_ = new ::abci::KI64Pair(*from.fee_);
  } else {
    fee_ = NULL;
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:abci.ResponseCheckTx)
}

void ResponseCheckTx::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(code_));
  _cached_size_ = 0;
}

ResponseCheckTx::~ResponseCheckTx() {
  // @@protoc_insertion_point(destructor:abci.ResponseCheckTx)
  SharedDtor();
}

void ResponseCheckTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fee_;
}

void ResponseCheckTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCheckTx::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseCheckTx& ResponseCheckTx::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseCheckTx();
  return *internal_default_instance();
}

ResponseCheckTx* ResponseCheckTx::New(::google::protobuf::Arena* arena) const {
  ResponseCheckTx* n = new ResponseCheckTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) {
    delete fee_;
  }
  fee_ = NULL;
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool ResponseCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseCheckTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseCheckTx.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseCheckTx.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_wanted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_used = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abci.KVPair tags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.KI64Pair fee = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseCheckTx)
  return false;
#undef DO_
}

void ResponseCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(static_cast<int>(i)), output);
  }

  // .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fee_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseCheckTx)
}

::google::protobuf::uint8* ResponseCheckTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseCheckTx.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gas_wanted(), target);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gas_used(), target);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->tags(static_cast<int>(i)), deterministic, target);
  }

  // .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->fee_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseCheckTx)
  return target;
}

size_t ResponseCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseCheckTx)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .abci.KVPair tags = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fee_);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCheckTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseCheckTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCheckTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseCheckTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseCheckTx)
    MergeFrom(*source);
  }
}

void ResponseCheckTx::MergeFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_fee()) {
    mutable_fee()->::abci::KI64Pair::MergeFrom(from.fee());
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseCheckTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCheckTx::CopyFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckTx::IsInitialized() const {
  return true;
}

void ResponseCheckTx::Swap(ResponseCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCheckTx::InternalSwap(ResponseCheckTx* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  data_.Swap(&other->data_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  swap(fee_, other->fee_);
  swap(gas_wanted_, other->gas_wanted_);
  swap(gas_used_, other->gas_used_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCheckTx::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseDeliverTx::InitAsDefaultInstance() {
  ::abci::_ResponseDeliverTx_default_instance_._instance.get_mutable()->fee_ = const_cast< ::abci::KI64Pair*>(
      ::abci::KI64Pair::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDeliverTx::kCodeFieldNumber;
const int ResponseDeliverTx::kDataFieldNumber;
const int ResponseDeliverTx::kLogFieldNumber;
const int ResponseDeliverTx::kInfoFieldNumber;
const int ResponseDeliverTx::kGasWantedFieldNumber;
const int ResponseDeliverTx::kGasUsedFieldNumber;
const int ResponseDeliverTx::kTagsFieldNumber;
const int ResponseDeliverTx::kFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDeliverTx::ResponseDeliverTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseDeliverTx();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseDeliverTx)
}
ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_fee()) {
    fee_ = new ::abci::KI64Pair(*from.fee_);
  } else {
    fee_ = NULL;
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:abci.ResponseDeliverTx)
}

void ResponseDeliverTx::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(code_));
  _cached_size_ = 0;
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:abci.ResponseDeliverTx)
  SharedDtor();
}

void ResponseDeliverTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fee_;
}

void ResponseDeliverTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDeliverTx::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseDeliverTx& ResponseDeliverTx::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseDeliverTx();
  return *internal_default_instance();
}

ResponseDeliverTx* ResponseDeliverTx::New(::google::protobuf::Arena* arena) const {
  ResponseDeliverTx* n = new ResponseDeliverTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) {
    delete fee_;
  }
  fee_ = NULL;
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool ResponseDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseDeliverTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseDeliverTx.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.ResponseDeliverTx.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_wanted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_used = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .abci.KVPair tags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.KI64Pair fee = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseDeliverTx)
  return false;
#undef DO_
}

void ResponseDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tags(static_cast<int>(i)), output);
  }

  // .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fee_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseDeliverTx)
}

::google::protobuf::uint8* ResponseDeliverTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log(), target);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.ResponseDeliverTx.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gas_wanted(), target);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gas_used(), target);
  }

  // repeated .abci.KVPair tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->tags(static_cast<int>(i)), deterministic, target);
  }

  // .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->fee_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseDeliverTx)
  return target;
}

size_t ResponseDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseDeliverTx)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .abci.KVPair tags = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // .abci.KI64Pair fee = 8;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fee_);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDeliverTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseDeliverTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDeliverTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseDeliverTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseDeliverTx)
    MergeFrom(*source);
  }
}

void ResponseDeliverTx::MergeFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_fee()) {
    mutable_fee()->::abci::KI64Pair::MergeFrom(from.fee());
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseDeliverTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {
  return true;
}

void ResponseDeliverTx::Swap(ResponseDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  data_.Swap(&other->data_);
  log_.Swap(&other->log_);
  info_.Swap(&other->info_);
  swap(fee_, other->fee_);
  swap(gas_wanted_, other->gas_wanted_);
  swap(gas_used_, other->gas_used_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseDeliverTx::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseEndBlock::InitAsDefaultInstance() {
  ::abci::_ResponseEndBlock_default_instance_._instance.get_mutable()->consensus_param_updates_ = const_cast< ::abci::ConsensusParams*>(
      ::abci::ConsensusParams::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEndBlock::kValidatorUpdatesFieldNumber;
const int ResponseEndBlock::kConsensusParamUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEndBlock::ResponseEndBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseEndBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseEndBlock)
}
ResponseEndBlock::ResponseEndBlock(const ResponseEndBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      validator_updates_(from.validator_updates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consensus_param_updates()) {
    consensus_param_updates_ = new ::abci::ConsensusParams(*from.consensus_param_updates_);
  } else {
    consensus_param_updates_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abci.ResponseEndBlock)
}

void ResponseEndBlock::SharedCtor() {
  consensus_param_updates_ = NULL;
  _cached_size_ = 0;
}

ResponseEndBlock::~ResponseEndBlock() {
  // @@protoc_insertion_point(destructor:abci.ResponseEndBlock)
  SharedDtor();
}

void ResponseEndBlock::SharedDtor() {
  if (this != internal_default_instance()) delete consensus_param_updates_;
}

void ResponseEndBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEndBlock::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseEndBlock& ResponseEndBlock::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseEndBlock();
  return *internal_default_instance();
}

ResponseEndBlock* ResponseEndBlock::New(::google::protobuf::Arena* arena) const {
  ResponseEndBlock* n = new ResponseEndBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_updates_.Clear();
  if (GetArenaNoVirtual() == NULL && consensus_param_updates_ != NULL) {
    delete consensus_param_updates_;
  }
  consensus_param_updates_ = NULL;
  _internal_metadata_.Clear();
}

bool ResponseEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseEndBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .abci.Validator validator_updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_validator_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.ConsensusParams consensus_param_updates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_consensus_param_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseEndBlock)
  return false;
#undef DO_
}

void ResponseEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .abci.Validator validator_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validator_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->validator_updates(static_cast<int>(i)), output);
  }

  // .abci.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->consensus_param_updates_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseEndBlock)
}

::google::protobuf::uint8* ResponseEndBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .abci.Validator validator_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validator_updates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->validator_updates(static_cast<int>(i)), deterministic, target);
  }

  // .abci.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->consensus_param_updates_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseEndBlock)
  return target;
}

size_t ResponseEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseEndBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .abci.Validator validator_updates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->validator_updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->validator_updates(static_cast<int>(i)));
    }
  }

  // .abci.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->consensus_param_updates_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEndBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseEndBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseEndBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseEndBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseEndBlock)
    MergeFrom(*source);
  }
}

void ResponseEndBlock::MergeFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validator_updates_.MergeFrom(from.validator_updates_);
  if (from.has_consensus_param_updates()) {
    mutable_consensus_param_updates()->::abci::ConsensusParams::MergeFrom(from.consensus_param_updates());
  }
}

void ResponseEndBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEndBlock::CopyFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEndBlock::IsInitialized() const {
  return true;
}

void ResponseEndBlock::Swap(ResponseEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEndBlock::InternalSwap(ResponseEndBlock* other) {
  using std::swap;
  validator_updates_.InternalSwap(&other->validator_updates_);
  swap(consensus_param_updates_, other->consensus_param_updates_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseEndBlock::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCommit::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCommit::ResponseCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsResponseCommit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ResponseCommit)
}
ResponseCommit::ResponseCommit(const ResponseCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:abci.ResponseCommit)
}

void ResponseCommit::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ResponseCommit::~ResponseCommit() {
  // @@protoc_insertion_point(destructor:abci.ResponseCommit)
  SharedDtor();
}

void ResponseCommit::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseCommit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCommit::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseCommit& ResponseCommit::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsResponseCommit();
  return *internal_default_instance();
}

ResponseCommit* ResponseCommit::New(::google::protobuf::Arena* arena) const {
  ResponseCommit* n = new ResponseCommit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ResponseCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ResponseCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ResponseCommit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ResponseCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ResponseCommit)
  return false;
#undef DO_
}

void ResponseCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ResponseCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ResponseCommit)
}

::google::protobuf::uint8* ResponseCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ResponseCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ResponseCommit)
  return target;
}

size_t ResponseCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ResponseCommit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ResponseCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ResponseCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ResponseCommit)
    MergeFrom(*source);
  }
}

void ResponseCommit::MergeFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ResponseCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ResponseCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCommit::CopyFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCommit::IsInitialized() const {
  return true;
}

void ResponseCommit::Swap(ResponseCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCommit::InternalSwap(ResponseCommit* other) {
  using std::swap;
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCommit::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConsensusParams::InitAsDefaultInstance() {
  ::abci::_ConsensusParams_default_instance_._instance.get_mutable()->block_size_ = const_cast< ::abci::BlockSize*>(
      ::abci::BlockSize::internal_default_instance());
  ::abci::_ConsensusParams_default_instance_._instance.get_mutable()->tx_size_ = const_cast< ::abci::TxSize*>(
      ::abci::TxSize::internal_default_instance());
  ::abci::_ConsensusParams_default_instance_._instance.get_mutable()->block_gossip_ = const_cast< ::abci::BlockGossip*>(
      ::abci::BlockGossip::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusParams::kBlockSizeFieldNumber;
const int ConsensusParams::kTxSizeFieldNumber;
const int ConsensusParams::kBlockGossipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusParams::ConsensusParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsConsensusParams();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block_size()) {
    block_size_ = new ::abci::BlockSize(*from.block_size_);
  } else {
    block_size_ = NULL;
  }
  if (from.has_tx_size()) {
    tx_size_ = new ::abci::TxSize(*from.tx_size_);
  } else {
    tx_size_ = NULL;
  }
  if (from.has_block_gossip()) {
    block_gossip_ = new ::abci::BlockGossip(*from.block_gossip_);
  } else {
    block_gossip_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abci.ConsensusParams)
}

void ConsensusParams::SharedCtor() {
  ::memset(&block_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_gossip_) -
      reinterpret_cast<char*>(&block_size_)) + sizeof(block_gossip_));
  _cached_size_ = 0;
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:abci.ConsensusParams)
  SharedDtor();
}

void ConsensusParams::SharedDtor() {
  if (this != internal_default_instance()) delete block_size_;
  if (this != internal_default_instance()) delete tx_size_;
  if (this != internal_default_instance()) delete block_gossip_;
}

void ConsensusParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusParams::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConsensusParams& ConsensusParams::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsConsensusParams();
  return *internal_default_instance();
}

ConsensusParams* ConsensusParams::New(::google::protobuf::Arena* arena) const {
  ConsensusParams* n = new ConsensusParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.ConsensusParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && block_size_ != NULL) {
    delete block_size_;
  }
  block_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && tx_size_ != NULL) {
    delete tx_size_;
  }
  tx_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && block_gossip_ != NULL) {
    delete block_gossip_;
  }
  block_gossip_ = NULL;
  _internal_metadata_.Clear();
}

bool ConsensusParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.ConsensusParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .abci.BlockSize block_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.TxSize tx_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.BlockGossip block_gossip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block_gossip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.ConsensusParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.ConsensusParams)
  return false;
#undef DO_
}

void ConsensusParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.ConsensusParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .abci.BlockSize block_size = 1;
  if (this->has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->block_size_, output);
  }

  // .abci.TxSize tx_size = 2;
  if (this->has_tx_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tx_size_, output);
  }

  // .abci.BlockGossip block_gossip = 3;
  if (this->has_block_gossip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->block_gossip_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.ConsensusParams)
}

::google::protobuf::uint8* ConsensusParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.ConsensusParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .abci.BlockSize block_size = 1;
  if (this->has_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->block_size_, deterministic, target);
  }

  // .abci.TxSize tx_size = 2;
  if (this->has_tx_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->tx_size_, deterministic, target);
  }

  // .abci.BlockGossip block_gossip = 3;
  if (this->has_block_gossip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->block_gossip_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.ConsensusParams)
  return target;
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.ConsensusParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .abci.BlockSize block_size = 1;
  if (this->has_block_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->block_size_);
  }

  // .abci.TxSize tx_size = 2;
  if (this->has_tx_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tx_size_);
  }

  // .abci.BlockGossip block_gossip = 3;
  if (this->has_block_gossip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->block_gossip_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.ConsensusParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.ConsensusParams)
    MergeFrom(*source);
  }
}

void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block_size()) {
    mutable_block_size()->::abci::BlockSize::MergeFrom(from.block_size());
  }
  if (from.has_tx_size()) {
    mutable_tx_size()->::abci::TxSize::MergeFrom(from.tx_size());
  }
  if (from.has_block_gossip()) {
    mutable_block_gossip()->::abci::BlockGossip::MergeFrom(from.block_gossip());
  }
}

void ConsensusParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::Swap(ConsensusParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusParams::InternalSwap(ConsensusParams* other) {
  using std::swap;
  swap(block_size_, other->block_size_);
  swap(tx_size_, other->tx_size_);
  swap(block_gossip_, other->block_gossip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusParams::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockSize::kMaxBytesFieldNumber;
const int BlockSize::kMaxTxsFieldNumber;
const int BlockSize::kMaxGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockSize::BlockSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsBlockSize();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.BlockSize)
}
BlockSize::BlockSize(const BlockSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_bytes_, &from.max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  // @@protoc_insertion_point(copy_constructor:abci.BlockSize)
}

void BlockSize::SharedCtor() {
  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_gas_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  _cached_size_ = 0;
}

BlockSize::~BlockSize() {
  // @@protoc_insertion_point(destructor:abci.BlockSize)
  SharedDtor();
}

void BlockSize::SharedDtor() {
}

void BlockSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockSize::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockSize& BlockSize::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsBlockSize();
  return *internal_default_instance();
}

BlockSize* BlockSize::New(::google::protobuf::Arena* arena) const {
  BlockSize* n = new BlockSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockSize::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.BlockSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_gas_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  _internal_metadata_.Clear();
}

bool BlockSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.BlockSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_txs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_txs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_gas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_gas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.BlockSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.BlockSize)
  return false;
#undef DO_
}

void BlockSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.BlockSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_bytes(), output);
  }

  // int32 max_txs = 2;
  if (this->max_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_txs(), output);
  }

  // int64 max_gas = 3;
  if (this->max_gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_gas(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.BlockSize)
}

::google::protobuf::uint8* BlockSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.BlockSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_bytes(), target);
  }

  // int32 max_txs = 2;
  if (this->max_txs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_txs(), target);
  }

  // int64 max_gas = 3;
  if (this->max_gas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_gas(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.BlockSize)
  return target;
}

size_t BlockSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.BlockSize)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bytes());
  }

  // int32 max_txs = 2;
  if (this->max_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_txs());
  }

  // int64 max_gas = 3;
  if (this->max_gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_gas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.BlockSize)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.BlockSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.BlockSize)
    MergeFrom(*source);
  }
}

void BlockSize::MergeFrom(const BlockSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.BlockSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_bytes() != 0) {
    set_max_bytes(from.max_bytes());
  }
  if (from.max_txs() != 0) {
    set_max_txs(from.max_txs());
  }
  if (from.max_gas() != 0) {
    set_max_gas(from.max_gas());
  }
}

void BlockSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.BlockSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockSize::CopyFrom(const BlockSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.BlockSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSize::IsInitialized() const {
  return true;
}

void BlockSize::Swap(BlockSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockSize::InternalSwap(BlockSize* other) {
  using std::swap;
  swap(max_bytes_, other->max_bytes_);
  swap(max_txs_, other->max_txs_);
  swap(max_gas_, other->max_gas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockSize::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TxSize::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxSize::kMaxBytesFieldNumber;
const int TxSize::kMaxGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxSize::TxSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsTxSize();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.TxSize)
}
TxSize::TxSize(const TxSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_gas_, &from.max_gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bytes_) -
    reinterpret_cast<char*>(&max_gas_)) + sizeof(max_bytes_));
  // @@protoc_insertion_point(copy_constructor:abci.TxSize)
}

void TxSize::SharedCtor() {
  ::memset(&max_gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bytes_) -
      reinterpret_cast<char*>(&max_gas_)) + sizeof(max_bytes_));
  _cached_size_ = 0;
}

TxSize::~TxSize() {
  // @@protoc_insertion_point(destructor:abci.TxSize)
  SharedDtor();
}

void TxSize::SharedDtor() {
}

void TxSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxSize::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxSize& TxSize::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsTxSize();
  return *internal_default_instance();
}

TxSize* TxSize::New(::google::protobuf::Arena* arena) const {
  TxSize* n = new TxSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxSize::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.TxSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bytes_) -
      reinterpret_cast<char*>(&max_gas_)) + sizeof(max_bytes_));
  _internal_metadata_.Clear();
}

bool TxSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.TxSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_gas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_gas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.TxSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.TxSize)
  return false;
#undef DO_
}

void TxSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.TxSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_bytes(), output);
  }

  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_gas(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.TxSize)
}

::google::protobuf::uint8* TxSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.TxSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_bytes(), target);
  }

  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_gas(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.TxSize)
  return target;
}

size_t TxSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.TxSize)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_gas());
  }

  // int32 max_bytes = 1;
  if (this->max_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.TxSize)
  GOOGLE_DCHECK_NE(&from, this);
  const TxSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.TxSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.TxSize)
    MergeFrom(*source);
  }
}

void TxSize::MergeFrom(const TxSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.TxSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_gas() != 0) {
    set_max_gas(from.max_gas());
  }
  if (from.max_bytes() != 0) {
    set_max_bytes(from.max_bytes());
  }
}

void TxSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.TxSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxSize::CopyFrom(const TxSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.TxSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxSize::IsInitialized() const {
  return true;
}

void TxSize::Swap(TxSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxSize::InternalSwap(TxSize* other) {
  using std::swap;
  swap(max_gas_, other->max_gas_);
  swap(max_bytes_, other->max_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxSize::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockGossip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockGossip::kBlockPartSizeBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockGossip::BlockGossip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsBlockGossip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.BlockGossip)
}
BlockGossip::BlockGossip(const BlockGossip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_part_size_bytes_ = from.block_part_size_bytes_;
  // @@protoc_insertion_point(copy_constructor:abci.BlockGossip)
}

void BlockGossip::SharedCtor() {
  block_part_size_bytes_ = 0;
  _cached_size_ = 0;
}

BlockGossip::~BlockGossip() {
  // @@protoc_insertion_point(destructor:abci.BlockGossip)
  SharedDtor();
}

void BlockGossip::SharedDtor() {
}

void BlockGossip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockGossip::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockGossip& BlockGossip::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsBlockGossip();
  return *internal_default_instance();
}

BlockGossip* BlockGossip::New(::google::protobuf::Arena* arena) const {
  BlockGossip* n = new BlockGossip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockGossip::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.BlockGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_part_size_bytes_ = 0;
  _internal_metadata_.Clear();
}

bool BlockGossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.BlockGossip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 block_part_size_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_part_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.BlockGossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.BlockGossip)
  return false;
#undef DO_
}

void BlockGossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.BlockGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_part_size_bytes = 1;
  if (this->block_part_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->block_part_size_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.BlockGossip)
}

::google::protobuf::uint8* BlockGossip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.BlockGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_part_size_bytes = 1;
  if (this->block_part_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->block_part_size_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.BlockGossip)
  return target;
}

size_t BlockGossip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.BlockGossip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 block_part_size_bytes = 1;
  if (this->block_part_size_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->block_part_size_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockGossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.BlockGossip)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockGossip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockGossip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.BlockGossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.BlockGossip)
    MergeFrom(*source);
  }
}

void BlockGossip::MergeFrom(const BlockGossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.BlockGossip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_part_size_bytes() != 0) {
    set_block_part_size_bytes(from.block_part_size_bytes());
  }
}

void BlockGossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.BlockGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockGossip::CopyFrom(const BlockGossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.BlockGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockGossip::IsInitialized() const {
  return true;
}

void BlockGossip::Swap(BlockGossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockGossip::InternalSwap(BlockGossip* other) {
  using std::swap;
  swap(block_part_size_bytes_, other->block_part_size_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockGossip::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::abci::_Header_default_instance_._instance.get_mutable()->last_block_id_ = const_cast< ::abci::BlockID*>(
      ::abci::BlockID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kChainIdFieldNumber;
const int Header::kHeightFieldNumber;
const int Header::kTimeFieldNumber;
const int Header::kNumTxsFieldNumber;
const int Header::kLastBlockIdFieldNumber;
const int Header::kLastCommitHashFieldNumber;
const int Header::kDataHashFieldNumber;
const int Header::kValidatorsHashFieldNumber;
const int Header::kAppHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chain_id().size() > 0) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  last_commit_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_commit_hash().size() > 0) {
    last_commit_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_commit_hash_);
  }
  data_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_hash().size() > 0) {
    data_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_hash_);
  }
  validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.validators_hash().size() > 0) {
    validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validators_hash_);
  }
  app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_hash().size() > 0) {
    app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_hash_);
  }
  if (from.has_last_block_id()) {
    last_block_id_ = new ::abci::BlockID(*from.last_block_id_);
  } else {
    last_block_id_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_txs_) -
    reinterpret_cast<char*>(&height_)) + sizeof(num_txs_));
  // @@protoc_insertion_point(copy_constructor:abci.Header)
}

void Header::SharedCtor() {
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_txs_) -
      reinterpret_cast<char*>(&last_block_id_)) + sizeof(num_txs_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:abci.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_block_id_;
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && last_block_id_ != NULL) {
    delete last_block_id_;
  }
  last_block_id_ = NULL;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_txs_) -
      reinterpret_cast<char*>(&height_)) + sizeof(num_txs_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string chain_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), static_cast<int>(this->chain_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "abci.Header.chain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_txs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_txs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.BlockID last_block_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_commit_hash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_commit_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data_hash = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes validators_hash = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_validators_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes app_hash = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), static_cast<int>(this->chain_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.Header.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chain_id(), output);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // int32 num_txs = 4;
  if (this->num_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_txs(), output);
  }

  // .abci.BlockID last_block_id = 5;
  if (this->has_last_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->last_block_id_, output);
  }

  // bytes last_commit_hash = 6;
  if (this->last_commit_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->last_commit_hash(), output);
  }

  // bytes data_hash = 7;
  if (this->data_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data_hash(), output);
  }

  // bytes validators_hash = 8;
  if (this->validators_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->validators_hash(), output);
  }

  // bytes app_hash = 9;
  if (this->app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->app_hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), static_cast<int>(this->chain_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "abci.Header.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chain_id(), target);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // int32 num_txs = 4;
  if (this->num_txs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_txs(), target);
  }

  // .abci.BlockID last_block_id = 5;
  if (this->has_last_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->last_block_id_, deterministic, target);
  }

  // bytes last_commit_hash = 6;
  if (this->last_commit_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->last_commit_hash(), target);
  }

  // bytes data_hash = 7;
  if (this->data_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data_hash(), target);
  }

  // bytes validators_hash = 8;
  if (this->validators_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->validators_hash(), target);
  }

  // bytes app_hash = 9;
  if (this->app_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->app_hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // bytes last_commit_hash = 6;
  if (this->last_commit_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_commit_hash());
  }

  // bytes data_hash = 7;
  if (this->data_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_hash());
  }

  // bytes validators_hash = 8;
  if (this->validators_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->validators_hash());
  }

  // bytes app_hash = 9;
  if (this->app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_hash());
  }

  // .abci.BlockID last_block_id = 5;
  if (this->has_last_block_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->last_block_id_);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // int32 num_txs = 4;
  if (this->num_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_txs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.last_commit_hash().size() > 0) {

    last_commit_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_commit_hash_);
  }
  if (from.data_hash().size() > 0) {

    data_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_hash_);
  }
  if (from.validators_hash().size() > 0) {

    validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validators_hash_);
  }
  if (from.app_hash().size() > 0) {

    app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_hash_);
  }
  if (from.has_last_block_id()) {
    mutable_last_block_id()->::abci::BlockID::MergeFrom(from.last_block_id());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.num_txs() != 0) {
    set_num_txs(from.num_txs());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  chain_id_.Swap(&other->chain_id_);
  last_commit_hash_.Swap(&other->last_commit_hash_);
  data_hash_.Swap(&other->data_hash_);
  validators_hash_.Swap(&other->validators_hash_);
  app_hash_.Swap(&other->app_hash_);
  swap(last_block_id_, other->last_block_id_);
  swap(height_, other->height_);
  swap(time_, other->time_);
  swap(num_txs_, other->num_txs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockID::InitAsDefaultInstance() {
  ::abci::_BlockID_default_instance_._instance.get_mutable()->parts_ = const_cast< ::abci::PartSetHeader*>(
      ::abci::PartSetHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockID::kHashFieldNumber;
const int BlockID::kPartsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockID::BlockID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsBlockID();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.BlockID)
}
BlockID::BlockID(const BlockID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_parts()) {
    parts_ = new ::abci::PartSetHeader(*from.parts_);
  } else {
    parts_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:abci.BlockID)
}

void BlockID::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parts_ = NULL;
  _cached_size_ = 0;
}

BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:abci.BlockID)
  SharedDtor();
}

void BlockID::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parts_;
}

void BlockID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockID::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockID& BlockID::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsBlockID();
  return *internal_default_instance();
}

BlockID* BlockID::New(::google::protobuf::Arena* arena) const {
  BlockID* n = new BlockID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && parts_ != NULL) {
    delete parts_;
  }
  parts_ = NULL;
  _internal_metadata_.Clear();
}

bool BlockID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.BlockID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .abci.PartSetHeader parts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.BlockID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.BlockID)
  return false;
#undef DO_
}

void BlockID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .abci.PartSetHeader parts = 2;
  if (this->has_parts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parts_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.BlockID)
}

::google::protobuf::uint8* BlockID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // .abci.PartSetHeader parts = 2;
  if (this->has_parts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->parts_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.BlockID)
  return target;
}

size_t BlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.BlockID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .abci.PartSetHeader parts = 2;
  if (this->has_parts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parts_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.BlockID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.BlockID)
    MergeFrom(*source);
  }
}

void BlockID::MergeFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_parts()) {
    mutable_parts()->::abci::PartSetHeader::MergeFrom(from.parts());
  }
}

void BlockID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockID::IsInitialized() const {
  return true;
}

void BlockID::Swap(BlockID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockID::InternalSwap(BlockID* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  swap(parts_, other->parts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockID::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartSetHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartSetHeader::kTotalFieldNumber;
const int PartSetHeader::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartSetHeader::PartSetHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsPartSetHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.PartSetHeader)
}
PartSetHeader::PartSetHeader(const PartSetHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:abci.PartSetHeader)
}

void PartSetHeader::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = 0;
  _cached_size_ = 0;
}

PartSetHeader::~PartSetHeader() {
  // @@protoc_insertion_point(destructor:abci.PartSetHeader)
  SharedDtor();
}

void PartSetHeader::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartSetHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartSetHeader::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartSetHeader& PartSetHeader::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsPartSetHeader();
  return *internal_default_instance();
}

PartSetHeader* PartSetHeader::New(::google::protobuf::Arena* arena) const {
  PartSetHeader* n = new PartSetHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.PartSetHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = 0;
  _internal_metadata_.Clear();
}

bool PartSetHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.PartSetHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.PartSetHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.PartSetHeader)
  return false;
#undef DO_
}

void PartSetHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.PartSetHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.PartSetHeader)
}

::google::protobuf::uint8* PartSetHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.PartSetHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.PartSetHeader)
  return target;
}

size_t PartSetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.PartSetHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // int32 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartSetHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.PartSetHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PartSetHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartSetHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.PartSetHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.PartSetHeader)
    MergeFrom(*source);
  }
}

void PartSetHeader::MergeFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.PartSetHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void PartSetHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartSetHeader::CopyFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartSetHeader::IsInitialized() const {
  return true;
}

void PartSetHeader::Swap(PartSetHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartSetHeader::InternalSwap(PartSetHeader* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  swap(total_, other->total_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartSetHeader::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Validator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Validator::kPubKeyFieldNumber;
const int Validator::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Validator::Validator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsValidator();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Validator)
}
Validator::Validator(const Validator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pub_key().size() > 0) {
    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:abci.Validator)
}

void Validator::SharedCtor() {
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:abci.Validator)
  SharedDtor();
}

void Validator::SharedDtor() {
  pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Validator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Validator::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Validator& Validator::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsValidator();
  return *internal_default_instance();
}

Validator* Validator::New(::google::protobuf::Arena* arena) const {
  Validator* n = new Validator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Validator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Validator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Validator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pub_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 power = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Validator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Validator)
  return false;
#undef DO_
}

void Validator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Validator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pub_key(), output);
  }

  // int64 power = 2;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->power(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.Validator)
}

::google::protobuf::uint8* Validator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.Validator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pub_key(), target);
  }

  // int64 power = 2;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->power(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Validator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pub_key());
  }

  // int64 power = 2;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->power());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Validator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  const Validator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Validator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Validator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Validator)
    MergeFrom(*source);
  }
}

void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
}

void Validator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::Swap(Validator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Validator::InternalSwap(Validator* other) {
  using std::swap;
  pub_key_.Swap(&other->pub_key_);
  swap(power_, other->power_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Validator::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Evidence::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Evidence::kPubKeyFieldNumber;
const int Evidence::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Evidence::Evidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_abci_2eproto::InitDefaultsEvidence();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:abci.Evidence)
}
Evidence::Evidence(const Evidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pub_key().size() > 0) {
    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:abci.Evidence)
}

void Evidence::SharedCtor() {
  pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:abci.Evidence)
  SharedDtor();
}

void Evidence::SharedDtor() {
  pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Evidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Evidence::descriptor() {
  ::protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Evidence& Evidence::default_instance() {
  ::protobuf_abci_2eproto::InitDefaultsEvidence();
  return *internal_default_instance();
}

Evidence* Evidence::New(::google::protobuf::Arena* arena) const {
  Evidence* n = new Evidence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:abci.Evidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Evidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abci.Evidence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pub_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abci.Evidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abci.Evidence)
  return false;
#undef DO_
}

void Evidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abci.Evidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pub_key(), output);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:abci.Evidence)
}

::google::protobuf::uint8* Evidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abci.Evidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pub_key(), target);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abci.Evidence)
  return target;
}

size_t Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abci.Evidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pub_key());
  }

  // int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Evidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abci.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Evidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Evidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abci.Evidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abci.Evidence)
    MergeFrom(*source);
  }
}

void Evidence::MergeFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abci.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Evidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abci.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abci.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {
  return true;
}

void Evidence::Swap(Evidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Evidence::InternalSwap(Evidence* other) {
  using std::swap;
  pub_key_.Swap(&other->pub_key_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Evidence::GetMetadata() const {
  protobuf_abci_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_abci_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace abci

// @@protoc_insertion_point(global_scope)
